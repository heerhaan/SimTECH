@page "/entrantwizard/{SeasonId:long}"
@using MudBlazor.Extensions
@using MudExtensions.Enums;
@using MudExtensions.Utilities
@using SimTECH.Pages.Season.EntrantWizard.Steps
@inject BreadcrumbProvider _bread
@inject SeasonService _seasonService
@inject SeasonEntrantService _entrantService
@inject NavigationManager _nav
@inject IOptions<SimConfig> _config

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudPaper Elevation="5">
        <CascadingValue Value="@Model">
            <MudStepper @ref="stepper"
                        Loading="@loading"
                        Color="Color.Tertiary"
                        Variant="Variant.Outlined"
                        Linear="true"
                        DisableSkipButton="true"
                        DisablePreviousButton="true"
                        HeaderTextView="HeaderTextView.All"
                        HeaderBadgeView="HeaderBadgeView.GreyOutIncomplete"
                        PreventStepChangeAsync="InvalidStepPrevention">
                <StaticContent>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h5">@stepTitle</MudText>
                        <MudSpacer />
                        <MudStack Class="pa-0 mx-2">
                            @foreach (var error in errors)
                            {
                                <MudText Color="Color.Error">@error</MudText>
                            }
                        </MudStack>
                        @if (stepper?.IsAllStepsCompleted() == true)
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="AddAllEntrants">Confirm & save</MudButton>
                        }
                    </MudStack>
                </StaticContent>
                <ChildContent>
                    <MudStep Title="Add engines" Icon="@IconCollection.Engine">
                        <ChildContent>
                            <AddEngines />
                        </ChildContent>
                    </MudStep>
                    <MudStep Title="Edit engines" Icon="@IconCollection.Engine">
                        <ChildContent>
                            @if (stepper.GetActiveIndex() == 1)
                            {
                                <EditEngines SeasonId="@SeasonId" PreviousSeasonId="@(PreviousSeason?.Id ?? null)" />
                            }
                        </ChildContent>
                    </MudStep>
                    <MudStep Title="Add teams" Icon="@IconCollection.Car">
                        <ChildContent>
                            @if (stepper.GetActiveIndex() == 2)
                            {
                                <AddTeams />
                            }
                        </ChildContent>
                    </MudStep>
                    <MudStep Title="Edit teams" Icon="@IconCollection.Car">
                        <ChildContent>
                            @if (stepper.GetActiveIndex() == 3)
                            {
                                <EditTeams SeasonId="@SeasonId" PreviousSeasonId="@(PreviousSeason?.Id ?? null)" />
                            }
                        </ChildContent>
                    </MudStep>
                    <MudStep Title="Assign engines" Icon="@IconCollection.Car">
                        <ChildContent>
                            @if (stepper.GetActiveIndex() == 4)
                            {
                                <AssignTeamEngines />
                            }
                        </ChildContent>
                    </MudStep>
                    <MudStep Title="Add drivers" Icon="@IconCollection.Helmet">
                        <ChildContent>
                            @if (stepper.GetActiveIndex() == 5)
                            {
                                <AddDrivers Year="@(Season.Year)" />
                            }
                        </ChildContent>
                    </MudStep>
                    <MudStep Title="Edit drivers" Icon="@IconCollection.Helmet">
                        <ChildContent>
                            @if (stepper.GetActiveIndex() == 6)
                            {
                                <EditDrivers SeasonId="@SeasonId" PreviousSeasonId="@(PreviousSeason?.Id ?? null)" />
                            }
                        </ChildContent>
                    </MudStep>
                    <MudStep Title="Assign drivers" Icon="@IconCollection.Helmet">
                        <ChildContent>
                            @if (stepper.GetActiveIndex() == 7)
                            {
                                <AssignDriverTeams />
                            }
                        </ChildContent>
                    </MudStep>
                    <MudStep Title="Result" IsResultStep="true" Icon="@Icons.Material.Filled.Flag">
                        <ChildContent>
                            @if (stepper.GetActiveIndex() == 8)
                            {
                                <FinalCheck SeasonId="@SeasonId" />
                            }
                        </ChildContent>
                    </MudStep>
                </ChildContent>
            </MudStepper>
        </CascadingValue>
    </MudPaper>
</MudContainer>

@code {
    [Parameter] public long SeasonId { get; set; }

    public AddEntrantsModel Model { get; set; } = new();
    public Season Season { get; set; }
    public Season? PreviousSeason { get; set; }

    MudStepper stepper;

    bool loading = true;
    string stepTitle = "Add engines";
    List<string> errors = new();

    protected override async Task OnInitializedAsync()
    {
        Season = await _seasonService.GetSeasonById(SeasonId);
        PreviousSeason = await _seasonService.FindRecentClosedSeason(Season.LeagueId);

        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Seasons", href: "seasons"),
            new BreadcrumbItem("Overview", href: $"overview/{Season.Id}"),
            new BreadcrumbItem("Wizard", href: $"entrantwizard/{Season.Id}"),
        });

        loading = false;
    }

    private Task<bool> InvalidStepPrevention(StepChangeDirection direction)
    {
        errors.Clear();

        var activeIndex = stepper.GetActiveIndex();

        if (direction == StepChangeDirection.Backward)
        {
            SetTitle(--activeIndex);
            return Task.FromResult(false);
        }

        loading = true;

        switch (activeIndex)
        {
            //Step: adding engines to season
            case 0:
                if (!(Model.BaseEngines?.Any() == true))
                {
                    errors.Add("Suggestion: add some goddamn engines to the season");
                }
                break;
            //Step: editing entered engines
            case 1:
                {
                    if (Model.SeasonEngines.Any())
                    {
                        foreach (var engine in Model.SeasonEngines)
                            engine.Validate(errors);
                    }
                    else
                    {
                        errors.Add("You fucked up");
                    }
                }
                break;
            //Step: adding teams to season
            case 2:
                if (!(Model.BaseTeams?.Any() == true))
                {
                    errors.Add("Suggestion: add some goddamn teams to the season");
                }
                break;
            //Step: editing teams
            case 3:
                {
                    if (Model.SeasonTeams.Any())
                    {
                        foreach (var team in Model.SeasonTeams)
                            team.Validate(errors);
                    }
                    else
                    {
                        errors.Add("You fucked up");
                    }
                }
                break;
            //Step: team assignment
            case 4:
                if (Model.SeasonTeams.Any(e => e.BaseEngineId == 0))
                {
                    errors.Add("Oi oi mate, how is a team going to drive without an engine? Try again.");
                }
                break;
            //Step: adding drivers
            case 5:
                if (!(Model.BaseDrivers?.Any() == true))
                {
                    errors.Add("Suggestion: add some goddamn drivers to the season");
                }
                break;
            //Step: editing drivers
            case 6:
                {
                    if (Model.SeasonDrivers.Any())
                    {
                        foreach (var driver in Model.SeasonDrivers)
                            driver.Validate(errors);
                    }
                    else
                    {
                        errors.Add("You fucked up");
                    }
                }
                break;
            case 7:
                {
                    if (!_config.Value.PersonalNumbersEnabled)
                    {
                        int numberIndexer = 0;
                        foreach (var driver in Model.SeasonDrivers.OrderBy(e => e.BaseTeamId))
                            driver.Number = ++numberIndexer;
                    }
                }
                break;
        }

        loading = false;

        if (errors.Any())
            return Task.FromResult(true);

        SetTitle(++activeIndex);

        return Task.FromResult(false);
    }

    private void SetTitle(int forIndex)
    {
        switch (forIndex)
        {
            case 0:
                stepTitle = "Add engines";
                break;
            case 1:
                stepTitle = "Edit engines";
                break;
            case 2:
                stepTitle = "Add teams";
                break;
            case 3:
                stepTitle = "Edit teams";
                break;
            case 4:
                stepTitle = "Assign teams";
                break;
            case 5:
                stepTitle = "Add drivers";
                break;
            case 6:
                stepTitle = "Edit drivers";
                break;
            case 7:
                stepTitle = "Assign drivers";
                break;
            case 8:
                stepTitle = "Participants";
                break;
        }
    }

    private async Task AddAllEntrants()
    {
        Model.CombineEntrantModels();

        var rootEntrants = Model.SeasonEngines.Select(e => e.Record).ToList();

        await _entrantService.PersistSeasonEntrants(rootEntrants);

        _nav.NavigateTo($"/overview/{SeasonId}");
    }
}
