@page "/entrantwizard/{SeasonId:long}"
@using MudBlazor.Extensions
@using MudExtensions.Enums;
@using MudExtensions.Utilities
@using SimTECH.Pages.Season.EntrantWizard.Steps

@inject EngineService _engineService
@inject TeamService _teamService
@inject DriverService _driverService
@inject SeasonService _seasonService
@inject SeasonEntrantService _entrantService
@inject ManufacturerService _manufacturerService
@inject NavigationManager _nav
@inject ISnackbar _snackbar
@inject IOptions<SimConfig> _config

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudPaper>
        <CascadingValue Value="@Model">
            <MudStepper @ref="stepper"
                        Loading="@loading"
                        Variant="Variant.Outlined"
                        Linear="true"
                        DisableSkipButton="true"
                        PreventStepChangeAsync="InvalidStepPrevention">
                <StaticContent>
                    <MudStack Row="true" Justify="Justify.Center">
                        @foreach (var error in errors)
                        {
                            <MudText Color="Color.Error">@error</MudText>
                        }
                    </MudStack>
                </StaticContent>
                <ChildContent>
                    <AddEngines Engines="@Engines" />
                    <EditEngines SeasonId="@SeasonId" PreviousSeasonId="@(PreviousSeason?.Id ?? null)" />

                    <AddTeams Teams="@Teams" />
                    <EditTeams Manufacturers="@Manufacturers" SeasonId="@SeasonId" PreviousSeasonId="@(PreviousSeason?.Id ?? null)" />
                    <AssignTeamEngines />

                    <AddDrivers Drivers="@Drivers" Year="@(Season.Year)" />
                    <EditDrivers SeasonId="@SeasonId" PreviousSeasonId="@(PreviousSeason?.Id ?? null)" />
                    <AssignDriverTeams />

                    <FinalCheck SeasonId="@SeasonId" />
                </ChildContent>
            </MudStepper>
        </CascadingValue>
    </MudPaper>
</MudContainer>

@code {
    [Parameter]
    public long SeasonId { get; set; }

    public AddEntrantsModel Model { get; set; } = new();
    public Season Season { get; set; }

    public Season? PreviousSeason { get; set; }
    public List<Engine> Engines { get; set; }
    public List<Team> Teams { get; set; }
    public List<Driver> Drivers { get; set; }
    public List<Manufacturer> Manufacturers { get; set; }

    MudStepper stepper;

    bool loading = false;
    List<string> errors = new();

    protected override async Task OnInitializedAsync()
    {
        loading = true;

        Season = await _seasonService.GetSeasonById(SeasonId);
        PreviousSeason = await _seasonService.FindRecentClosedSeason(Season.LeagueId);

        Engines = await _engineService.GetEngines();
        Manufacturers = await _manufacturerService.GetManufacturers();

        loading = false;
    }

    private async Task<bool> InvalidStepPrevention(StepChangeDirection direction)
    {
        errors.Clear();

        if (direction == StepChangeDirection.Backward)
            return false;

        switch (stepper.GetActiveIndex())
        {
            //Step: adding engines to season
            case 0:
                if (!(Model.BaseEngines?.Any() == true))
                {
                    errors.Add("Suggestion: add some goddamn engines to the season");
                }
                break;
            //Step: editing entered engines
            case 1:
                {
                    if (Model.SeasonEngines.Any())
                    {
                        foreach (var engine in Model.SeasonEngines)
                            engine.Validate(errors);
                    }
                    else
                    {
                        errors.Add("You fucked up");
                    }
                }
                break;
            //Step: adding teams to season
            case 2:
                if (!(Model.BaseTeams?.Any() == true))
                {
                    errors.Add("Suggestion: add some goddamn teams to the season");
                }
                break;
            //Step: editing teams
            case 3:
                {
                    if (Model.SeasonTeams.Any())
                    {
                        foreach (var team in Model.SeasonTeams)
                            team.Validate(errors);
                    }
                    else
                    {
                        errors.Add("You fucked up");
                    }
                }
                break;
            //Step: team assignment
            case 4:
                {

                }
                break;
            //Step: adding drivers
            case 5:
                if (!(Model.BaseDrivers?.Any() == true))
                {
                    errors.Add("Suggestion: add some goddamn drivers to the season");
                }
                break;
            //Step: editing drivers
            case 6:
                {
                    if (Model.SeasonDrivers.Any())
                    {
                        foreach (var driver in Model.SeasonDrivers)
                            driver.Validate(errors);
                    }
                    else
                    {
                        errors.Add("You fucked up");
                    }
                }
                break;
            default:
                break;
        }

        return errors.Any();
    }
}
