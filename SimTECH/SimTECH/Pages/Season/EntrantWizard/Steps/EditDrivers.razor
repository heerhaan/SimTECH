@inject SeasonEntrantService _entrantService
@inject IOptions<SimConfig> _config

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper Elevation="15">
        @if (!_config.Value.PersonalNumbersEnabled)
        {
            <MudText Color="Color.Info">Don't worry about the numbers, these fix themselves</MudText>
        }
        <MudForm>
            <MudTable T="EditSeasonDriverModel" Items="@Model.SeasonDrivers" Hover="true" Class="overflow-hider">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Number</MudTh>
                    <MudTh>TeamRole</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">
                        <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                            <MudText>@context.Driver?.FullName</MudText>
                            <MudSpacer />
                            <CountryFlag Code="@(context.Driver?.Country ?? Constants.DefaultCountry)" Size="FlagSize.Small" />
                        </MudStack>
                    </MudTd>
                    <MudTd DataLabel="Number">
                        <MudText Typo="Typo.caption">@context.Number</MudText>
                    </MudTd>
                    <MudTd DataLabel="TeamRole">
                        <MudText>@context.TeamRole</MudText>
                    </MudTd>
                </RowTemplate>
                <RowEditingTemplate>
                    <MudTd DataLabel="Name">
                        <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                            <MudText>@context.Driver?.FullName</MudText>
                            <MudSpacer />
                            <CountryFlag Code="@(context.Driver?.Country ?? Constants.DefaultCountry)" Size="FlagSize.Small" />
                        </MudStack>
                    </MudTd>
                    <MudTd DataLabel="Number">
                        <MudNumericField @bind-Value="@context.Number" />
                    </MudTd>
                    <MudTd DataLabel="TeamRole">
                        <MudSelect T="TeamRole" @bind-Value="@context.TeamRole">
                            @foreach (var select in EnumHelper.GetTeamRoleSelection)
                            {
                                <MudSelectItem Value="select.Key">@select.Value</MudSelectItem>
                            }
                        </MudSelect>
                    </MudTd>
                </RowEditingTemplate>
                <EditButtonContent Context="button">
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" />
                </EditButtonContent>
            </MudTable>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    [CascadingParameter] public AddEntrantsModel Model { get; set; }

    [Parameter, EditorRequired] public long SeasonId { get; set; }

    [Parameter] public long? PreviousSeasonId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await SetDriverEditors();
    }

    private async Task SetDriverEditors()
    {
        Model.SeasonDrivers.Clear();

        List<SeasonTeam>? previousTeams = null;

        if (PreviousSeasonId.HasValue)
        {
            var existingTeamIds = Model.SeasonTeams.Select(e => e.TeamId).ToArray();
            var allPrevious = await _entrantService.GetSeasonTeams(PreviousSeasonId.Value);
            previousTeams = allPrevious.Where(e => existingTeamIds.Contains(e.TeamId)).ToList();
        }

        int indexer = 0;
        foreach (var driver in Model.BaseDrivers.Where(e => !(Model.SeasonDrivers.Select(sd => sd.DriverId).Contains(e.Id))))
        {
            var previousDriver = await _entrantService.FindRecentSeasonDriver(driver.Id);

            // Create a new edit model from the nullable entity, reset the identifying fields and assign the new ones
            var model = new EditSeasonDriverModel(previousDriver);
            model.ResetIdentifierFields();
            model.SeasonId = SeasonId;
            model.DriverId = driver.Id;
            model.Driver = driver;

            if (!_config.Value.PersonalNumbersEnabled)
                model.Number = ++indexer;

            if (previousDriver != null && previousTeams != null)
                model.BaseTeamId = previousTeams.Find(e => e.Id == previousDriver.SeasonTeamId)?.TeamId ?? 0;

            Model.SeasonDrivers.Add(model);
        }

        Model.RemoveUnsetDrivers();
    }
}
