@inject SeasonEntrantService _entrantService

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Elevation="15">
        <MudForm>
            <MudTable T="EditSeasonEngineModel" Items="@Model.SeasonEngines" Hover="true">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">
                        <MudText Typo="Typo.caption">@context.Name</MudText>
                    </MudTd>
                </RowTemplate>
                <RowEditingTemplate>
                    <MudTd DataLabel="Name">
                        <MudTextField @bind-Value="@context.Name" Required />
                    </MudTd>
                </RowEditingTemplate>
                <EditButtonContent Context="button">
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" />
                </EditButtonContent>
            </MudTable>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    [CascadingParameter] public AddEntrantsModel Model { get; set; }

    [Parameter, EditorRequired] public long LeagueId { get; set; }
    [Parameter, EditorRequired] public long SeasonId { get; set; }
    [Parameter] public long? PreviousSeasonId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await SetEngineEditors();
    }

    private async Task SetEngineEditors()
    {
        Model.SeasonEngines.Clear();

        foreach (var engine in Model.BaseEngines.Where(e => !(Model.SeasonEngines.Select(se => se.EngineId).Contains(e.Id))))
        {
            var previousEngine = await _entrantService.FindRecentSeasonEngine(engine.Id, LeagueId);

            var model = new EditSeasonEngineModel(previousEngine);
            model.ResetIdentifierFields();
            model.SeasonId = SeasonId;
            model.EngineId = engine.Id;
            model.Name = string.IsNullOrEmpty(model.Name) ? engine.Name : model.Name;

            Model.SeasonEngines.Add(model);
        }

        Model.RemoveUnsetEngines();
    }
}
