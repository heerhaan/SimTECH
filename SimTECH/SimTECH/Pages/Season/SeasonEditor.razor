<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">Modify season</MudText>
    </TitleContent>
    <DialogContent>
        <MudPaper Elevation="50" MinWidth="800px" Class="d-flex flex-row flex-nowrap">
            <MudPaper Elevation="25" Class="pa-4 mud-height-full">
                <MudStack Spacing="6">
                    <div>
                        <MudText Typo="Typo.subtitle1">Information</MudText>
                        <MudDivider />
                        <MudNumericField T="int" @bind-Value="Model.Year" Label="Year" Class="field-sm" />
                    </div>
                    <div>
                        <MudText Typo="Typo.subtitle1">Session setup</MudText>
                        <MudDivider />

                        <MudText Typo="Typo.body2">Qualifying format</MudText>
                        <MudChipSet Mandatory="true" SelectedChipChanged="QualyFormatChanged" Class="py-1">
                            <MudChip Value="QualyFormat.TripleEliminate" Color="Color.Secondary" Default="@(Model.QualifyingFormat == QualyFormat.TripleEliminate)">
                                Three session elimination
                            </MudChip>
                            <MudChip Value="QualyFormat.OneSession" Color="Color.Secondary" Default="@(Model.QualifyingFormat == QualyFormat.OneSession)">
                                One session
                            </MudChip>
                        </MudChipSet>

                        <MudNumericField T="int" @bind-Value="Model.RunAmountSession" Label="Run count per session" Class="field-sm" />
                        <MudNumericField T="int" @bind-Value="Model.QualifyingRNG" Label="Qualifying MAX RNG" Class="field-sm" />

                        @if (Model.QualifyingFormat == QualyFormat.TripleEliminate)
                        {

                            <MudStack Row="true" Spacing="1">
                                <MudNumericField T="int" @bind-Value="Model.QualifyingAmountQ2" Label="Allowed drivers in Q2" Class="field-sm" />
                                <MudNumericField T="int" @bind-Value="Model.QualifyingAmountQ3" Label="Allowed drivers in Q3" Class="field-sm" />
                            </MudStack>
                        }
                    </div>
                    <div>
                        <MudText Typo="Typo.subtitle1">Race setup</MudText>
                        <MudDivider />

                        <MudStack Row="true" Spacing="1">
                            <MudNumericField T="int" @bind-Value="Model.RngMinimum" Label="Race MIN RNG" Class="field-sm" />
                            <MudNumericField T="int" @bind-Value="Model.RngMaximum" Label="Race MAX RNG" Class="field-sm" />
                        </MudStack>

                        <MudStack Row="true" Spacing="1">
                            <MudNumericField T="int" @bind-Value="Model.MistakeMinimum" Min="0" Label="Mistake MIN RNG" Class="field-sm" />
                            <MudNumericField T="int" @bind-Value="Model.MistakeMaximum" Min="@Model.MistakeMinimum" Label="Mistake MAX RNG" Class="field-sm" />
                            <MudNumericField T="int" @bind-Value="Model.MistakeRolls" Min="0" Label="Mistake rolls" Class="field-sm" />
                        </MudStack>

                        <MudStack Row="true" Spacing="1">
                            <MudNumericField T="int" @bind-Value="Model.PitMinimum" Min="0" Label="Pit MIN RNG" Class="field-sm" />
                            <MudNumericField T="int" @bind-Value="Model.PitMaximum" Min="@Model.PitMinimum" Label="Pit MAX RNG" Class="field-sm" />
                            <MudNumericField T="int" @bind-Value="Model.PitCostSubtractCaution" Min="0" Label="Subtracted during SC" Class="field-sm" />
                        </MudStack>

                        <MudNumericField T="int" @bind-Value="Model.MaximumDriversInRace" Label="MAX drivers in race" Class="field-sm" />
                        <MudNumericField T="int" @bind-Value="Model.GridBonus" Label="Bonus per grid POS" Class="field-sm" />
                    </div>
                    <div>
                        <MudText Typo="Typo.subtitle1">Bonus points</MudText>
                        <MudDivider />

                        <MudStack Row="true" Spacing="1">
                            <MudNumericField T="int" @bind-Value="Model.PointsPole" Label="Pole position" Class="field-sm" />
                            <MudNumericField T="int" @bind-Value="Model.PointsFastestLap" Label="Fastest lap" Class="field-sm" />
                        </MudStack>
                    </div>
                    @if (Model.Id == 0)
                    {
                        <div>
                            <MudText Typo="Typo.subtitle1">Select a league for this season</MudText>
                            <MudDivider />

                            <MudSelect T="long" @bind-Value="Model.LeagueId" Label="League">
                                @foreach (var select in Leagues)
                                {
                                    <MudSelectItem Value="select.Id">@select.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </div>
                    }
                </MudStack>
            </MudPaper>
            <MudPaper Elevation="25" Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle1">Achieved points per position</MudText>
                <MudDivider />

                <MudTable Items="@Model.PointAllotments.OrderBy(e => e.Position)" Dense="true" ReadOnly="false" Class="extra-dense"
                          RowEditPreview="BackupAllotment" RowEditCancel="ResetAllotment" ApplyButtonPosition="TableApplyButtonPosition.End"
                          EditButtonPosition="TableEditButtonPosition.End" EditTrigger="TableEditTrigger.RowClick">
                    <ToolBarContent>
                        <MudStack Row="true" Class="pa-0 mud-width-full">
                            <MudSpacer />
                            <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Tertiary" OnClick="AppendAllotment" Size="Size.Small">
                                Append position
                            </MudButton>
                        </MudStack>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>POS</MudTh>
                        <MudTh>PTS</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Position">
                            <MudNumericField @bind-Value="@context.Position" Required />
                        </MudTd>
                        <MudTd DataLabel="Points">
                            <MudNumericField @bind-Value="@context.Points" Required />
                        </MudTd>
                        <MudTd>
                            <MudIconButton Size="@Size.Small"
                                           Icon="@Icons.Material.Outlined.Delete"
                                           Color="Color.Error"
                                           Class="pa-0"
                                           OnClick="@(() => RemoveAllotment(context))" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? SeasonDialog { get; set; }
    [Parameter] public EditSeasonModel Model { get; set; }
    [Parameter] public IEnumerable<League> Leagues { get; set; } = Enumerable.Empty<League>();

    private EditPointAllotmentModel allotmentBackup;

    private int lowestPosition;

    protected override void OnInitialized()
    {
        if (Model.PointAllotments.Any())
            lowestPosition = Model.PointAllotments.Max(e => e.Position);
    }

    private void QualyFormatChanged(MudChip? qualyChip)
    {
        if (qualyChip == null)
            return;

        Model.QualifyingFormat = (QualyFormat)qualyChip.Value;
    }

    private void BackupAllotment(object allotment) //alternatively use EditPointAllotmentModel if this doesnt work
    {
        allotmentBackup = new()
            {
                Id = ((EditPointAllotmentModel)allotment).Id,
                Position = ((EditPointAllotmentModel)allotment).Position,
                Points = ((EditPointAllotmentModel)allotment).Points
            };
    }

    private void ResetAllotment(object allotment) //alternatively use EditPointAllotmentModel if this doesnt work
    {
        ((EditPointAllotmentModel)allotment).Id = allotmentBackup.Id;
        ((EditPointAllotmentModel)allotment).Position = allotmentBackup.Position;
        ((EditPointAllotmentModel)allotment).Points = allotmentBackup.Points;
    }

    private void AppendAllotment()
    {
        Model.PointAllotments.Add(new EditPointAllotmentModel
            {
                Position = ++lowestPosition,
                Points = 0
            });
    }

    private void RemoveAllotment(EditPointAllotmentModel allotment)
    {
        --lowestPosition;
        Model.PointAllotments.Remove(allotment);
    }

    private void Submit()
    {
        if (Model.IsDirty)
        {
            var modSeason = Model.Record;
            SeasonDialog?.Close(DialogResult.Ok(modSeason));
        }
    }

    private void Cancel() => SeasonDialog?.Cancel();
}
