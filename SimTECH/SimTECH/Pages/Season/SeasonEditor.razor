<MudDialog>
    <TitleContent>
        <MudText>Modify a season</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@Model">
            <MudGrid Spacing="2">
                <MudItem xs="8">
                    <MudPaper Elevation="5" Class="pa-4 mud-height-full">
                        <MudStack Spacing="6">
                            <div>
                                <MudText Typo="Typo.subtitle1">Information</MudText>
                                <MudDivider />
                                <MudNumericField T="int" @bind-Value="Model.Year" Label="Year" Class="field-sm" />
                            </div>
                            <div>
                                <MudText Typo="Typo.subtitle1">Qualifying (and practice) setup</MudText>
                                <MudDivider />

                                <MudChipSet Mandatory="true" SelectedChipChanged="QualyFormatChanged">
                                    <MudChip Value="QualyFormat.TripleEliminate" Color="Color.Primary" Default="@(Model.QualifyingFormat == QualyFormat.TripleEliminate)">Three session elimination</MudChip>
                                    <MudChip Value="QualyFormat.OneSession" Color="Color.Primary" Default="@(Model.QualifyingFormat == QualyFormat.OneSession)">One session</MudChip>
                                </MudChipSet>

                                <MudNumericField T="int" @bind-Value="Model.RunAmountSession" Label="Amount of runs per session" Class="field-md" />
                                <MudNumericField T="int" @bind-Value="Model.QualifyingRNG" Label="Maximum RNG for qualifying" Class="field-md" />
                                
                                @if (Model.QualifyingFormat == QualyFormat.TripleEliminate)
                                {
                                    <MudStack Row="true" Spacing="4">
                                        <MudNumericField T="int" @bind-Value="Model.QualifyingAmountQ2" Label="Amount of drivers in Q2" Class="field-md" />
                                        <MudNumericField T="int" @bind-Value="Model.QualifyingAmountQ3" Label="Amount of drivers in Q3" Class="field-md" />
                                    </MudStack>
                                }
                            </div>
                            <div>
                                <MudText Typo="Typo.subtitle1">Race setup</MudText>
                                <MudDivider />

                                <MudStack Row="true" Spacing="4">
                                    <MudNumericField T="int" @bind-Value="Model.RngMinimum" Label="Race Min. RNG" Class="field-md" />
                                    <MudNumericField T="int" @bind-Value="Model.RngMaximum" Label="Race Max. RNG" Class="field-md" />
                                </MudStack>

                                <MudStack Row="true" Spacing="4">
                                    <MudNumericField T="int" @bind-Value="Model.PitMinimum" Min="0" Label="Pit Min. RNG" Class="field-md" />
                                    <MudNumericField T="int" @bind-Value="Model.PitMaximum" Min="@(Model.PitMinimum)" Label="Pit Max. RNG" Class="field-md" />
                                </MudStack>

                                <MudNumericField T="int" @bind-Value="Model.MaximumDriversInRace" Label="Maximum allowed drivers in race" Class="field-md" />
                                <MudNumericField T="int" @bind-Value="Model.GridBonus" Label="Bonus per grid position" Class="field-md" />
                            </div>
                            <div>
                                <MudText Typo="Typo.subtitle1">Additional points</MudText>
                                <MudDivider />

                                <MudNumericField T="int" @bind-Value="Model.PointsPole" Label="Awarded points Pole" Class="field-md" />
                                <MudNumericField T="int" @bind-Value="Model.PointsFastestLap" Label="Awarded points Fastest Lap" Class="field-md" />
                            </div>
                            @if (Model.Id == 0)
                            {
                                <div>
                                    <MudText Typo="Typo.subtitle1">Select a league for this season</MudText>
                                    <MudDivider />

                                    <MudSelect T="long" @bind-Value="Model.LeagueId" Label="League">
                                        @foreach (var select in Leagues)
                                        {
                                            <MudSelectItem Value="select.Id">@select.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                </div>
                            }
                        </MudStack>
                    </MudPaper>
                </MudItem>

                <MudItem xs="4">
                    <MudPaper Elevation="5" Class="pa-4 mud-height-full">
                        <MudText Typo="Typo.subtitle1">Achieved points per position</MudText>
                        <MudDivider />

                        <MudTable Items="@Model.PointAllotments" Dense="true" ReadOnly="false" Class="extra-dense"
                                  RowEditPreview="BackupAllotment" RowEditCancel="ResetAllotment" ApplyButtonPosition="TableApplyButtonPosition.End"
                                  EditButtonPosition="TableEditButtonPosition.End" EditTrigger="TableEditTrigger.RowClick">
                            <ToolBarContent>
                                <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Tertiary" OnClick="AppendAllotment" Size="Size.Small" />
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh>
                                    <MudTableSortLabel SortBy="new Func<EditPointAllotmentModel, object>(e => e.Position)">Position</MudTableSortLabel>
                                </MudTh>
                                <MudTh>Points</MudTh>
                                <MudTh></MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Position">
                                    <MudNumericField @bind-Value="@context.Position" Required />
                                </MudTd>
                                <MudTd DataLabel="Points">
                                    <MudNumericField @bind-Value="@context.Points" Required />
                                </MudTd>
                                <MudTd>
                                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" Class="pa-0" OnClick="@(() => RemoveAllotment(context))" />
                                </MudTd>
                            </RowTemplate>
                            <EditButtonContent Context="button">
                                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
                            </EditButtonContent>
                        </MudTable>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? SeasonDialog { get; set; }
    [Parameter] public EditSeasonModel Model { get; set; }
    [Parameter] public IEnumerable<League> Leagues { get; set; } = Enumerable.Empty<League>();

    private EditPointAllotmentModel allotmentBackup;

    private int _lowestPosition;

    protected override void OnInitialized()
    {
        if (Model.PointAllotments.Any())
            _lowestPosition = Model.PointAllotments.Max(e => e.Position);
    }

    private void QualyFormatChanged(MudChip? qualyChip)
    {
        if (qualyChip == null)
            return;

        Model.QualifyingFormat = (QualyFormat)qualyChip.Value;
    }

    private void BackupAllotment(object allotment) //alternatively use EditPointAllotmentModel if this doesnt work
    {
        allotmentBackup = new()
            {
                Id = ((EditPointAllotmentModel)allotment).Id,
                Position = ((EditPointAllotmentModel)allotment).Position,
                Points = ((EditPointAllotmentModel)allotment).Points
            };
    }

    private void ResetAllotment(object allotment) //alternatively use EditPointAllotmentModel if this doesnt work
    {
        ((EditPointAllotmentModel)allotment).Id = allotmentBackup.Id;
        ((EditPointAllotmentModel)allotment).Position = allotmentBackup.Position;
        ((EditPointAllotmentModel)allotment).Points = allotmentBackup.Points;
    }

    private void AppendAllotment()
    {
        Model.PointAllotments.Add(new EditPointAllotmentModel
            {
                Position = ++_lowestPosition,
                Points = 0
            });
    }

    private void RemoveAllotment(EditPointAllotmentModel allotment)
    {
        --_lowestPosition;
        Model.PointAllotments.Remove(allotment);
    }

    private void Submit()
    {
        if (Model.IsDirty)
        {
            var modSeason = Model.Record;
            SeasonDialog?.Close(DialogResult.Ok(modSeason));
        }
    }

    private void Cancel() => SeasonDialog?.Cancel();
}
