<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">Modify season</MudText>
    </TitleContent>
    <DialogContent>
        <MudPaper Elevation="50" MinWidth="800px" Class="d-flex flex-row flex-nowrap">
            <MudPaper Elevation="25" Class="pa-4 mud-height-full">
                <MudStack Spacing="6">
                    <div>
                        <MudText Typo="Typo.subtitle1">Information</MudText>
                        <MudDivider />
                        <MudNumericField T="int" @bind-Value="Model.Year" Label="Year" Class="field-sm" />
                    </div>
                    <div>
                        <MudText Typo="Typo.subtitle1">Session setup</MudText>
                        <MudDivider />

                        <MudText Typo="Typo.body2">Qualifying format</MudText>

                        @if (hasMultipleClasses)
                        {
                            <MudAlert Severity="Severity.Info" Class="py-1">Format is limited to one session due to multiple classes existing.</MudAlert>
                        }
                        else
                        {
                            <MudChipSet Mandatory="true" SelectedChipChanged="QualyFormatChanged" Class="py-1">
                                <MudChip Value="QualyFormat.TripleEliminate" Color="Color.Secondary" Default="@(Model.QualifyingFormat == QualyFormat.TripleEliminate)">
                                    Three session elimination
                                </MudChip>
                                <MudChip Value="QualyFormat.OneSession" Color="Color.Secondary" Default="@(Model.QualifyingFormat == QualyFormat.OneSession)">
                                    One session
                                </MudChip>
                            </MudChipSet>
                        }

                        <MudNumericField T="int" @bind-Value="Model.RunAmountSession" Label="Run count per session" Class="field-sm" />
                        <MudNumericField T="int" @bind-Value="Model.QualifyingRNG" Label="Qualifying MAX RNG" Class="field-sm" />

                        @if (Model.QualifyingFormat == QualyFormat.TripleEliminate)
                        {

                            <MudStack Row="true" Spacing="1">
                                <MudNumericField T="int" @bind-Value="Model.QualifyingAmountQ2" Label="Allowed drivers in Q2" Class="field-sm" />
                                <MudNumericField T="int" @bind-Value="Model.QualifyingAmountQ3" Label="Allowed drivers in Q3" Class="field-sm" />
                            </MudStack>
                        }
                    </div>
                    <div>
                        <MudText Typo="Typo.subtitle1">Race setup</MudText>
                        <MudDivider />

                        <MudStack Row="true" Spacing="1">
                            <MudNumericField T="int" @bind-Value="Model.RngMinimum" Label="Race MIN RNG" Class="field-sm" />
                            <MudNumericField T="int" @bind-Value="Model.RngMaximum" Label="Race MAX RNG" Class="field-sm" />
                        </MudStack>

                        <MudStack Row="true" Spacing="1">
                            <MudNumericField T="int" @bind-Value="Model.MistakeMinimum" Min="0" Label="Mistake MIN RNG" Class="field-sm" />
                            <MudNumericField T="int" @bind-Value="Model.MistakeMaximum" Min="@Model.MistakeMinimum" Label="Mistake MAX RNG" Class="field-sm" />
                            <MudNumericField T="int" @bind-Value="Model.MistakeRolls" Min="0" Label="Mistake rolls" Class="field-sm" />
                        </MudStack>

                        <MudStack Row="true" Spacing="1">
                            <MudNumericField T="int" @bind-Value="Model.PitMinimum" Min="0" Label="Pit MIN RNG" Class="field-sm" />
                            <MudNumericField T="int" @bind-Value="Model.PitMaximum" Min="@Model.PitMinimum" Label="Pit MAX RNG" Class="field-sm" />
                            <MudNumericField T="int" @bind-Value="Model.PitCostSubtractCaution" Min="0" Label="Subtracted during SC" Class="field-sm" />
                        </MudStack>

                        <MudNumericField T="int" @bind-Value="Model.MaximumDriversInRace" Label="MAX drivers in race" Class="field-sm" />
                        <MudNumericField T="int" @bind-Value="Model.GridBonus" Label="Bonus per grid POS" Class="field-sm" />
                    </div>
                    <div>
                        <MudText Typo="Typo.subtitle1">Bonus points</MudText>
                        <MudDivider />

                        <MudStack Row="true" Spacing="1">
                            <MudNumericField T="int" @bind-Value="Model.PointsPole" Label="Pole position" Class="field-sm" />
                            <MudNumericField T="int" @bind-Value="Model.PointsFastestLap" Label="Fastest lap" Class="field-sm" />
                        </MudStack>
                    </div>

                    @if (Model.Id == 0)
                    {
                        <div>
                            <MudText Typo="Typo.subtitle1">Select a league for this season</MudText>
                            <MudDivider />

                            <MudSelect T="long" @bind-Value="Model.LeagueId" Label="League">
                                @foreach (var select in Leagues)
                                {
                                    <MudSelectItem Value="select.Id">@select.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </div>
                    }
                </MudStack>
            </MudPaper>
            <MudPaper Elevation="25" Class="pa-4 mud-height-full">
                <MudStack>
                    <MudPaper>
                        <MudText Typo="Typo.subtitle1">Achieved points per position</MudText>
                        <MudDivider />

                        <MudTable Items="@Model.PointAllotments.OrderBy(e => e.Position)" Dense="true" ReadOnly="false" Class="extra-dense"
                                  RowEditPreview="BackupAllotment" RowEditCancel="ResetAllotment" ApplyButtonPosition="TableApplyButtonPosition.End"
                                  EditButtonPosition="TableEditButtonPosition.End" EditTrigger="TableEditTrigger.RowClick">
                            <ToolBarContent>
                                <MudStack Row="true" Class="pa-0 mud-width-full">
                                    <MudSpacer />
                                    <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Tertiary" OnClick="AppendAllotment" Size="Size.Small">
                                        Add scoring position
                                    </MudButton>
                                </MudStack>
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh>POS</MudTh>
                                <MudTh>PTS</MudTh>
                                <MudTh></MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Position">
                                    <MudNumericField @bind-Value="@context.Position" Class="field-xs dense-field" Required />
                                 </MudTd>
                                 <MudTd DataLabel="Points">
                                     <MudNumericField @bind-Value="@context.Points" Class="field-xs dense-field" Required />
                                 </MudTd>
                                 <MudTd>
                                     <MudIconButton Size="@Size.Small"
                                                    Icon="@Icons.Material.Outlined.Delete"
                                                    Color="Color.Error"
                                                    Class="pa-0"
                                                    OnClick="@(() => RemoveAllotment(context))" />
                                 </MudTd>
                             </RowTemplate>
                         </MudTable>
                    </MudPaper>
                    <MudPaper>
                        <MudText Typo="Typo.subtitle1">Race classes</MudText>
                        <MudDivider />

                        @if (Model.Id == 0)
                        {
                            <MudSwitchM3 @bind-Checked="hasMultipleClasses"
                                         ThumbIcon="@Icons.Material.Filled.Done"
                                         ThumbOffIcon="@Icons.Material.Filled.Close"
                                         Label="Use race classes"
                                         Color="Color.Secondary"
                                         Class="my-2" />
                        }

                        @if (hasMultipleClasses)
                        {
                            <MudAlert Dense="true" Class="my-1">Be wary with changing the tag of a class, this is used to auto-assign teams from previous seasons.</MudAlert>

                            <MudTable Items="@Model.RaceClasses" Dense="true" Class="extra-dense">
                                <ToolBarContent>
                                    <MudStack Row="true" Class="pa-0 mud-width-full">
                                        @if (Model.Id == 0)
                                        {
                                            <MudSpacer />
                                            <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Outlined"
                                                       Color="Color.Tertiary" OnClick="AddClass" Size="Size.Small">
                                                Add race class
                                            </MudButton>
                                        }
                                    </MudStack>
                                </ToolBarContent>
                                <HeaderContent>
                                    <MudTh>Name</MudTh>
                                    <MudTh>Colour</MudTh>
                                    <MudTh>Tag</MudTh>
                                    <MudTh></MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd>
                                        <MudTextField T="string" @bind-Value="@context.Name" Class="field-sm dense-field" />
                                    </MudTd>
                                    <MudTd>
                                        <MudColorPicker @bind-Text="context.Colour" Placeholder="Colour" Class="field-xs dense-field" />
                                    </MudTd>
                                    <MudTd>
                                        <MudTextField T="string" @bind-Value="@context.Tag" Class="field-sm dense-field" />
                                    </MudTd>
                                    <MudTd>
                                        @if (Model.Id == 0)
                                        {
                                            <MudIconButton Icon="@Icons.Material.Outlined.Delete"
                                                           Color="Color.Error"
                                                           Size="Size.Small"
                                                           OnClick="@(() => RemoveClass(context))" />
                                        }
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>

                            <MudStack>
                                @foreach (var raceClass in Model.RaceClasses)
                                {
                                    <SupplierDisplay Colour="@raceClass.Colour">
                                        <MudText>@raceClass.Tag</MudText>
                                    </SupplierDisplay>
                                }
                            </MudStack>
                        }
                    </MudPaper>
                </MudStack>
            </MudPaper>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? SeasonDialog { get; set; }
    [Parameter] public EditSeasonModel Model { get; set; }
    [Parameter] public IEnumerable<League> Leagues { get; set; } = Enumerable.Empty<League>();

    private EditPointAllotmentModel allotmentBackup;

    private int lowestPosition;
    private bool hasMultipleClasses;

    protected override void OnInitialized()
    {
        if (Model.PointAllotments.Any())
            lowestPosition = Model.PointAllotments.Max(e => e.Position);

        hasMultipleClasses = Model.RaceClasses.Any();
    }

    private void QualyFormatChanged(MudChip? qualyChip)
    {
        if (qualyChip == null)
            return;

        Model.QualifyingFormat = (QualyFormat)qualyChip.Value;
    }

    private void BackupAllotment(object allotmentObj)
    {
        var allotment = ((EditPointAllotmentModel)allotmentObj);

        allotmentBackup = new()
            {
                Id = ((EditPointAllotmentModel)allotment).Id,
                Position = ((EditPointAllotmentModel)allotment).Position,
                Points = ((EditPointAllotmentModel)allotment).Points
            };
    }

    private void ResetAllotment(object allotmentObj)
    {
        var allotment = ((EditPointAllotmentModel)allotmentObj);

        ((EditPointAllotmentModel)allotment).Id = allotmentBackup.Id;
        ((EditPointAllotmentModel)allotment).Position = allotmentBackup.Position;
        ((EditPointAllotmentModel)allotment).Points = allotmentBackup.Points;
    }

    private void AppendAllotment()
    {
        Model.PointAllotments.Add(new EditPointAllotmentModel
            {
                Position = ++lowestPosition,
                Points = 0
            });
    }

    private void RemoveAllotment(EditPointAllotmentModel allotment)
    {
        --lowestPosition;
        Model.PointAllotments.Remove(allotment);
    }

    private void AddClass() => Model.RaceClasses.Add(new EditRaceClassModel());

    private void RemoveClass(EditRaceClassModel model) => Model.RaceClasses.Remove(model);

    private void Submit()
    {
        if (hasMultipleClasses)
        {
            Model.QualifyingFormat = QualyFormat.OneSession;
        }
        else
        {
            if (Model.Id == 0)
                Model.RaceClasses = new List<EditRaceClassModel>();
        }

        if (Model.IsDirty)
        {
            var modSeason = Model.Record;
            SeasonDialog?.Close(DialogResult.Ok(modSeason));
        }
    }

    private void Cancel() => SeasonDialog?.Cancel();
}
