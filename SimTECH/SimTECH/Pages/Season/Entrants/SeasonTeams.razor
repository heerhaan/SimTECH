@inject ManufacturerService ManufacturerService
@inject SeasonEntrantService EntrantService
@inject TeamService TeamService
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudPaper MinHeight="60px">
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4">
            <MudText Typo="Typo.h3">Teams</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Outlined.Add" OnClick="EnterTeam">New</MudButton>
        </MudStack>
    </MudPaper>
    <MudDataGrid T="SeasonTeam" Items="@SeasonTeamEntrants">
        <Columns>
            <TemplateColumn Sortable="false" Class="accent-cell">
                <CellTemplate>
                    <span class="smol-accent" style="@(ViewHelper.SetBackgroundColour(context.Item?.Colour ?? Constants.DefaultColour))"></span>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="e => e!.Name" />
            <TemplateColumn T="SeasonTeam" SortBy="e => e.Team.Country" Title="Country">
                <CellTemplate>
                    <CountryNamedFlag Code="@context.Item.Team.Country" Size="FlagSize.Small" Reverse="true" />
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="e => e!.Principal" />
            <PropertyColumn Property="e => e!.BaseValue" CellClass="font-caption" />
            <TemplateColumn T="SeasonTeam" Title="A/C/P" Sortable="false">
                <CellTemplate>
                    <MudText Typo="Typo.caption">@context.Item.Aero / @context.Item.Chassis / @context.Item.Powertrain</MudText>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="e => e!.Reliability" CellClass="font-caption" />
            <TemplateColumn T="SeasonTeam" SortBy="e => e.SeasonEngine.Name" Title="Engine">
                <CellTemplate>
                    <MudText>
                        @(SeasonEngineData.Find(e => e.Id == context.Item.SeasonEngineId)?.Name ?? "WTF WHERE ENGINE?")
                    </MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="SeasonTeam" SortBy="e => e.Manufacturer.Name" Title="Manufacturer">
                <CellTemplate>
                    <MudText>
                        @(ManufacturerData.Find(e => e.Id == context.Item.ManufacturerId)?.Name ?? "WTF WHERE TYRE?")
                    </MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="SeasonTeam" Sortable="false">
                <CellTemplate>
                    <MudButtonGroup>
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateTeam(context.Item))" />
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudContainer>

@code {
    [CascadingParameter] public Season Season { get; set; }

    private List<SeasonTeam> SeasonTeamEntrants { get; set; }
    private List<Team> TeamData { get; set; }
    private List<SeasonEngine> SeasonEngineData { get; set; }
    private List<Manufacturer> ManufacturerData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SeasonTeamEntrants = await EntrantService.GetSeasonTeams(Season.Id);
        TeamData = await TeamService.GetTeams();
        SeasonEngineData = await EntrantService.GetSeasonEngines(Season.Id);
        ManufacturerData = await ManufacturerService.GetManufacturers();
    }

    async Task EnterTeam() => await UpdateTeam(new SeasonTeam());
    async Task UpdateTeam(SeasonTeam item)
    {
        var parameters = new DialogParameters
            {
                ["SeasonId"] = Season.Id,
                ["Teams"] = TeamData,
                ["Manufacturers"] = ManufacturerData,
                ["SeasonEngines"] = SeasonEngineData,
                ["SeasonTeam"] = item,
            };

        var dialog = await DialogService.ShowAsync<SeasonTeamEditor>("Modify in-season team", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is SeasonTeam updatedTeam)
        {
            await EntrantService.UpdateSeasonTeam(updatedTeam);
            SeasonTeamEntrants = await EntrantService.GetSeasonTeams(Season.Id);
        }
    }
}
