<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="px-0">
    <MudPaper MinHeight="60px">
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4">
            <MudText Typo="Typo.h3">Drivers</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Outlined" Color="Color.Success" StartIcon="@Icons.Material.Outlined.Add" OnClick="AddItem">New</MudButton>
        </MudStack>
    </MudPaper>
    <MudDataGrid T="SeasonDriverListing" Items="@DriverList" Dense="true" Loading="@loading">
        <Columns>
            <TemplateColumn T="SeasonDriverListing" Sortable="false" Class="accent-cell">
                <CellTemplate>
                    <SmolAccent Colour="@context.Item.Colour" />
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="SeasonDriverListing" Title="Name" SortBy="e => e.Name">
                <CellTemplate>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText Class="overflow-hider">@context.Item.Name</MudText>
                        <MudSpacer />
                        <CountryFlag Code="@context.Item.Country" Size="ElementSize.Small" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="e => e!.Age" CellClass="font-caption" />
            <TemplateColumn T="SeasonDriverListing" SortBy="e => e.Number" Title="NO" HeaderClass="number-col hide-sort-icons" CellClass="number-col">
                <CellTemplate>
                    <NumberDisplay Colour="@context.Item.Colour" Accent="@context.Item.Accent">@context.Item.Number</NumberDisplay>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="e => e!.Skill" CellClass="font-caption" />
            <PropertyColumn Property="e => e!.Reliability" Title="REL" CellClass="font-caption" />
            <PropertyColumn Property="e => e!.Attack" Title="Attack" CellClass="font-caption" />
            <PropertyColumn Property="e => e!.Defense" Title="Defense" CellClass="font-caption" />
            <PropertyColumn Property="e => e!.Role" Title="Role" />
            <PropertyColumn Property="e => e.Team"></PropertyColumn>
            <TemplateColumn T="SeasonDriverListing" Sortable="false">
                <CellTemplate>
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateItem(context.Item.SeasonDriver))" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudContainer>

@code {
    [CascadingParameter] public Season Season { get; set; }
    [Parameter] public IEnumerable<SeasonDriver> DriverEntrants { get; set; } = Enumerable.Empty<SeasonDriver>();
    [Parameter] public IEnumerable<SeasonTeam> SeasonTeams { get; set; } = Enumerable.Empty<SeasonTeam>();
    [Parameter] public EventCallback<SeasonDriver?> OnEditorOpen { get; set; }

    private List<SeasonDriverListing> DriverList { get; set; } = new();

    bool loading = true;

    // Warning: this is also triggered when just pressing the button to start editing
    protected override void OnParametersSet()
    {
        loading = true;

        DriverList.Clear();

        foreach (var driver in DriverEntrants)
        {
            var team = SeasonTeams.FirstOrDefault(e => e.Id == driver.SeasonTeamId);

            var listing = new SeasonDriverListing
            {
                Name = driver.Driver.FullName,
                Age = driver.GimmeAge(Season.Year),
                Number = driver.Number,
                Country = driver.Driver.Country,
                Role = driver.TeamRole,
                Skill = driver.Skill,
                Reliability = driver.Reliability,
                Attack = driver.Attack,
                Defense = driver.Defense,
                Team = team?.Team?.Name ?? "DROPPED",
                Colour = team?.Colour ?? Constants.DefaultColour,
                Accent = team?.Accent ?? Constants.DefaultAccent,

                SeasonDriver = driver
            };

            DriverList.Add(listing);
        }

        loading = false;
    }

    async Task AddItem() => await UpdateItem(null);
    async Task UpdateItem(SeasonDriver? item)
    {
        await OnEditorOpen.InvokeAsync(item);
    }

    internal class SeasonDriverListing
    {
        public string Name { get; set; } = string.Empty;
        public int Age { get; set; }
        public int Number { get; set; }
        public Country Country { get; set; }
        public TeamRole Role { get; set; }
        public int Skill { get; set; }
        public int Reliability { get; set; }
        public int Attack { get; set; }
        public int Defense { get; set; }
        public string Team { get; set; } = string.Empty;
        public string Colour { get; set; } = string.Empty;
        public string Accent { get; set; } = string.Empty;

        public SeasonDriver SeasonDriver { get; set; }
    }
}
