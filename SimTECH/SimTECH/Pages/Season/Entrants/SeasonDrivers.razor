@inject DriverService DriverService
@inject SeasonEntrantService EntrantService
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="px-0">
    <MudPaper MinHeight="60px">
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4">
            <MudText Typo="Typo.h3">Drivers</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Outlined" Color="Color.Success" StartIcon="@Icons.Material.Outlined.Add" OnClick="EnterDriver">New</MudButton>
        </MudStack>
    </MudPaper>
    <MudDataGrid T="SeasonDriver" Items="@DriverEntrants" Dense="true" Loading="@_loading">
        <Columns>
            <TemplateColumn T="SeasonDriver" Sortable="false" Class="accent-cell">
                <CellTemplate>
                    <SmolAccent Colour="@context.Item.SeasonTeam?.Colour" />
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="SeasonDriver" Title="Name" SortBy="e => e.Driver.FirstName">
                <CellTemplate>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText>@context.Item.Driver.FullName</MudText>
                        <MudSpacer />
                        <CountryFlag Code="@context.Item.Driver.Country" Size="ElementSize.Small" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="SeasonDriver" SortBy="e => e.Number" Title="NO" HeaderClass="number-col hide-sort-icons" CellClass="number-col">
                <CellTemplate>
                    <NumberDisplay Colour="@context.Item.SeasonTeam?.Colour" Accent="@context.Item.SeasonTeam?.Accent">@context.Item.Number</NumberDisplay>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="SeasonDriver" Title="Age" Sortable="false" CellClass="font-caption">
                <CellTemplate>
                    @(context.Item.GimmeAge(Season.Year))
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="e => e!.Skill" CellClass="font-caption" />
            <PropertyColumn Property="e => e!.Reliability" Title="Rel." CellClass="font-caption" />
            <PropertyColumn Property="e => e!.Attack" Title="Attack" CellClass="font-caption" />
            <PropertyColumn Property="e => e!.Defense" Title="Defense" CellClass="font-caption" />
            <PropertyColumn Property="e => e!.TeamRole" Title="Role" />
            <TemplateColumn T="SeasonDriver" Title="Team" SortBy="e => e.SeasonTeam?.Name">
                <CellTemplate>
                    <MudText Typo="Typo.body2">@(context.Item.SeasonTeam?.Name ?? "Dropped")</MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="SeasonDriver" Sortable="false">
                <CellTemplate>
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateDriver(context.Item))" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudContainer>

@code {
    [CascadingParameter] public Season Season { get; set; }

    List<SeasonDriver> DriverEntrants = new();
    List<SeasonTeam> TeamEntrants = new();

    bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        DriverEntrants = await EntrantService.GetSeasonDrivers(Season.Id);
        TeamEntrants = await EntrantService.GetSeasonTeams(Season.Id);

        foreach (var sdriver in DriverEntrants)
            sdriver.SeasonTeam = TeamEntrants.FirstOrDefault(e => e.Id == sdriver.SeasonTeamId);

        _loading = false;
    }

    async Task EnterDriver() => await UpdateDriver(null);
    async Task UpdateDriver(SeasonDriver? item)
    {
        var parameters = new DialogParameters
            {
                ["SeasonId"] = Season.Id,
                ["SeasonTeams"] = TeamEntrants,
                ["SeasonDriver"] = item,
            };

        var dialog = await DialogService.ShowAsync<SeasonDriverEditor>("Modify in-season driver", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is SeasonDriver updatedDriver)
        {
            _loading = true;

            await EntrantService.UpdateSeasonDriver(updatedDriver);

            DriverEntrants = await EntrantService.GetSeasonDrivers(Season.Id);
            foreach (var sdriver in DriverEntrants)
                sdriver.SeasonTeam = TeamEntrants.FirstOrDefault(e => e.Id == sdriver.SeasonTeamId);

            _loading = false;
        }
    }
}
