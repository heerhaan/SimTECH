@page "/overview/{SeasonId:long}"
@page "/overview/{SeasonId:long}/{TabIndex:int}"
@inject ContractService _contractService
@inject LeagueService _leagueService
@inject RaceService _raceService
@inject SeasonService _seasonService
@inject SeasonEntrantService _entrantService
@inject BreadcrumbProvider _bread
@inject NavigationManager _nav
@inject IDialogService _dialogService
@inject ISnackbar _snackbar
@using SimTECH.Pages.Season.Entrants;
@using SimTECH.Pages.Season.Stats;
@using SimTECH.Pages.Season.ScoreStandings

<PageTitle>Overview</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    @if (!loading)
    {
        <CascadingValue Value="@Season" IsFixed="true">
            <MudTabs Outlined="true" Centered="true" @bind-ActivePanelIndex="@activeTabIndex">
                <MudTabPanel Text="Overview">
                    <Landing NextRace="@NextRace"
                             OnStartSeason="StartSeason"
                             OnFinishSeason="FinishSeason"
                             OnShowQualyBattles="ShowQualyBattles"
                             OnNextRace="GoToNextRace"
                             OnNavigate="GoToCommon" />
                </MudTabPanel>
                <MudTabPanel Text="Calendar" OnClick="OnOpenCalendar">
                    @if (calendarLoaded)
                    {
                        <Calendar />
                    }
                </MudTabPanel>
                <MudTabPanel Text="Standings">
                    <Standings />
                </MudTabPanel>
                <MudTabPanel Text="Entrants" OnClick="OnOpenDrivers">
                    <MudTabs Outlined="true" Centered="true">
                        <MudTabPanel Text="Drivers" OnClick="OnOpenDrivers">
                            @if (driversLoaded)
                            {
                                <SeasonDrivers
                                    DriverEntrants="@SeasonDrivers"
                                    TeamEntrants="@SeasonTeams"
                                    OnEditorOpen="UpdateDriver" />
                            }
                        </MudTabPanel>
                        <MudTabPanel Text="Teams">
                            <SeasonTeams />
                        </MudTabPanel>
                        <MudTabPanel Text="Engines">
                            <SeasonEngines />
                        </MudTabPanel>
                        <MudTabPanel Text="Power rankings">
                            <PowerRankings />
                        </MudTabPanel>
                    </MudTabs>
                </MudTabPanel>
                @if (Season.State != State.Closed)
                {
                    <MudTabPanel Text="Development">
                        <DevelopmentEntrants />
                    </MudTabPanel>
                }
                <MudTabPanel Text="Settings">
                    <Settings OnEditorOpen="UpdateSeason" />
                </MudTabPanel>
            </MudTabs>
        </CascadingValue>
    }
</MudContainer>

@code {
    [Parameter] public long SeasonId { get; set; }
    [Parameter] public int TabIndex { get; set; }

    public Season Season { get; set; }

    public IEnumerable<SeasonEngine> SeasonEngines { get; set; } = Enumerable.Empty<SeasonEngine>();
    public IEnumerable<SeasonTeam> SeasonTeams { get; set; } = Enumerable.Empty<SeasonTeam>();
    public IEnumerable<SeasonDriver> SeasonDrivers { get; set; } = Enumerable.Empty<SeasonDriver>();
    public IEnumerable<Race> Races { get; set; } = Enumerable.Empty<Race>();
    public IEnumerable<League> Leagues { get; set; } = Enumerable.Empty<League>();

    public Race? NextRace { get; set; }

    int activeTabIndex = 0;

    bool loading = true;
    bool calendarLoaded = false;
    private bool driversLoaded = false;
    private bool teamsLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        activeTabIndex = TabIndex;

        Season = await _seasonService.GetSeasonById(SeasonId);
        NextRace = await _raceService.GetNextRaceOfSeason(SeasonId);

        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Seasons", href: "seasons"),
            new BreadcrumbItem("Overview", href: $"overview/{SeasonId}", disabled: true),
        });

        loading = false;
    }

    private async Task OnOpenCalendar()
    {
        if (calendarLoaded)
            return;

        await Task.Delay(5000);
        calendarLoaded = true;
    }

    private async Task OnOpenDrivers()
    {
        if (driversLoaded)
            return;

        SeasonDrivers = await _entrantService.GetSeasonDrivers(SeasonId);
        SeasonTeams = await _entrantService.GetSeasonTeams(SeasonId);

        driversLoaded = true;
    }

    async Task StartSeason()
    {
        if (Season != null)
        {
            var error = await _seasonService.ActivateSeason(SeasonId);

            if (error == null)
            {
                // Subtract the contract durations with 1 (if it is valid)
                await _contractService.SubtractDurations(Season.LeagueId, SeasonId);

                Season.State = State.Active; // NOTE: It always changes to active if started
                NextRace = await _raceService.GetNextRaceOfSeason(SeasonId);
                _snackbar.Add($"Season {Season.Year} has been activated!", Severity.Success);
            }
            else
            {
                _snackbar.Add(error, Severity.Error);
            }
        }
    }

    async Task FinishSeason()
    {
        bool? confirm = await _dialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to finish this season, this action cannot be undone!",
            yesText: "Yep", cancelText: "Nope");

        if (confirm == true)
        {
            await _seasonService.FinishSeason(SeasonId);
            _nav.NavigateTo("/seasons");
        }
    }

    async Task UpdateSeason()
    {
        var editModel = new EditSeasonModel(Season);

        if (Leagues == null)
            Leagues = await _leagueService.GetLeagues();

        var parameters = new DialogParameters { ["Model"] = editModel, ["Leagues"] = Leagues };

        var dialog = await _dialogService.ShowAsync<SeasonEditor>("Modify season", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Season updatedItem)
        {
            await _seasonService.UpdateSeason(updatedItem);
            Season = updatedItem;
        }
    }

    async Task GoToNextRace()
    {
        if (NextRace is null)
        {
            _snackbar.Add("can't find the next race, you sure it exists lad?");
            return;
        }

        if (NextRace.State == State.Concept)
            await _raceService.ActivateRace(NextRace.Id);

        _nav.NavigateTo($"/raceweek/{NextRace.Id}");
    }

    async Task UpdateDriver(SeasonDriver? item)
    {
        var parameters = new DialogParameters
            {
                ["SeasonId"] = Season.Id,
                ["SeasonTeams"] = SeasonTeams,
                ["SeasonDriver"] = item,
            };

        var dialog = await _dialogService.ShowAsync<SeasonDriverEditor>("Modify in-season driver", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is SeasonDriver updatedDriver)
        {
            await _entrantService.UpdateSeasonDriver(updatedDriver);
            SeasonDrivers = await _entrantService.GetSeasonDrivers(SeasonId);
        }
    }

    async Task ShowQualyBattles() => 
        _ = await _dialogService.ShowAsync<QualyBattles>("QualifyingBattles", new DialogParameters { ["SeasonId"] = SeasonId });

    void GoToCommon(string url) => _nav.NavigateTo(url);
}
