@page "/overview/{SeasonId:long}"
@page "/overview/{SeasonId:long}/{TabIndex:int}"
@using SimTECH.Pages.Season.Entrants;
@using SimTECH.Pages.Season.Stats;
@using SimTECH.Pages.Season.ScoreStandings
@inject LeagueService _leagueService
@inject RaceService _raceService
@inject SeasonService _seasonService
@inject SeasonEntrantService _entrantService
@inject BreadcrumbProvider _bread
@inject NavigationManager _nav
@inject IDialogService _dialogService
@inject ISnackbar _snackbar

<PageTitle>Overview</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
    @if (Season != null)
    {
        <CascadingValue Value="@Season" IsFixed="true">
            <MudTabs Outlined="true" Centered="true" @bind-ActivePanelIndex="@_activeTabIndex">
                <MudTabPanel Text="Overview">
                    <MudGrid Spacing="4">
                        <MudItem xs="12">
                            <MudPaper Class="pa-4">
                                <MudText Typo="Typo.h3">Season @Season.Year</MudText>
                                <MudStack Row="true">
                                    <MudText>Currenly in status: @Season.State.ToString()</MudText>
                                    <MudSpacer />
                                    <MudText>Hello from the other side</MudText>
                                </MudStack>
                            </MudPaper>
                        </MudItem>

                        <MudItem xs="6">
                            <MudPaper Height="200px" Elevation="15" Class="pa-4">
                                <MudText Typo="Typo.h5">Upcoming race</MudText>
                                @if (Season.State == State.Active)
                                {
                                    @if (NextRace is null)
                                    {
                                        <MudText>no upcoming race for this season detected</MudText>
                                    }
                                    else
                                    {
                                        <MudText>Round @NextRace.Round - @NextRace.Name</MudText>
                                        <CountryNamedFlag Code="@NextRace.Track.Country" Justify="Justify.FlexStart" Size="FlagSize.Normal" />

                                        <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" Size="Size.Small" Class="mt-auto" OnClick="GoToNextRace">Go</MudButton>
                                    }
                                }
                                else
                                {
                                    <MudText>Think for a second, if there is a next race then the season is active. This season isn't so there is no next race, bellend.</MudText>
                                }
                            </MudPaper>
                        </MudItem>

                        <MudItem xs="6">
                            <MudPaper Height="200px" Elevation="15" Class="pa-4">
                                <MudText Typo="Typo.h5">Controls</MudText>
                                @if (Season.State == State.Concept)
                                {
                                    <MudButtonGroup Variant="Variant.Outlined" Color="Color.Tertiary">
                                        <MudButton OnClick="StartSeason">Start season</MudButton>
                                        <MudButton OnClick="GoToAddEntrants">Add participants</MudButton>
                                    </MudButtonGroup>
                                }
                                else if (Season.State == State.Active)
                                {
                                    <MudButton Variant="Variant.Outlined" OnClick="FinishSeason">Finish season</MudButton>
                                }
                            </MudPaper>
                        </MudItem>

                        <MudItem xs="6">
                            <MudPaper Height="200px" Elevation="15" Class="pa-4">
                                <MudText Typo="Typo.h5">Season statistics</MudText>
                                <MudButtonGroup Variant="Variant.Outlined" Color="Color.Tertiary" Size="Size.Small">
                                    <MudButton OnClick="ShowQualyBattles">Qualifying battles</MudButton>
                                </MudButtonGroup>
                            </MudPaper>
                        </MudItem>

                        <MudItem xs="6">
                            <MudPaper Height="200px" Elevation="15" Class="pa-4">
                                <MudStack>
                                    <MudText Typo="Typo.h5">Components</MudText>
                                    <MudText>
                                        Redirect to page with overview of the used components and any upcoming penalty's for this season
                                    </MudText>
                                    <MudSpacer />
                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="GoToComponentUsage">Go to</MudButton>
                                </MudStack>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
                <MudTabPanel Text="Calendar">
                    <Calendar />
                </MudTabPanel>
                <MudTabPanel Text="Standings">
                    <Standings />
                </MudTabPanel>
                <MudTabPanel Text="Entrants">
                    <MudTabs Outlined="true" Centered="true">
                        <MudTabPanel Text="Drivers">
                            <SeasonDrivers />
                        </MudTabPanel>
                        <MudTabPanel Text="Teams">
                            <SeasonTeams />
                        </MudTabPanel>
                        <MudTabPanel Text="Engines">
                            <SeasonEngines />
                        </MudTabPanel>
                        <MudTabPanel Text="Power rankings">
                            <PowerRankings />
                        </MudTabPanel>
                    </MudTabs>
                </MudTabPanel>
                @if (Season.State != State.Closed)
                {
                    <MudTabPanel Text="Development">
                        <DevelopmentEntrants />
                    </MudTabPanel>
                }
                <MudTabPanel Text="Settings">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudPaper Elevation="15" Class="pa-4">
                                <MudStack Row="true">
                                    <MudText Typo="Typo.h3">Settings</MudText>
                                    <MudSpacer />
                                    <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" StartIcon="@Icons.Material.Outlined.Edit" OnClick="UpdateSeason">Edit</MudButton>
                                </MudStack>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="4">
                            <MudPaper Elevation="15" Class="pa-4 mud-height-full">
                                <MudText Typo="Typo.h6">Settings 1</MudText>
                                <MudTextField @bind-Value="Season.Year" Label="Year" ReadOnly="true"></MudTextField>
                                <MudTextField @bind-Value="Season.MaximumDriversInRace" Label="MaximumDriversInRace" ReadOnly="true"></MudTextField>
                                <MudText>@(Season.QualifyingFormat)</MudText>
                                <MudTextField @bind-Value="Season.QualifyingAmountQ2" Label="QualifyingAmountQ2" ReadOnly="true"></MudTextField>
                                <MudTextField @bind-Value="Season.QualifyingAmountQ3" Label="QualifyingAmountQ3" ReadOnly="true"></MudTextField>
                                <MudTextField @bind-Value="Season.QualifyingRNG" Label="QualifyingRNG" ReadOnly="true"></MudTextField>
                                <MudTextField @bind-Value="Season.RunAmountSession" Label="RunAmountSession" ReadOnly="true"></MudTextField>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="4">
                            <MudPaper Elevation="15" Class="pa-4 mud-height-full">
                                <MudText Typo="Typo.h6">Settings 2</MudText>
                                <MudTextField @bind-Value="Season.GridBonus" Label="GridBonus" ReadOnly="true"></MudTextField>
                                <MudTextField @bind-Value="Season.RngMinimum" Label="RngMinimum" ReadOnly="true"></MudTextField>
                                <MudTextField @bind-Value="Season.RngMaximum" Label="RngMaximum" ReadOnly="true"></MudTextField>
                                <MudTextField @bind-Value="Season.PitMinimum" Label="PitMinimum" ReadOnly="true"></MudTextField>
                                <MudTextField @bind-Value="Season.PitMaximum" Label="PitMaximum" ReadOnly="true"></MudTextField>
                                <MudTextField @bind-Value="Season.PointsPole" Label="PointsPole" ReadOnly="true"></MudTextField>
                                <MudTextField @bind-Value="Season.PointsFastestLap" Label="PointsFastestLap" ReadOnly="true"></MudTextField>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="4">
                            <MudPaper Elevation="15" Class="pa-4 mud-height-full">
                                <MudText Typo="Typo.h6">Points per position</MudText>
                                @if (Season.PointAllotments != null)
                                {
                                    <MudSimpleTable Dense="true">
                                        <thead>
                                            <tr>
                                                <th>#</th>
                                                <th>Points</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var allotment in Season.PointAllotments)
                                            {
                                                <tr>
                                                    <td class="font-caption">@allotment.Position</td>
                                                    <td class="font-caption">@allotment.Points</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </MudSimpleTable>
                                }
                                else
                                {
                                    <MudAlert Variant="Variant.Outlined" Severity="Severity.Error">Where are the friggin point allotments then?</MudAlert>
                                }
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
            </MudTabs>
        </CascadingValue>
    }
</MudContainer>

@code {
    [Parameter]
    public long SeasonId { get; set; }
    [Parameter]
    public int TabIndex { get; set; }

    public Season? Season { get; set; }
    public Race? NextRace { get; set; }

    int _activeTabIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        _activeTabIndex = TabIndex;
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Seasons", href: "seasons"),
            new BreadcrumbItem("Overview", href: $"overview/{SeasonId}", disabled: true),
        });

        Season = await _seasonService.GetSeasonById(SeasonId);

        if (Season != null)
            NextRace = await _raceService.GetNextRaceOfSeason(SeasonId);
    }

    async Task StartSeason()
    {
        if (Season != null)
        {
            var error = await _seasonService.ActivateSeason(Season.Id);

            if (error == null)
            {
                Season.State = State.Active; // NOTE: It always changes to active if started
                _snackbar.Add($"Season {Season.Year} has been activated!", Severity.Success);
            }
            else
            {
                _snackbar.Add(error, Severity.Error);
            }
        }
    }

    async Task UpdateSeason()
    {
        var editModel = new EditSeasonModel(Season);
        // unless I see a reason to retrieve this for a reason elsewhere on this page
        var leagues = await _leagueService.GetLeagues();

        var parameters = new DialogParameters { ["Model"] = editModel, ["Leagues"] = leagues };

        var dialog = await _dialogService.ShowAsync<SeasonEditor>("Modify season", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Season updatedItem)
        {
            await _seasonService.UpdateSeason(updatedItem);
            Season = updatedItem;
        }
    }

    async Task FinishSeason()
    {
        bool? confirm = await _dialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to finish this season, this action cannot be undone!",
            yesText: "Yep", cancelText: "Nope");

        if (confirm == true)
        {
            await _seasonService.FinishSeason(SeasonId);
            _nav.NavigateTo("/seasons");
        }
    }

    async Task GoToNextRace()
    {
        if (NextRace is null)
        {
            _snackbar.Add("can't find the next race, you sure it exists lad?");
            return;
        }

        if (NextRace.State == State.Concept)
            await _raceService.ActivateRace(NextRace.Id);

        _nav.NavigateTo($"/raceweek/{NextRace.Id}");
    }

    async Task ShowQualyBattles() => _ = await _dialogService.ShowAsync<QualyBattles>("QualifyingBattles", new DialogParameters { ["SeasonId"] = SeasonId });

    void GoToAddEntrants() => _nav.NavigateTo($"/entrantwizard/{SeasonId}");
    void GoToComponentUsage() => _nav.NavigateTo($"/components/{SeasonId}");
}
