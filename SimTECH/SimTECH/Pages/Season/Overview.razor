@page "/overview/{SeasonId:long}"
@page "/overview/{SeasonId:long}/{TabIndex:int}"

@inject ContractService _contractService
@inject ClimateService _climateService
@inject DriverService _driverService
@inject EngineService _engineService
@inject IncidentService _incidentService
@inject LeagueService _leagueService
@inject ManufacturerService _manufacturerService
@inject RaceService _raceService
@inject ResultService _resultService
@inject SeasonService _seasonService
@inject SeasonEntrantService _entrantService
@inject TeamService _teamService
@inject TrackService _trackService
@inject TraitService _traitService
@inject BreadcrumbProvider _bread
@inject NavigationManager _nav
@inject IDialogService _dialogService
@inject IOptions<SimConfig> _config
@inject ISnackbar _snackbar

@using SimTECH.Pages.Season.Development;
@using SimTECH.Pages.Season.Entrants;
@using SimTECH.Pages.Season.Stats;
@using SimTECH.Pages.Season.ScoreStandings

<PageTitle>Overview</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    @if (!loading)
    {
        <CascadingValue Value="@OverviewModel">
            <MudTabs Outlined="true" Centered="true" @bind-ActivePanelIndex="@activeTabIndex">
                <MudTabPanel Text="Overview">
                    <Landing NextRace="@NextRace"
                             OnStartSeason="StartSeason"
                             OnFinishSeason="FinishSeason"
                             OnShowComponentUsage="ShowUsedComponents"
                             OnShowQualyBattles="ShowQualyBattles"
                             OnNextRace="GoToNextRace"
                             OnClassSelected="SetActiveRaceClass"
                             OnNavigate="GoToCommon" />
                </MudTabPanel>
                <MudTabPanel Text="Calendar" OnClick="OnOpenCalendar">
                    @if (calendarLoaded)
                    {
                        <Calendar Races="@OverviewModel.Races"
                                  Results="@OverviewModel.Results"
                                  SeasonDrivers="@OverviewModel.ClassDrivers()"
                                  SeasonTeams="@OverviewModel.ClassTeams()"
                                  Climates="@Climates"
                                  OnAddRaces="AddRaces"
                                  OnEditorOpen="UpdateRace"
                                  OnDelete="DeleteRace"
                                  OnGoToRace="GoToRace" />
                    }
                </MudTabPanel>
                <MudTabPanel Text="Standings">
                    <Standings SeasonDrivers="@OverviewModel.ClassDrivers()"
                               SeasonTeams="@OverviewModel.ClassTeams()"
                               Races="@OverviewModel.Races"
                               Results="@OverviewModel.Results" />
                </MudTabPanel>
                <MudTabPanel Text="Entrants">
                    <MudTabs Outlined="true" Centered="true">
                        <MudTabPanel Text="Drivers">
                            <SeasonDrivers DriverEntrants="@OverviewModel.ClassDrivers()"
                                           SeasonTeams="@OverviewModel.ClassTeams()"
                                           OnEditorOpen="UpdateDriver" />
                        </MudTabPanel>
                        <MudTabPanel Text="Teams">
                            <SeasonTeams TeamEntrants="@OverviewModel.ClassTeams()"
                                         SeasonEngines="@OverviewModel.SeasonEngines"
                                         Manufacturers="@OverviewModel.Manufacturers"
                                         OnEditorOpen="UpdateTeam" />
                        </MudTabPanel>
                        <MudTabPanel Text="Engines">
                            <SeasonEngines EngineEntrants="@OverviewModel.SeasonEngines"
                                           OnEditorOpen="UpdateEngine" />
                        </MudTabPanel>
                        <MudTabPanel Text="Power rankings" OnClick="OnOpenPower">
                            @if (powerLoaded)
                            {
                                <PowerRankings SeasonDrivers="@OverviewModel.ClassDrivers()"
                                               SeasonTeams="@OverviewModel.ClassTeams()"
                                               SeasonEngines="@OverviewModel.SeasonEngines"
                                               Manufacturers="@OverviewModel.Manufacturers"
                                               Traits="@Traits"
                                               TeamRoleCarModifier="@config.CarDriverStatusModifier" />
                            }
                        </MudTabPanel>
                    </MudTabs>
                </MudTabPanel>
                <MudTabPanel Text="Settings">
                    <Settings OnEditorOpen="UpdateSeason" />
                </MudTabPanel>
            </MudTabs>
        </CascadingValue>
    }
</MudContainer>

@code {
    [Parameter] public long SeasonId { get; set; }
    [Parameter] public int TabIndex { get; set; }

    public OverviewModel OverviewModel { get; set; } = new();

    Race? NextRace { get; set; }
    List<League> Leagues { get; set; } = new();
    List<Climate> Climates { get; set; } = new();
    List<Trait> Traits { get; set; } = new();

    SimConfig config;

    int activeTabIndex = 0;
    bool loading = true;
    int nextRound;

    bool calendarLoaded = false;
    bool powerLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        activeTabIndex = TabIndex;

        OverviewModel.Season = await _seasonService.GetSeasonById(SeasonId);
        OverviewModel.Races = await _raceService.GetRacesBySeason(SeasonId);
        OverviewModel.SeasonEngines = await _entrantService.GetSeasonEngines(SeasonId);
        OverviewModel.SeasonTeams = await _entrantService.GetSeasonTeams(SeasonId);
        OverviewModel.SeasonDrivers = await _entrantService.GetSeasonDrivers(SeasonId);
        OverviewModel.Manufacturers = await _manufacturerService.GetManufacturers(StateFilter.All);
        OverviewModel.Results = await _resultService.GetResultsOfSeason(SeasonId);

        if (OverviewModel.Season.State == State.Active)
        {
            NextRace = OverviewModel.Races.FindNext();
            nextRound = NextRace?.Round ?? 0;
        }

        if (OverviewModel.Season.HasRaceClasses)
            OverviewModel.ActiveClassId = OverviewModel.Season.RaceClasses.First().Id;

        config = _config.Value;

        await PreloadTab();

        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Seasons", href: "seasons"),
            new BreadcrumbItem("Overview", href: $"overview/{SeasonId}", disabled: true),
        });

        loading = false;
    }

    private async Task PreloadTab()
    {
        // Used to have more options, but alas
        switch (activeTabIndex)
        {
            case 1:
                await OnOpenCalendar();
                break;
        }
    }

    private async Task OnOpenCalendar()
    {
        if (!Climates.Any())
            Climates = await _climateService.GetClimates(StateFilter.All);

        calendarLoaded = true;
    }

    private async Task OnOpenPower()
    {
        if (!Traits.Any())
            Traits = await _traitService.GetTraits(StateFilter.All);

        powerLoaded = true;
    }

    private async Task StartSeason()
    {
        if (OverviewModel.Season != null)
        {
            var error = await _seasonService.ActivateSeason(SeasonId);

            if (error == null)
            {
                // Subtract active and added contract durations with 1 (if it is valid)
                await _contractService.SubtractDurations(OverviewModel.Season.LeagueId, SeasonId);

                OverviewModel.Season.State = State.Active; // NOTE: It always changes to active if started
                NextRace = await _raceService.GetNextRaceOfSeason(SeasonId);

                _snackbar.Add($"Season {OverviewModel.Season.Year} has been activated!", Severity.Success);
                StateHasChanged();
            }
            else
            {
                _snackbar.Add(error, Severity.Error);
            }
        }
    }

    private async Task UpdateSeason()
    {
        var editModel = new EditSeasonModel(OverviewModel.Season);

        if (Leagues == null)
            Leagues = await _leagueService.GetLeagues();

        var parameters = new DialogParameters { ["Model"] = editModel, ["Leagues"] = Leagues };

        var dialog = await _dialogService.ShowAsync<SeasonEditor>("Modify season", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Season updatedItem)
        {
            await _seasonService.UpdateSeason(updatedItem);
            OverviewModel.Season = updatedItem;
        }
    }

    private async Task FinishSeason()
    {
        bool? confirm = await _dialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to finish this season, this action cannot be undone!",
            yesText: "Yep", cancelText: "Nope");

        if (confirm == true)
        {
            await _seasonService.FinishSeason(SeasonId);
            _nav.NavigateTo("/seasons");
        }
    }

    private void SetActiveRaceClass(long raceClassId)
    {
        // If this is it, then we could use a bind
        OverviewModel.ActiveClassId = raceClassId;
    }

    private async Task AddRaces()
    {
        if (!Leagues.Any())
            Leagues = await _leagueService.GetLeagues();
        if (!Climates.Any())
            Climates = await _climateService.GetClimates(StateFilter.All);

        var league = Leagues.First(e => e.Id == OverviewModel.Season.LeagueId);

        var usedTrackIds = OverviewModel.Races.Select(e => e.TrackId).ToArray();
        var availableTracks = (await _trackService.GetTracks())
            .Where(e => !usedTrackIds.Contains(e.Id))
            .ToList();

        if (!availableTracks.Any())
        {
            _snackbar.Add("there aren't any tracks left to add to this season, ya absolute willy", Severity.Error);
            return;
        }

        var parameters = new DialogParameters
            {
                ["Tracks"] = availableTracks,
                ["SeasonId"] = SeasonId,
                ["OffsetRound"] = 1 + OverviewModel.Races.Count(),
                ["DefaultRaceLength"] = league.RaceLength,
                ["Climates"] = Climates.Where(e => e.State == State.Active).ToList(),
            };

        var dialog = await _dialogService.ShowAsync<AddRaces>("Insert races", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is List<Race> addedRaces)
        {
            await _raceService.InsertRaces(addedRaces);
            OverviewModel.Races = await _raceService.GetRacesBySeason(SeasonId);
        }
    }

    private async Task UpdateRace(Race? item)
    {
        if (!Leagues.Any())
            Leagues = await _leagueService.GetLeagues();

        var currentLeague = Leagues.First(e => e.Id == OverviewModel.Season.LeagueId);

        var parameters = new DialogParameters
            {
                ["Race"] = item,
                ["SeasonId"] = SeasonId,
                ["Climates"] = Climates.Where(e => e.State == State.Active).ToList(),
            };

        var dialog = await _dialogService.ShowAsync<RaceEditor>("Modify Race", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Race updatedRace)
        {
            await _raceService.UpdateRace(updatedRace);
            OverviewModel.Races = await _raceService.GetRacesBySeason(SeasonId);
        }
    }

    private async Task DeleteRace(long raceId)
    {
        await _raceService.DeleteRace(raceId);
        OverviewModel.Races = await _raceService.GetRacesBySeason(SeasonId);
    }

    private async Task GoToNextRace() => await GoToRace(nextRound);

    private async Task GoToRace(int round)
    {
        var race = OverviewModel.Races.FirstOrDefault(e => e.Round == round);
        if (race == null)
        {
            _snackbar.Add("can't find the next race, you sure it exists lad?");
            return;
        }

        if (race.State == State.Concept)
        {
            if (race.Round != nextRound)
            {
                _snackbar.Add("oi oi oi, a previous round hasn't been finished (or even started!) yet. do that one first, cunt.", Severity.Error);
                return;
            }

            await _raceService.ActivateRace(race.Id);
        }

        _nav.NavigateTo($"/raceweek/{race.Id}");
    }

    private async Task UpdateDriver(SeasonDriver? item)
    {
        var drivers = await _driverService.GetAvailableDrivers();

        var parameters = new DialogParameters
            {
                ["SeasonId"] = OverviewModel.Season.Id,
                ["SeasonTeams"] = OverviewModel.SeasonTeams,
                ["Drivers"] = drivers,
                ["SeasonDriver"] = item,
            };

        var dialog = await _dialogService.ShowAsync<SeasonDriverEditor>("Modify in-season driver", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is SeasonDriver updatedDriver)
        {
            await _entrantService.UpdateSeasonDriver(updatedDriver);
            OverviewModel.SeasonDrivers = await _entrantService.GetSeasonDrivers(SeasonId);
        }
    }

    private async Task UpdateTeam(SeasonTeam? item)
    {
        var teams = await _teamService.GetAvailableTeams();
        var activeManufacturers = OverviewModel.Manufacturers.Where(e => e.State == State.Active).ToList();

        var parameters = new DialogParameters
            {
                ["SeasonId"] = SeasonId,
                ["Teams"] = teams,
                ["Manufacturers"] = activeManufacturers,
                ["SeasonEngines"] = OverviewModel.SeasonEngines,
                ["SeasonTeam"] = item,
            };

        var dialog = await _dialogService.ShowAsync<SeasonTeamEditor>("Modify in-season team", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is SeasonTeam updatedTeam)
        {
            await _entrantService.UpdateSeasonTeam(updatedTeam);
            OverviewModel.SeasonTeams = await _entrantService.GetSeasonTeams(SeasonId);
        }
    }

    private async Task UpdateEngine(SeasonEngine? item)
    {
        var engines = await _engineService.GetEngines();

        var parameters = new DialogParameters
            {
                ["SeasonId"] = SeasonId,
                ["Engines"] = engines,
                ["SeasonEngine"] = item,
            };

        var dialog = await _dialogService.ShowAsync<SeasonEngineEditor>("Modify in-season engine", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is SeasonEngine updatedEngine)
        {
            await _entrantService.UpdateSeasonEngine(updatedEngine);
            OverviewModel.SeasonEngines = await _entrantService.GetSeasonEngines(SeasonId);
        }
    }

    private async Task ShowQualyBattles()
    {
        var parameters = new DialogParameters
            {
                ["SeasonDrivers"] = OverviewModel.SeasonDrivers,
                ["SeasonTeams"] = OverviewModel.SeasonTeams,
                ["Results"] = OverviewModel.Results
            };

        _ = await _dialogService.ShowAsync<QualyBattles>("QualifyingBattles", parameters);
    }

    private async Task ShowUsedComponents()
    {
        var incidents = await _incidentService.GetIncidents(StateFilter.Default);

        var parameters = new DialogParameters
            {
                ["SeasonDrivers"] = OverviewModel.SeasonDrivers,
                ["SeasonTeams"] = OverviewModel.SeasonTeams,
                ["Results"] = OverviewModel.Results,
                ["Incidents"] = incidents,
            };

        _ = await _dialogService.ShowAsync<UsedComponents>("UsedComponents", parameters);
    }

    private void GoToCommon(string path) => _nav.NavigateTo(path);
}
