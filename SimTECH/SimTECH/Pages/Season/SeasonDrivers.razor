@inject DriverService DriverService
@inject SeasonEntrantService EntrantService
@inject IDialogService DialogService

<MudDataGrid T="SeasonDriver" Items="SeasonDriverEntrants" Loading="_loading" Class="my-2">
    <ToolBarContent>
        <MudText Typo="Typo.h4">Drivers</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Text" Color="Color.Success" OnClick="EnterDriver">New</MudButton>
    </ToolBarContent>
    <Columns>
        <TemplateColumn Title="#" CellStyleFunc="@ViewHelper.DriverGradientStyleFunc">
            <CellTemplate>
                @* There is something wrong with this stupid position indexer, consider defining the position on-load *@
                @(++positionIndexer)
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Name">
            <CellTemplate>
                <MudText>
                    <CountryFlag Code="@context.Item.Driver.Country" Size="FlagSize.Small" />
                    @context.Item.Driver.FullName
                </MudText>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="e => e.Number" />
        <PropertyColumn Property="e => e.Skill" />
        <PropertyColumn Property="e => e.Reliability" />
        <PropertyColumn Property="e => e.TeamRole" />
        <TemplateColumn>
            <CellTemplate>
                @if (context.Item.SeasonTeam == null)
                {
                    <MudText Color="Color.Error">Dropped</MudText>
                }
                else
                {
                    <MudText>@context.Item.SeasonTeam.Name</MudText>
                }
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudButtonGroup>
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateDriverEntrant(context.Item))" />
                </MudButtonGroup>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    [CascadingParameter] public Season Season { get; set; }

    private List<SeasonDriver> SeasonDriverEntrants = new();
    private List<SeasonTeam> TeamEntrants = new();
    private List<Driver> DriverData = new();

    private bool _loading = true;
    private int positionIndexer = 0;

    protected override async Task OnInitializedAsync()
    {
        SeasonDriverEntrants = await EntrantService.GetSeasonDrivers(Season.Id);
        TeamEntrants = await EntrantService.GetSeasonTeams(Season.Id);
        DriverData = await DriverService.GetDrivers();

        foreach (var sdriver in SeasonDriverEntrants)
            sdriver.SeasonTeam = TeamEntrants.FirstOrDefault(e => e.Id == sdriver.SeasonTeamId);

        _loading = false;
    }

    async Task EnterDriver() => await UpdateDriverEntrant(new SeasonDriver());
    async Task UpdateDriverEntrant(SeasonDriver item)
    {
        var parameters = new DialogParameters
            {
                ["SeasonId"] = Season.Id,
                ["Drivers"] = DriverData,
                ["SeasonTeams"] = TeamEntrants,
                ["SeasonDriver"] = item,
            };

        var dialog = await DialogService.ShowAsync<SeasonDriverEditor>("Modify in-season driver", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is SeasonDriver updatedDriver)
        {
            _loading = true;

            await EntrantService.UpdateSeasonDriver(updatedDriver);

            SeasonDriverEntrants = await EntrantService.GetSeasonDrivers(Season.Id);
            foreach (var sdriver in SeasonDriverEntrants)
                sdriver.SeasonTeam = TeamEntrants.FirstOrDefault(e => e.Id == sdriver.SeasonTeamId);

            _loading = false;
        }
    }
}
