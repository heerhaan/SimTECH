@inject SeasonEntrantService _entrantService
@inject RaceService _raceService

<MudContainer>
    @if (loading)
    {
        <MudAlert Severity="Severity.Warning">Eyo this bad boi is loading, here it comes!</MudAlert>
    }
    else
    {
        <MudTabs Outlined="true">
            <MudTabPanel Text="Standings">
                <MudGrid Spacing="4">
                    <MudItem xs="6">
                        <MudPaper Elevation="15" Class="pa-4">
                            <MudTable Items="@DriverResultsModel">
                                <HeaderContent>
                                    <MudTh>Position</MudTh>
                                    <MudTh>Name</MudTh>
                                    <MudTh>Number</MudTh>
                                    <MudTh>TeamRole</MudTh>
                                    <MudTh>
                                        <MudTableSortLabel SortBy="new Func<StandingDriverModel, object>(e => e.Points)">Points</MudTableSortLabel>
                                    </MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Position">@context.Position</MudTd>
                                    <MudTd DataLabel="Name">
                                        <CountryFlag Code="@context.Nationality" Size="FlagSize.Small" />
                                        @context.Name
                                    </MudTd>
                                    <MudTd DataLabel="Number">@context.Number</MudTd>
                                    <MudTd DataLabel="TeamRole">@context.TeamRole</MudTd>
                                    <MudTd DataLabel="Points">@context.Points</MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudPaper>
                    </MudItem>

                    <MudItem xs="6">
                        <MudPaper Elevation="15" Class="pa-4">
                            <MudTable Items="@TeamResultsModel">
                                <HeaderContent>
                                    <MudTh>Position</MudTh>
                                    <MudTh>Principal</MudTh>
                                    <MudTh>Name</MudTh>
                                    <MudTh>Points</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Position">@context.Position</MudTd>
                                    <MudTd DataLabel="Principal">@context.Principal</MudTd>
                                    <MudTd DataLabel="Name" Style="@($"background-color:{context.Colour}; color:{context.Accent}")">
                                        <CountryFlag Code="context.Nationality" Size="FlagSize.Small" />
                                        @context.Name
                                    </MudTd>
                                    <MudTd DataLabel="Points">@context.Points</MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudTabPanel>

            <MudTabPanel Text="WDC results">
                <MudPaper Elevation="15">
                    <MudTable Items="@DriverResultsModel">
                        <ToolBarContent>
                            <MudText Typo="Typo.h4">WDC results</MudText>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>#</MudTh>
                            <MudTh>No</MudTh>
                            <MudTh>Driver</MudTh>
                            @foreach (var race in Races.OrderBy(e => e.Round))
                            {
                                <MudTh>
                                    <CountryFlag Code="@race.Track.Country" Size="FlagSize.Tiny" />
                                    @(race.Track.Name.Substring(0, 3))
                                </MudTh>
                            }
                            <MudTh>PTS</MudTh>
                            <MudTh>AVG</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.Position</MudTd>
                            <MudTd>@context.Number</MudTd>
                            <MudTd>
                                <CountryFlag Code="@context.Nationality" Size="FlagSize.Tiny" />
                                @context.Name
                            </MudTd>
                            @for (int i = 0; i <= Races.Count; i++)
                            {
                                if (i < context.ResultCells.Count)
                                {
                                    var result = context.ResultCells[i];
                                    <MudTd Style="@(GetResultStyle(result))">
                                        @(GetResultText(result))
                                    </MudTd>
                                }
                                else
                                {
                                    <MudTd>-</MudTd>
                                }
                            }
                            <MudTd>@context.Points</MudTd>
                            <MudTd>@Math.Round(context.ResultCells.Select(e => e.Position).Average(), 2)</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudTabPanel>

            <MudTabPanel Text="WCC results">
                <MudTable Items="@TeamResultsModel">
                    <ToolBarContent>
                        <MudText Typo="Typo.h4">WCC results</MudText>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>#</MudTh>
                        <MudTh>Team</MudTh>
                        @foreach (var race in Races.OrderBy(e => e.Round))
                        {
                            <MudTh>
                                <CountryFlag Code="@race.Track.Country" Size="FlagSize.Tiny" />
                                @(race.Track.Name.Substring(0, 3))
                            </MudTh>
                        }
                        <MudTh>PTS</MudTh>
                        <MudTh>AVG</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Position</MudTd>
                        <MudTd>
                            <CountryFlag Code="@context.Nationality" Size="FlagSize.Tiny" />
                            @context.Name
                        </MudTd>
                        @foreach (var round in Races.OrderBy(e => e.Round))
                        {
                            var teamResults = context.ResultCells.Where(e => e.Round == round.Round).ToList();
                            if (teamResults.Any())
                            {
                                <MudTd>
                                    <MudStack>
                                        @foreach (var result in teamResults)
                                        {
                                            <MudChip Style="@(GetResultStyle(result))">
                                                @(GetResultText(result))
                                            </MudChip>
                                        }
                                    </MudStack>
                                </MudTd>
                            }
                            else
                            {
                                <MudTd>-</MudTd>
                            }
                        }
                        <MudTd>@context.Points</MudTd>
                        <MudTd>@Math.Round(context.ResultCells.Select(e => e.Position).Average(), 2)</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudTabPanel>
        </MudTabs>
    }
</MudContainer>

@code {
    [CascadingParameter] public Season Season { get; set; }

    private List<Race> Races { get; set; }
    private List<StandingDriverModel> DriverResultsModel { get; set; }
    private List<StandingTeamModel> TeamResultsModel { get; set; }

    private int lowestScoringPosition = 3;

    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        Races = await _raceService.GetRacesBySeason(Season.Id);

        int indexer = 0;

        DriverResultsModel = (await _entrantService.GetSeasonDriversWithResults(Season.Id))
            .OrderByDescending(e => e.Points)
                .ThenByDescending(e => e.HiddenPoints)
            .Select(e => ToDriverResultModel(e, ++indexer))
            .ToList();

        indexer = 0;

        TeamResultsModel = (await _entrantService.GetSeasonTeamsWithResults(Season.Id))
            .OrderByDescending(e => e.Points)
                .ThenByDescending(e => e.HiddenPoints)
            .Select(e => ToTeamResultModel(e, ++indexer))
            .ToList();

        if (Season != null && Season.PointAllotments?.Any() == true)
            lowestScoringPosition = Season.PointAllotments.Max(e => e.Position);

        loading = false;
    }

    private string GetResultStyle(StandingResultCell cell)
    {
        var cellStyle = "";

        if (cell.Status == RaceStatus.Dnq)
        {
            cellStyle = "background-color: rebeccapurple;";
        }
        else if (cell.Status == RaceStatus.Dsq)
        {
            cellStyle = "background-color: black;";
        }
        else if (cell.Status == RaceStatus.Dnf)
        {
            cellStyle = "background-color: red;";
        }
        else
        {
            switch (cell.Position)
            {
                case 1:
                    cellStyle = "background-color: gold;";
                    break;
                case 2:
                    cellStyle = "background-color: silver;";
                    break;
                case 3:
                    cellStyle = "background-color: burlywood;";
                    break;
                case int n when n <= lowestScoringPosition:
                    cellStyle = "background-color: lightgreen;";
                    break;
                default:
                    cellStyle = "background-color: cornflowerblue";
                    break;
            }
        }

        return cellStyle;
    }

    private string GetResultText(StandingResultCell cell)
    {
        var cellText = string.Empty;

        switch (cell.Status)
        {
            case RaceStatus.Dnq: cellText = "DNQ";
                break;
            case RaceStatus.Dsq: cellText = "DSQ";
                break;
            case RaceStatus.Dnf: cellText = "DNF";
                break;
            default: cellText = cell.Position.ToString();
                break;
        }

        return cellText;
    }

    private StandingDriverModel ToDriverResultModel(SeasonDriver driver, int position)
    {
        return new StandingDriverModel
            {
                Position = position,
                Name = driver.Driver.FullName,
                Nationality = driver.Driver.Country,
                Points = driver.Points,
                HiddenPoints = driver.HiddenPoints,

                ResultCells = driver.Results.Select(e => ToResultCell(e)).ToList(),
            };
    }

    private StandingTeamModel ToTeamResultModel(SeasonTeam team, int position)
    {
        return new StandingTeamModel
            {
                Position = position,
                Name = team.Name,
                Principal = team.Principal,
                Nationality = team.Team.Country,
                Points = team.Points,
                HiddenPoints = team.HiddenPoints,
                Colour = team.Colour,
                Accent = team.Accent,

                ResultCells = team.Results.Select(e => ToResultCell(e)).ToList(),
            };
    }

    private StandingResultCell ToResultCell(Result result)
    {
        return new StandingResultCell
        {
            Position = result.Position,
            Status = result.Status,
            Round = Races.Single(e => e.Id == result.RaceId).Round,
            Pole = result.Grid == 1,
        };
    }

    private abstract class StandingEntrantBase
    {
        public int Position { get; set; }
        public string Name { get; set; }
        public Country Nationality { get; set; }
        public int Points { get; set; }
        public int HiddenPoints { get; set; }

        public string Colour { get; set; }
        public string Accent { get; set; }

        public List<StandingResultCell> ResultCells { get; set; }
    }

    private class StandingDriverModel : StandingEntrantBase
    {
        public int Number { get; set; }
        public TeamRole TeamRole { get; set; }
    }

    private class StandingTeamModel : StandingEntrantBase
    {
        public string Principal { get; set; }
    }

    private class StandingResultCell
    {
        public int Position { get; set; }
        public RaceStatus Status { get; set; }
        public int Round { get; set; }

        public bool Pole { get; set; }
        public bool FL { get; set; }
    }
}
