@inject SeasonEntrantService EntrantService
@inject RaceService RaceService
@inject IDialogService _dialog

@if (loading)
{
    <MudAlert Severity="Severity.Warning">Eyo this bad boi is loading, here it comes!</MudAlert>
}
else
{
    <MudTabs Outlined="true" Centered="true">
        <MudTabPanel Text="Standings">
            <MudGrid Spacing="4">
                <MudItem xs="6">
                    <MudPaper Elevation="15" Class="pa-4 mud-height-full">
                        <MudTable Items="@DriverResultsModel" Dense="true">
                            <ToolBarContent>
                                <MudText Typo="Typo.h5">Drivers</MudText>
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh Class="number-col">#</MudTh>
                                <MudTh>Name</MudTh>
                                <MudTh Class="number-col">No.</MudTh>
                                <MudTh>
                                    <MudTableSortLabel SortBy="new Func<StandingDriverModel, object>(e => e.Points)">PTS</MudTableSortLabel>
                                </MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="#" Style="@(ViewHelper.SetGradientTriangleStyle(context.Colour, context.Accent))" Class="number-col">
                                    @context.Position
                                </MudTd>
                                <MudTd DataLabel="Name">
                                    <CountryFlag Code="@context.Nationality" Size="FlagSize.Small" />
                                    @context.Name
                                </MudTd>
                                <MudTd DataLabel="No." Style="@(ViewHelper.SetFullColourstyle(context.Colour, context.Accent))" Class="number-col">
                                    @context.Number
                                </MudTd>
                                <MudTd DataLabel="PTS">@context.Points</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudPaper>
                </MudItem>
                <MudItem xs="6">
                    <MudPaper Elevation="15" Class="pa-4 mud-height-full">
                        <MudTable Items="@TeamResultsModel" Dense="true">
                            <ToolBarContent>
                                <MudText Typo="Typo.h5">Teams</MudText>
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh Class="number-col">#</MudTh>
                                <MudTh>Principal</MudTh>
                                <MudTh>Name</MudTh>
                                <MudTh>PTS</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="#" Style="@(ViewHelper.SetGradientTriangleStyle(context.Colour, context.Accent))" Class="number-col">
                                    @context.Position
                                </MudTd>
                                <MudTd>@context.Principal</MudTd>
                                <MudTd Style="@(ViewHelper.SetBorderRightStyle(context.Colour))">
                                    <CountryFlag Code="@context.Nationality" Size="FlagSize.Small" />
                                    @context.Name
                                </MudTd>
                                <MudTd>@context.Points</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudTabPanel>

        <MudTabPanel Text="WDC results">
            <MudPaper Elevation="15">
                <MudTable Items="@DriverResultsModel" id="wdc-season-results">
                    <ToolBarContent>
                        <MudText Typo="Typo.h4">WDC results</MudText>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh Class="number-col">#</MudTh>
                        <MudTh>Driver</MudTh>
                        <MudTh Class="number-col">No.</MudTh>
                        <MudTh>Team</MudTh>
                        <MudTh>PTS</MudTh>
                        @foreach (var race in Races.OrderBy(e => e.Round))
                        {
                            <MudTh Class="number-col">
                                <CountryFlag Code="@race.Track.Country" Size="FlagSize.Small" />
                            </MudTh>
                        }
                        <MudTh class="number-col">AVG</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd Class="number-col" Style="@(ViewHelper.SetGradientTriangleStyle(context.Colour, context.Accent))">
                            @context.Position
                        </MudTd>
                        <MudTd>
                            <CountryFlag Code="@context.Nationality" Size="FlagSize.Tiny" />
                            @context.Name
                        </MudTd>
                        <MudTd Class="number-col" Style="@(ViewHelper.SetFullColourstyle(context.Colour, context.Accent))">@context.Number</MudTd>
                        <MudTd>@context.Team</MudTd>
                        <MudTd>@context.Points</MudTd>
                        @foreach (var round in Races.OrderBy(e => e.Round))
                        {
                            var result = context.ResultCells.Find(e => e.Round == round.Round);
                            if (result == null)
                            {
                                <MudTd Class="number-col">-</MudTd>
                            }
                            else
                            {
                                <MudTdResult Result="result" LowestScoringPosition="@lowestScoringPosition" />
                            }
                        }
                        <MudTd>@context.Average</MudTd>
                    </RowTemplate>
                    <FooterContent>
                        <MudTd colspan="20">
                            <MudStack Row="true" Justify="Justify.SpaceBetween">
                                <ScreenshotButton TargetId="wdc-season-results" />
                                <MudIconButton Icon="@Icons.Material.Outlined.InsertChart" Color="Color.Primary" Variant="Variant.Outlined" OnClick="ShowWdcResultGraph" />
                            </MudStack>
                        </MudTd>
                    </FooterContent>
                </MudTable>
            </MudPaper>
        </MudTabPanel>

        <MudTabPanel Text="WCC results">
            <MudTable Items="@TeamResultsModel" id="wcc-season-results">
                <ToolBarContent>
                    <MudText Typo="Typo.h4">WCC results</MudText>
                    <MudSpacer />
                    <MudButtonGroup>
                        <ScreenshotButton TargetId="wcc-season-results" />
                        <MudIconButton Icon="@Icons.Material.Outlined.InsertChart" Color="Color.Primary" Variant="Variant.Outlined" OnClick="ShowWccResultGraph" />
                    </MudButtonGroup>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh Class="number-col">#</MudTh>
                    <MudTh>Principal</MudTh>
                    <MudTh>Team</MudTh>
                    <MudTh>PTS</MudTh>
                    @foreach (var race in Races.OrderBy(e => e.Round))
                    {
                        <MudTh Class="number-col-lg">
                            <CountryFlag Code="@race.Track.Country" Size="FlagSize.Small" />
                        </MudTh>
                    }
                    <MudTh>AVG</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Class="number-col" Style="@(ViewHelper.SetGradientTriangleStyle(context.Colour, context.Accent))">@context.Position</MudTd>
                    <MudTd>@context.Principal</MudTd>
                    <MudTd Style="@(ViewHelper.SetBorderRightStyle(context.Colour))">
                        <CountryFlag Code="@context.Nationality" Size="FlagSize.Tiny" />
                        @context.Name
                    </MudTd>
                    <MudTd>@context.Points</MudTd>
                    @foreach (var round in Races.OrderBy(e => e.Round))
                    {
                        var teamResults = context.ResultCells.Where(e => e.Round == round.Round).ToList();
                        if (teamResults.Any())
                        {
                            <MudTd Class="number-col-lg">
                                <MudStack>
                                    @foreach (var result in teamResults)
                                    {
                                        <MudChip Style="@(GetResultStyle(result))">
                                            @result.GetResultText()
                                        </MudChip>
                                    }
                                </MudStack>
                            </MudTd>
                        }
                        else
                        {
                            <MudTd>-</MudTd>
                        }
                    }
                    <MudTd>@context.Average</MudTd>
                </RowTemplate>
            </MudTable>
        </MudTabPanel>
    </MudTabs>
}

@code {
    [CascadingParameter] public Season Season { get; set; }

    List<SeasonDriver> SeasonDrivers { get; set; }
    List<SeasonTeam> SeasonTeams { get; set; }
    List<Race> Races { get; set; }
    List<StandingDriverModel> DriverResultsModel { get; set; }
    List<StandingTeamModel> TeamResultsModel { get; set; }

    public int lowestScoringPosition = 3;
    bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        Races = await RaceService.GetRacesBySeason(Season.Id);
        SeasonDrivers = await EntrantService.GetSeasonDriversWithResults(Season.Id);
        SeasonTeams = await EntrantService.GetSeasonTeamsWithResults(Season.Id);

        int indexer = 0;

        DriverResultsModel = SeasonDrivers
            .OrderByDescending(e => e.Points)
                .ThenByDescending(e => e.HiddenPoints)
            .Select(e => ToDriverResultModel(e, ++indexer))
            .ToList();

        indexer = 0;

        TeamResultsModel = SeasonTeams
            .OrderByDescending(e => e.Points)
                .ThenByDescending(e => e.HiddenPoints)
            .Select(e => ToTeamResultModel(e, ++indexer))
            .ToList();

        if (Season != null && Season.PointAllotments?.Any() == true)
            lowestScoringPosition = Season.PointAllotments.Max(e => e.Position);

        loading = false;
    }

    async Task ShowWdcResultGraph()
    {
        var parameters = new DialogParameters { ["Drivers"] = DriverResultsModel, ["Season"] = Season };
        // _ = await DialogService.ShowAsync<DriverCompareStat>("Compare drivers", dialogOptions);
        _ = await _dialog.ShowAsync<WdcResultChart>("WDC results chart", parameters);
    }

    async Task ShowWccResultGraph()
    {
        var parameters = new DialogParameters { ["Teams"] = TeamResultsModel, ["Season"] = Season };
        _ = await _dialog.ShowAsync<WccResultChart>("WCC results chart", parameters);
    }

    private string GetResultStyle(StandingResultCell cell)
    {
        var cellStyle = "";

        if (cell.Status == RaceStatus.Dnq)
        {
            cellStyle = "background-color: rebeccapurple;";
        }
        else if (cell.Status == RaceStatus.Dsq)
        {
            cellStyle = "background-color: black;color:white";
        }
        else if (cell.Status == RaceStatus.Dnf)
        {
            cellStyle = "background-color: red;";
        }
        else if (cell.Status == RaceStatus.Fatal)
        {
            cellStyle = "background-color: black;color:white";
        }
        else
        {
            switch (cell.Position)
            {
                case 1:
                    cellStyle = "background-color: gold;";
                    break;
                case 2:
                    cellStyle = "background-color: silver;";
                    break;
                case 3:
                    cellStyle = "background-color: burlywood;";
                    break;
                case int n when n <= lowestScoringPosition:
                    cellStyle = "background-color: lightgreen;";
                    break;
                default:
                    cellStyle = "background-color: cornflowerblue";
                    break;
            }
        }
        // Possibly can return immediatly depending on whether we want to do more with this or not
        return cellStyle;
    }

    private StandingDriverModel ToDriverResultModel(SeasonDriver driver, int position)
    {
        var driverTeam = SeasonTeams.Find(e => e.Id == driver.SeasonTeamId);
        return new StandingDriverModel
            {
                Id = driver.Id,
                Position = position,
                Name = driver.Driver.FullName,
                Number = driver.Number,
                Nationality = driver.Driver.Country,
                Colour = driverTeam?.Colour ?? "var(--mud-palette-secondary)",
                Accent = driverTeam?.Accent ?? "var(--mud-palette-secondary-text)",
                Points = driver.Points,
                HiddenPoints = driver.HiddenPoints,
                SeasonTeamId = driver.SeasonTeamId,
                Team = driverTeam?.Name ?? "None",

                ResultCells = driver.Results.Select(e => ToResultCell(e)).ToList(),
            };
    }

    private StandingTeamModel ToTeamResultModel(SeasonTeam team, int position)
    {
        return new StandingTeamModel
            {
                Id = team.Id,
                Position = position,
                Name = team.Name,
                Principal = team.Principal,
                Nationality = team.Team.Country,
                Colour = team.Colour,
                Accent = team.Accent,
                Points = team.Points,
                HiddenPoints = team.HiddenPoints,

                ResultCells = team.Results?.Select(e => ToResultCell(e)).ToList() ?? new(),
            };
    }

    private StandingResultCell ToResultCell(Result result)
    {
        return new StandingResultCell
        {
            Position = result.Position,
            Status = result.Status,
            Round = Races.Single(e => e.Id == result.RaceId).Round,
            Pole = result.Grid == 1,
        };
    }
}
