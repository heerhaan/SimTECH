@inject LeagueService LeagueService
@inject SeasonEntrantService EntrantService
@inject SeasonService SeasonService
@inject ISnackbar Snackbar

@if (DevelopedEntrants != null)
{
    <MudPaper>
        <MudStack Row="true" Class="px-4 py-2">
            <MudText Typo="Typo.h4">Development</MudText>

            <div class="mx-1 my-auto">
                <MudTooltip Text="For whom the development is run">
                    <MudText Typo="Typo.overline">Entrant</MudText>
                </MudTooltip>
                <MudChipSet SelectedChipChanged="EntrantChipChanged" Mandatory="true">
                    <MudChip Color="Color.Primary" Value="Entrant.Driver" Default="true">Driver</MudChip>
                    <MudChip Color="Color.Primary" Value="Entrant.Team">Team</MudChip>
                    <MudChip Color="Color.Primary" Value="Entrant.Engine">Engine</MudChip>
                </MudChipSet>
            </div>

            <MudSpacer />

            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Recycling" Color="Color.Info" OnClick="RunDevelop">Run</MudButton>
            
            @if (_ranDevelop)
            {
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Success" OnClick="SaveDevelopment">Save</MudButton>
            }
        </MudStack>
        <MudTable Items="@DevelopedEntrants" Dense="true">
            <ToolBarContent>
                <div class="pa-1 mx-1">
                    <MudTooltip Text="How the development ranges are determined">
                        <MudText Typo="Typo.overline">Type</MudText>
                    </MudTooltip>
                    <MudChipSet SelectedChipChanged="TypeChipChanged" Mandatory="true">
                        <MudChip Color="Color.Secondary" Value="TypeDevelop.Range" Default="true">Range</MudChip>
                        <MudChip Color="Color.Secondary" Value="TypeDevelop.Set">Set</MudChip>
                        <MudChip Color="Color.Secondary" Value="TypeDevelop.Direct">Direct</MudChip>
                    </MudChipSet>
                </div>

                <div class="pa-1 mx-1">
                    <MudTooltip Text="Which aspect is going to be developed">
                        <MudText Typo="Typo.overline">Target</MudText>
                    </MudTooltip>
                    <MudChipSet SelectedChipChanged="TargetChipChanged" Mandatory="true">
                        <MudChip Color="Color.Tertiary" Value="TargetDevelop.Main" Default="true">@_mainTypeName</MudChip>
                        <MudChip Color="Color.Tertiary" Value="TargetDevelop.Reliability">Reliability</MudChip>
                    </MudChipSet>
                </div>

                <MudSpacer />

                @if (_selectedType == TypeDevelop.Range)
                {
                    <MudNumericField T="int" Label="Min" ValueChanged="ApplyMinRange" Class="field-sm" />
                    <MudNumericField T="int" Label="Max" ValueChanged="ApplyMaxRange" Class="field-sm" />
                }
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
                @if (_optionalColTitle != null)
                {
                    <MudTh>@_optionalColTitle</MudTh>
                }
                <MudTh>Old</MudTh>
                <MudTh>Change</MudTh>
                <MudTh>New</MudTh>
                <MudTh>Range</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    @if (context.Nationality.HasValue)
                    {
                        <CountryFlag Code="@context.Nationality.Value" Size="FlagSize.Tiny" />
                    }
                    @context.Name
                </MudTd>
                @if (_optionalColTitle != null)
                {
                    <MudTd>@(context.Optional.HasValue ? context.Optional.Value : "?")</MudTd>
                }
                <MudTd>@context.Old</MudTd>
                <MudTd>@context.Change</MudTd>
                <MudTd>@context.New</MudTd>
                <MudTd>
                    <MudStack Row="true">
                        <MudNumericField T="int" @bind-Value="context.Min" Label="Min" ReadOnly="_selectedType != TypeDevelop.Direct" Class="field-sm" />
                        <MudNumericField T="int" @bind-Value="context.Max" Label="Max" ReadOnly="_selectedType != TypeDevelop.Direct" Class="field-sm" />
                    </MudStack>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
}

@code {
    [CascadingParameter] public Season Season { get; set; }

    League League;
    List<SeasonDriver> SeasonDrivers;
    List<SeasonTeam> SeasonTeams;
    List<SeasonEngine> SeasonEngines;
    List<DevelopedEntrant> DevelopedEntrants;

    Entrant _activeEntrant = Entrant.Driver;
    TypeDevelop _selectedType = TypeDevelop.Range;
    TargetDevelop _selectedTarget = TargetDevelop.Main;
    string _mainTypeName = "Skill";
    string? _optionalColTitle = "Age";
    bool _ranDevelop = false;

    protected override async Task OnInitializedAsync()
    {
        League = await LeagueService.GetLeagueById(Season.LeagueId);
        SeasonDrivers = await EntrantService.GetSeasonDrivers(Season.Id);
        SeasonTeams = await EntrantService.GetSeasonTeams(Season.Id);
        SeasonEngines = await EntrantService.GetSeasonEngines(Season.Id);

        DevelopDrivers();
    }

    void ReloadDeveloped(Entrant entrant)
    {
        switch (entrant)
        {
            case Entrant.Driver: DevelopDrivers(); break;
            case Entrant.Team: DevelopTeams(); break;
            case Entrant.Engine: DevelopEngines(); break;
            default: throw new InvalidOperationException("wtf is this");
        }

        _activeEntrant = entrant;
        _ranDevelop = false;
    }

    void DevelopDrivers()
    {
        DevelopedEntrants = SeasonDrivers.Select(e =>
            new DevelopedEntrant
                {
                    Id = e.Id,
                    Name = e.Driver.FullName,
                    Nationality = e.Driver.Country,
                    Optional = Season.Year - e.Driver.DateOfBirth.Year,
                    Old = _selectedTarget == TargetDevelop.Main ? e.Skill : e.Reliability,
                })
            .ToList();

        _optionalColTitle = "Age";
    }

    void DevelopTeams()
    {
        DevelopedEntrants = SeasonTeams.Select(e =>
            new DevelopedEntrant
            {
                Id = e.Id,
                Name = e.Name,
                Nationality = e.Team.Country,
                Optional = null,
                Old = _selectedTarget == TargetDevelop.Main ? e.BaseValue : e.Reliability,
            })
            .ToList();

        _optionalColTitle = null;
    }

    void DevelopEngines()
    {
        DevelopedEntrants = SeasonEngines.Select(e =>
            new DevelopedEntrant
                {
                    Id = e.Id,
                    Name = e.Name,
                    Nationality = null,
                    Optional = null,
                    Old = _selectedTarget == TargetDevelop.Main ? e.Power : e.Reliability,
                })
            .ToList();

        _optionalColTitle = null;
    }

    void EntrantChipChanged(MudChip? entrantChip)
    {
        if (entrantChip != null)
        {
            _activeEntrant = (Entrant)entrantChip.Value;
            ReloadDeveloped(_activeEntrant);

            if (_selectedType == TypeDevelop.Set)
                ApplyDefaultRanges();
        }
    }

    void TypeChipChanged(MudChip? typeChip)
    {
        if (typeChip != null)
        {
            _selectedType = (TypeDevelop)typeChip.Value;

            if (_selectedType == TypeDevelop.Set)
                ApplyDefaultRanges();
        }
    }

    void TargetChipChanged(MudChip? devChip)
    {
        if (devChip != null)
        {
            _selectedTarget = (TargetDevelop)devChip.Value;
            ReloadDeveloped(_activeEntrant);
        }
    }

    void ApplyDefaultRanges()
    {
        if (_selectedTarget == TargetDevelop.Main && League.DevelopmentRanges?.Any() == true)
        {
            List<DevelopmentRange> setCompareRange;
            List<DevelopmentRange>? optionalCompareRange = null;

            switch (_activeEntrant)
            {
                case Entrant.Driver:
                    setCompareRange = League.DevelopmentRanges.Where(e => e.Type == RangeType.Skill).OrderBy(e => e.Comparer).ToList();
                    optionalCompareRange = League.DevelopmentRanges.Where(e => e.Type == RangeType.Age).OrderBy(e => e.Comparer).ToList();
                    break;
                case Entrant.Team:
                    setCompareRange = League.DevelopmentRanges.Where(e => e.Type == RangeType.Team).OrderBy(e => e.Comparer).ToList();
                    break;
                case Entrant.Engine:
                    setCompareRange = League.DevelopmentRanges.Where(e => e.Type == RangeType.Engine).OrderBy(e => e.Comparer).ToList();
                    break;
                default:
                    setCompareRange = new();
                    break;
            }

            if (setCompareRange.Any() || (optionalCompareRange?.Any() == true))
            {
                foreach (var entrant in DevelopedEntrants)
                {
                    int min = 0;
                    int max = 0;

                    var matchRange = setCompareRange.FirstOrDefault(e => e.Comparer >= entrant.Old);

                    if (matchRange == null)
                    {
                        matchRange = setCompareRange[setCompareRange.Count - 1];
                    }

                    min = matchRange.Minimum;
                    max = matchRange.Maximum;

                    if (optionalCompareRange?.Any() == true && entrant.Optional.HasValue)
                    {
                        var optRange = optionalCompareRange.FirstOrDefault(e => e.Comparer >= entrant.Optional.Value);

                        if (optRange != null)
                        {
                            min += optRange.Minimum;
                            max += optRange.Maximum;
                        }
                    }

                    entrant.Min = min;
                    entrant.Max = max;
                }

                return;
            }
        }

        // Fallback minimum and maximum with the defaults
        foreach (var entrant in DevelopedEntrants)
        {
            entrant.Min = -2;
            entrant.Max = 2;
        }
    }

    void ApplyMinRange(int newMin)
    {
        foreach (var entrant in DevelopedEntrants)
            entrant.Min = newMin;
    }

    void ApplyMaxRange(int newMax)
    {
        foreach (var entrant in DevelopedEntrants)
            entrant.Max = newMax;
    }

    void RunDevelop()
    {
        foreach (var entrant in DevelopedEntrants)
        {
            if (entrant.Min >= entrant.Max)
            {
                Snackbar.Add("oi you cunt, a minimum should be less than the maximum. you better fix that shit first", Severity.Error);
                return;
            }

            entrant.Change = NumberHelper.RandomInt(entrant.Min, entrant.Max);
            entrant.New = entrant.Old + entrant.Change;

            if (_selectedTarget == TargetDevelop.Reliability)
            {
                // The minimum and maximum value for reliability is between 1 and 100, thus we set those limits
                if (entrant.New > 100)
                    entrant.New = 100;
                else if (entrant.New < 1)
                    entrant.New = 1;
            }
        }

        _ranDevelop = true;
    }

    async Task SaveDevelopment()
    {
        var developedValues = DevelopedEntrants.ToDictionary(e => e.Id, e => e.New);

        switch (_activeEntrant)
        {
            case Entrant.Driver:
                await EntrantService.SaveDriverDevelopment(developedValues, _selectedTarget);
                break;
            case Entrant.Team:
                await EntrantService.SaveTeamDevelopment(developedValues, _selectedTarget);
                break;
            case Entrant.Engine:
                await EntrantService.SaveEngineDevelopment(developedValues, _selectedTarget);
                break;
        }

        ReloadDeveloped(_activeEntrant);
    }
}
