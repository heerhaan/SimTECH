@inject LeagueService LeagueService
@inject SeasonEntrantService EntrantService
@inject SeasonService SeasonService
@inject IDialogService _dialogService
@inject ISnackbar _snackbar
@using SimTECH.Pages.Season.Development

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="px-0">
    @if (DevelopedEntrants != null)
    {
        <MudStack Row="true" Class="mud-width-full">
            <MudPaper Class="pa-2" Width="20%">
                <MudText Typo="Typo.h5">Settings</MudText>
                <MudDivider />
                <MudStack Class="mud-height-full">
                    <MudStack Spacing="0">
                        <MudTooltip Text="For whom the development is run">
                            <MudText Typo="Typo.subtitle1">Entrant</MudText>
                        </MudTooltip>
                        <MudChipSet SelectedChipChanged="EntrantChipChanged" Mandatory="true">
                            <MudChip Color="Color.Primary" Value="Entrant.Driver" Default="true">Driver</MudChip>
                            <MudChip Color="Color.Primary" Value="Entrant.Team">Team</MudChip>
                            <MudChip Color="Color.Primary" Value="Entrant.Engine">Engine</MudChip>
                        </MudChipSet>
                    </MudStack>

                    <MudStack Spacing="0">
                        <MudTooltip Text="Which aspect is going to be developed">
                            <MudText Typo="Typo.subtitle1">Target</MudText>
                        </MudTooltip>
                        <MudChipSet SelectedChipChanged="TargetChipChanged" Mandatory="true">
                            <MudChip Color="Color.Secondary" Value="Aspect.Skill" Default="true">@_mainTypeName</MudChip>
                            <MudChip Color="Color.Secondary" Value="Aspect.Reliability">Reliability</MudChip>
                            
                            @if (_activeEntrant == Entrant.Team)
                            {
                                <MudChip Color="Color.Secondary" Value="Aspect.Aero">Aero</MudChip>
                                <MudChip Color="Color.Secondary" Value="Aspect.Chassis">Chassis</MudChip>
                                <MudChip Color="Color.Secondary" Value="Aspect.Powertrain">Powertrain</MudChip>
                            }
                            else if (_activeEntrant == Entrant.Driver)
                            {
                                <MudChip Color="Color.Secondary" Value="Aspect.Attack">Attack</MudChip>
                                <MudChip Color="Color.Secondary" Value="Aspect.Defense">Defense</MudChip>
                            }
                        </MudChipSet>
                    </MudStack>

                    <MudStack Spacing="0">
                        <MudTooltip Text="How the development ranges are determined">
                            <MudText Typo="Typo.subtitle1">Type</MudText>
                        </MudTooltip>
                        <MudChipSet SelectedChipChanged="TypeChipChanged" Mandatory="true">
                            <MudChip Color="Color.Tertiary" Value="Quantifier.Range" Default="true">Range</MudChip>
                            @if (_selectedTarget == Aspect.Skill)
                            {
                                <MudChip Color="Color.Tertiary" Value="Quantifier.Set">Set</MudChip>
                            }
                            <MudChip Color="Color.Tertiary" Value="Quantifier.Direct">Direct</MudChip>
                        </MudChipSet>
                    </MudStack>

                    @if (_selectedType == Quantifier.Range)
                    {
                        <MudStack Spacing="0">
                            <MudText Typo="Typo.subtitle1">Development range</MudText>
                            <MudNumericField T="int" Label="Min" ValueChanged="ApplyMinRange" Class="field-sm" />
                            <MudNumericField T="int" Label="Max" ValueChanged="ApplyMaxRange" Class="field-sm" />
                        </MudStack>
                    }

                    <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="ShowSummary" Class="mt-4">Summary</MudButton>
                </MudStack>
            </MudPaper>
            <MudPaper Class="flex-grow-1 ">
                <MudTable Items="@DevelopedEntrants" Dense="true" id="development-results">
                    <ToolBarContent>
                        <MudText Typo="Typo.h5">Development</MudText>
                        <MudSpacer />
                        <MudButtonGroup Color="Color.Info" Variant="Variant.Outlined">
                            @if (_ranDevelop)
                            {
                                <MudButton StartIcon="@Icons.Material.Filled.Save" Color="Color.Success" Variant="Variant.Outlined" OnClick="SaveDevelopment">Save</MudButton>
                            }
                            <MudButton StartIcon="@Icons.Material.Filled.Recycling" Color="Color.Info" Variant="Variant.Outlined" OnClick="RunDevelop">Run</MudButton>
                            <ScreenshotButton TargetId="development-results" />
                        </MudButtonGroup>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>
                            <MudTableSortLabel T="DevelopedEntrant" SortBy="@(e => e.Name)">
                                Name
                            </MudTableSortLabel>
                        </MudTh>
                        @if (_optionalColTitle != null)
                        {
                            <MudTh>
                                <MudTableSortLabel T="DevelopedEntrant" SortBy="@(e => e.Optional)">
                                    @_optionalColTitle
                                </MudTableSortLabel>
                            </MudTh>
                        }
                        <MudTh Class="number-col-lg">
                            <MudTableSortLabel T="DevelopedEntrant" SortBy="@(e => e.Old)">
                                Old
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh Class="number-col-lg">
                            <MudTableSortLabel T="DevelopedEntrant" SortBy="@(e => e.Change)">
                                Change
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh Class="number-col-lg">
                            <MudTableSortLabel T="DevelopedEntrant" SortBy="@(e => e.New)">
                                New
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh Style="min-width:225px">Range</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-0">
                                <MudText>@context.Name</MudText>
                                <MudSpacer />
                                @if (context.Nationality.HasValue)
                                {
                                    <CountryFlag Code="@context.Nationality.Value" Size="FlagSize.Small" />
                                }
                            </MudStack>
                        </MudTd>
                        @if (_optionalColTitle != null)
                        {
                            <MudTd>
                                <MudText Typo="Typo.caption">@(context.Optional.HasValue ? context.Optional.Value : "?")</MudText>
                            </MudTd>
                        }
                        <MudTd Class="number-col-lg">
                            <MudText Typo="Typo.caption">@context.Old</MudText>
                        </MudTd>
                        <MudTd Class="number-col-lg">
                            <GradientColour Min="@minChange" Max="@maxChange" Value="@context.Change">
                                <MudText Typo="Typo.caption">@context.Change</MudText>
                            </GradientColour>
                        </MudTd>
                        <MudTd Class="number-col-lg">
                            <MudText Typo="Typo.caption">@context.New</MudText>
                        </MudTd>
                        <MudTd>
                            <MudStack Row="true" Class="pa-0">
                                <MudNumericField T="int"
                                                 @bind-Value="@context.Min"
                                                 Label="Min"
                                                 ReadOnly="@(_selectedType != Quantifier.Direct)"
                                                 Class="field-xs" />
                                <MudNumericField T="int"
                                                 @bind-Value="@context.Max"
                                                 Label="Max"
                                                 ReadOnly="@(_selectedType != Quantifier.Direct)"
                                                 Class="field-xs" />
                            </MudStack>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
            <MudPaper Width="20%" Class="pa-2">
                <MudText Typo="Typo.h5">Set dev. ranges</MudText>
                <MudDivider />
                
                @if (League.DevelopmentRanges != null)
                {
                    <MudStack>
                        @foreach (var rangeGroup in League.DevelopmentRanges.GroupBy(e => e.Type))
                        {
                            <MudText Typo="Typo.subtitle1">@rangeGroup.Key</MudText>
                            <MudSimpleTable>
                                <thead>
                                    <tr>
                                        <th>Less than</th>
                                        <th>Lower</th>
                                        <th>Upper</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var range in rangeGroup)
                                    {
                                        <tr>
                                            <td>@range.Comparer</td>
                                            <td>@range.Minimum</td>
                                            <td>@range.Maximum</td>
                                        </tr>
                                    }
                                </tbody>
                            </MudSimpleTable>
                        }
                    </MudStack>
                }
            </MudPaper>
        </MudStack>
    }
</MudContainer>

@code {
    [CascadingParameter] public Season Season { get; set; }

    League League;
    List<SeasonDriver>? SeasonDrivers;
    List<SeasonTeam>? SeasonTeams;
    List<SeasonEngine>? SeasonEngines;
    List<DevelopedEntrant> DevelopedEntrants;

    List<CompletedDevelopment> SummaryDeveloped = new();
    static readonly DialogOptions SummaryDialogOptions = new()
    {
        MaxWidth = MaxWidth.ExtraExtraLarge,
        CloseButton = true,
    };

    Entrant _activeEntrant = Entrant.Driver;
    Quantifier _selectedType = Quantifier.Range;
    Aspect _selectedTarget = Aspect.Skill;
    string _mainTypeName = "Skill";
    string? _optionalColTitle = "Age";
    bool _ranDevelop = false;

    int currentMin = 0;
    int currentMax = 0;
    int minChange = 0;
    int maxChange = 0;

    protected override async Task OnInitializedAsync()
    {
        League = await LeagueService.GetLeagueById(Season.LeagueId);

        await ReloadDeveloped(Entrant.Driver);
    }

    async Task ReloadDeveloped(Entrant entrant)
    {
        switch (entrant)
        {
            case Entrant.Driver:
                await DevelopDrivers();
                break;
            case Entrant.Team:
                await DevelopTeams();
                break;
            case Entrant.Engine:
                await DevelopEngines();
                break;
            default:
                throw new InvalidOperationException("wtf unexpected entrant added to develop? (how)");
        }

        _activeEntrant = entrant;
        _ranDevelop = false;
    }

    async Task DevelopDrivers()
    {
        if (SeasonDrivers == null)
            SeasonDrivers = await EntrantService.GetSeasonDrivers(Season.Id);

        DevelopedEntrants = SeasonDrivers.Select(e =>
            new DevelopedEntrant
                {
                    Id = e.Id,
                    Name = e.Driver.FullName,
                    Nationality = e.Driver.Country,
                    Optional = Season.Year - e.Driver.DateOfBirth.Year,
                    Old = ReadDriverOldTarget(e),
                })
            .ToList();

        _mainTypeName = "Skill";
        _optionalColTitle = "Age";
    }

    async Task DevelopTeams()
    {
        if (SeasonTeams == null)
            SeasonTeams = await EntrantService.GetSeasonTeams(Season.Id);

        DevelopedEntrants = SeasonTeams.Select(e =>
            new DevelopedEntrant
            {
                Id = e.Id,
                Name = e.Name,
                Nationality = e.Team.Country,
                Optional = null,
                Old = ReadTeamOldTarget(e),
            })
            .ToList();

        _mainTypeName = "Car";
        _optionalColTitle = null;
    }

    async Task DevelopEngines()
    {
        if (SeasonEngines == null)
            SeasonEngines = await EntrantService.GetSeasonEngines(Season.Id);

        DevelopedEntrants = SeasonEngines.Select(e =>
            new DevelopedEntrant
                {
                    Id = e.Id,
                    Name = e.Name,
                    Nationality = null,
                    Optional = null,
                    Old = _selectedTarget == Aspect.Skill ? e.Power : e.Reliability,
                })
            .ToList();

        _mainTypeName = "Power";
        _optionalColTitle = null;
    }

    int ReadDriverOldTarget(SeasonDriver driver) => _selectedTarget switch
    {
        Aspect.Skill => driver.Skill,
        Aspect.Reliability => driver.Reliability,
        Aspect.Attack => driver.Attack,
        Aspect.Defense => driver.Defense,
        _ => throw new InvalidOperationException("One of the wrong target develops just got in the driver target reader"),
    };

    int ReadTeamOldTarget(SeasonTeam team) => _selectedTarget switch
    {
        Aspect.Skill => team.BaseValue,
        Aspect.Reliability => team.Reliability,
        Aspect.Aero => team.Aero,
        Aspect.Chassis => team.Chassis,
        Aspect.Powertrain => team.Powertrain,
        _ => throw new InvalidOperationException("Somehow neither of the 5 possible develops"),
    };

    async Task EntrantChipChanged(MudChip? entrantChip)
    {
        if (entrantChip == null)
            return;

        if (_activeEntrant == Entrant.Team
                && (_selectedTarget == Aspect.Aero
                    || _selectedTarget == Aspect.Chassis
                        || _selectedTarget == Aspect.Powertrain))
            _selectedTarget = Aspect.Skill;
        else if (_activeEntrant == Entrant.Driver
            && (_selectedTarget == Aspect.Attack
                || _selectedTarget == Aspect.Defense))
            _selectedTarget = Aspect.Skill;

        _activeEntrant = (Entrant)entrantChip.Value;

        await ReloadDeveloped(_activeEntrant);
        ApplyCommon();
    }

    void TypeChipChanged(MudChip? typeChip)
    {
        if (typeChip == null)
            return;

        _selectedType = (Quantifier)typeChip.Value;
        ApplyCommon();
    }

    async Task TargetChipChanged(MudChip? devChip)
    {
        if (devChip == null)
            return;

        _selectedTarget = (Aspect)devChip.Value;
        await ReloadDeveloped(_activeEntrant);
        ApplyCommon();
    }

    void ApplyCommon()
    {
        if (_selectedType == Quantifier.Set && _selectedTarget == Aspect.Skill)
        {
            ApplyDefaultRanges();
        }
        else if (_selectedType == Quantifier.Range && currentMin != currentMax)
        {
            ApplyMinRange(currentMin);
            ApplyMaxRange(currentMax);
        }
    }

    void ApplyDefaultRanges()
    {
        if (_selectedTarget == Aspect.Skill && League.DevelopmentRanges?.Any() == true)
        {
            List<DevelopmentRange> setCompareRange;
            List<DevelopmentRange>? additionalCompareRange = null;

            switch (_activeEntrant)
            {
                case Entrant.Driver:
                    setCompareRange = League.DevelopmentRanges.GetAspectRanges(Aspect.Skill);
                    additionalCompareRange = League.DevelopmentRanges.GetAspectRanges(Aspect.Age);
                    break;
                case Entrant.Team:
                    setCompareRange = League.DevelopmentRanges.GetAspectRanges(Aspect.BaseCar);
                    break;
                case Entrant.Engine:
                    setCompareRange = League.DevelopmentRanges.GetAspectRanges(Aspect.Engine);
                    break;
                default:
                    throw new InvalidOperationException("Unrecognized entrant");
            }

            if (setCompareRange.Any() || (additionalCompareRange?.Any() == true))
            {
                foreach (var entrant in DevelopedEntrants)
                {
                    int min = 0;
                    int max = 0;

                    var matchRange = setCompareRange.FirstOrDefault(e => e.Comparer >= entrant.Old);

                    if (matchRange == null)
                        matchRange = setCompareRange[setCompareRange.Count - 1];

                    min = matchRange.Minimum;
                    max = matchRange.Maximum;

                    if (additionalCompareRange?.Any() == true && entrant.Optional.HasValue)
                    {
                        var optRange = additionalCompareRange.FirstOrDefault(e => e.Comparer >= entrant.Optional.Value);

                        if (optRange != null)
                        {
                            min += optRange.Minimum;
                            max += optRange.Maximum;
                        }
                    }

                    entrant.Min = min;
                    entrant.Max = max;
                }

                return;
            }
        }

        // Fallback minimum and maximum with the defaults
        foreach (var entrant in DevelopedEntrants)
        {
            entrant.Min = -2;
            entrant.Max = 2;
        }
    }

    void ApplyMinRange(int newMin)
    {
        currentMin = newMin;

        foreach (var entrant in DevelopedEntrants)
            entrant.Min = newMin;
    }

    void ApplyMaxRange(int newMax)
    {
        currentMax = newMax;

        foreach (var entrant in DevelopedEntrants)
            entrant.Max = newMax;
    }

    void RunDevelop()
    {
        foreach (var entrant in DevelopedEntrants)
        {
            if (entrant.Min > entrant.Max)
            {
                _snackbar.Add("oi you cunt, a minimum should be less than the maximum. you better fix that shit first", Severity.Error);
                return;
            }

            entrant.Change = NumberHelper.RandomInt(entrant.Min, entrant.Max);
            entrant.New = entrant.Old + entrant.Change;

            if (entrant.New < 0)
                entrant.New = 0;

            if (_selectedTarget == Aspect.Reliability)
            {
                // The maximum value for reliability is 1000
                if (entrant.New > 1000)
                    entrant.New = 1000;
            }
        }

        var allChanges = DevelopedEntrants.Select(e => e.Change).ToArray();
        minChange = allChanges.Min();
        maxChange = allChanges.Max();

        _ranDevelop = true;
    }

    async Task SaveDevelopment()
    {
        var developedValues = DevelopedEntrants.ToDictionary(e => e.Id, e => e.New);

        switch (_activeEntrant)
        {
            case Entrant.Driver:
                await EntrantService.SaveDriverDevelopment(developedValues, _selectedTarget);
                SeasonDrivers = await EntrantService.GetSeasonDrivers(Season.Id);
                break;
            case Entrant.Team:
                await EntrantService.SaveTeamDevelopment(developedValues, _selectedTarget);
                SeasonTeams = await EntrantService.GetSeasonTeams(Season.Id);
                break;
            case Entrant.Engine:
                await EntrantService.SaveEngineDevelopment(developedValues, _selectedTarget);
                SeasonEngines = await EntrantService.GetSeasonEngines(Season.Id);
                break;
        }

        SummaryDeveloped.Add(new CompletedDevelopment(_activeEntrant, _selectedTarget, minChange, maxChange, DevelopedEntrants));

        await ReloadDeveloped(_activeEntrant);
    }

    async Task ShowSummary() => _ =
        await _dialogService.ShowAsync<SummaryDevelopment>(
            "Summary development", new DialogParameters { ["Completed"] = SummaryDeveloped }, SummaryDialogOptions);
}
