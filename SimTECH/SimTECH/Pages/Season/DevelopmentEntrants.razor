@inject LeagueService LeagueService
@inject SeasonEntrantService EntrantService
@inject SeasonService SeasonService
@inject IDialogService _dialogService
@inject ISnackbar _snackbar
@using SimTECH.Pages.Season.Development

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="px-0">
    @if (DevelopedEntrants != null)
    {
        <MudStack Row="true" Class="mud-width-full">
            <MudPaper Class="pa-2" Width="20%">
                <MudText Typo="Typo.h5">Settings</MudText>
                <MudDivider />
                <MudStack Class="mud-height-full">
                    <MudStack Spacing="0">
                        <MudTooltip Text="For whom the development is run">
                            <MudText Typo="Typo.subtitle1">Entrant</MudText>
                        </MudTooltip>
                        <MudChipSet SelectedChipChanged="EntrantChipChanged" Mandatory="true">
                            <MudChip Color="Color.Primary" Value="Entrant.Driver" Default="true">Driver</MudChip>
                            <MudChip Color="Color.Primary" Value="Entrant.Team">Team</MudChip>
                            <MudChip Color="Color.Primary" Value="Entrant.Engine">Engine</MudChip>
                        </MudChipSet>
                    </MudStack>

                    <MudStack Spacing="0">
                        <MudTooltip Text="Which aspect is going to be developed">
                            <MudText Typo="Typo.subtitle1">Target</MudText>
                        </MudTooltip>
                        <MudChipSet SelectedChipChanged="TargetChipChanged" Mandatory="true">
                            <MudChip Color="Color.Secondary" Value="Aspect.Reliability" Default="true">Reliability</MudChip>
                            
                            @if (_activeEntrant == Entrant.Driver)
                            {
                                <MudChip Color="Color.Secondary" Value="Aspect.Skill">@Aspect.Skill.ReadableAspect()</MudChip>
                                <MudChip Color="Color.Secondary" Value="Aspect.Attack">Attack</MudChip>
                                <MudChip Color="Color.Secondary" Value="Aspect.Defense">Defense</MudChip>
                            }
                            else if (_activeEntrant == Entrant.Team)
                            {
                                <MudChip Color="Color.Secondary" Value="Aspect.BaseCar">@Aspect.BaseCar.ReadableAspect()</MudChip>
                                <MudChip Color="Color.Secondary" Value="Aspect.Aero">Aero</MudChip>
                                <MudChip Color="Color.Secondary" Value="Aspect.Chassis">Chassis</MudChip>
                                <MudChip Color="Color.Secondary" Value="Aspect.Powertrain">Powertrain</MudChip>
                            }
                            else if (_activeEntrant == Entrant.Engine)
                            {
                                <MudChip Color="Color.Secondary" Value="Aspect.Engine">@Aspect.Engine.ReadableAspect()</MudChip>
                            }
                        </MudChipSet>
                    </MudStack>

                    <MudStack Spacing="0">
                        <MudTooltip Text="How the development ranges are determined">
                            <MudText Typo="Typo.subtitle1">Type</MudText>
                        </MudTooltip>
                        <MudChipSet SelectedChipChanged="TypeChipChanged" Mandatory="true">
                            <MudChip Color="Color.Tertiary" Value="Quantifier.Range" Default="true">Range</MudChip>
                            <MudChip Color="Color.Tertiary" Value="Quantifier.Set">Set</MudChip>
                            <MudChip Color="Color.Tertiary" Value="Quantifier.Direct">Direct</MudChip>
                        </MudChipSet>
                    </MudStack>

                    @if (_selectedType == Quantifier.Range)
                    {
                        <MudStack Spacing="0">
                            <MudText Typo="Typo.subtitle1">Development range</MudText>
                            <MudNumericField T="int" Label="Min" ValueChanged="ApplyMinRange" Class="field-sm" />
                            <MudNumericField T="int" Label="Max" ValueChanged="ApplyMaxRange" Class="field-sm" />
                        </MudStack>
                    }

                    <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="ShowSummary" Class="mt-4">Summary</MudButton>
                </MudStack>
            </MudPaper>
            <MudPaper Class="flex-grow-1 ">
                <MudTable Items="@DevelopedEntrants" Dense="true" id="development-results">
                    <ToolBarContent>
                        <MudText Typo="Typo.h5">Development</MudText>
                        <MudSpacer />
                        <MudButtonGroup Color="Color.Info" Variant="Variant.Outlined">
                            @if (_ranDevelop)
                            {
                                <MudButton StartIcon="@Icons.Material.Filled.Save" Color="Color.Success" Variant="Variant.Outlined" OnClick="SaveDevelopment">Save</MudButton>
                            }
                            <MudButton StartIcon="@Icons.Material.Filled.Recycling" Color="Color.Info" Variant="Variant.Outlined" OnClick="RunDevelop">Run</MudButton>
                            <ScreenshotButton TargetId="development-results" />
                        </MudButtonGroup>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>
                            <MudTableSortLabel T="DevelopedEntrant" SortBy="@(e => e.Name)">
                                Name
                            </MudTableSortLabel>
                        </MudTh>
                        @if (_optionalColTitle != null)
                        {
                            <MudTh>
                                <MudTableSortLabel T="DevelopedEntrant" SortBy="@(e => e.Optional)">
                                    @_optionalColTitle
                                </MudTableSortLabel>
                            </MudTh>
                        }
                        <MudTh Class="number-col-lg">
                            <MudTableSortLabel T="DevelopedEntrant" SortBy="@(e => e.Old)">
                                Old
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh Class="number-col-lg">
                            <MudTableSortLabel T="DevelopedEntrant" SortBy="@(e => e.Change)">
                                Change
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh Class="number-col-lg">
                            <MudTableSortLabel T="DevelopedEntrant" SortBy="@(e => e.New)">
                                New
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh Style="min-width:225px">Range</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-0">
                                <MudText>@context.Name</MudText>
                                <MudSpacer />
                                @if (context.Nationality.HasValue)
                                {
                                    <CountryFlag Code="@context.Nationality.Value" Size="ElementSize.Small" />
                                }
                            </MudStack>
                        </MudTd>
                        @if (_optionalColTitle != null)
                        {
                            <MudTd>
                                <MudText Typo="Typo.caption">@(context.Optional.HasValue ? context.Optional.Value : "?")</MudText>
                            </MudTd>
                        }
                        <MudTd Class="number-col-lg">
                            <MudText Typo="Typo.caption">@context.Old</MudText>
                        </MudTd>
                        <MudTd Class="number-col-lg">
                            <GradientColour Min="@minChange" Max="@maxChange" Value="@context.Change">
                                <MudText Typo="Typo.caption">@context.Change</MudText>
                            </GradientColour>
                        </MudTd>
                        <MudTd Class="number-col-lg">
                            <MudText Typo="Typo.caption">@context.New</MudText>
                        </MudTd>
                        <MudTd>
                            <MudStack Row="true" Class="pa-0">
                                <MudNumericField T="int"
                                                 @bind-Value="@context.Min"
                                                 Label="Min"
                                                 ReadOnly="@(_selectedType != Quantifier.Direct)"
                                                 Class="field-xs" />
                                <MudNumericField T="int"
                                                 @bind-Value="@context.Max"
                                                 Label="Max"
                                                 ReadOnly="@(_selectedType != Quantifier.Direct)"
                                                 Class="field-xs" />
                            </MudStack>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
            <MudPaper Width="20%" Class="pa-2">
                <MudText Typo="Typo.h5">Set DEV ranges</MudText>
                <MudDivider />

                @if (ActiveAspectRanges != null)
                {
                    <MudText Typo="Typo.subtitle1">@_selectedTarget.ReadableAspect()</MudText>
                    <MudSimpleTable>
                        <thead>
                            <tr>
                                <th>Less than</th>
                                <th>Lower</th>
                                <th>Upper</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var range in ActiveAspectRanges.OrderBy(e => e.Comparer))
                            {
                                <tr>
                                    <td>@range.Comparer</td>
                                    <td>@range.Minimum</td>
                                    <td>@range.Maximum</td>
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>
                }

                @if (_activeEntrant == Entrant.Driver && _selectedTarget == Aspect.Skill)
                {
                    <MudText Typo="Typo.subtitle1">@Aspect.Age.ReadableAspect()</MudText>
                    <MudSimpleTable>
                        <thead>
                            <tr>
                                <th>Less than</th>
                                <th>Lower</th>
                                <th>Upper</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var range in AgeRanges.OrderBy(e => e.Comparer))
                            {
                                <tr>
                                    <td>@range.Comparer</td>
                                    <td>@range.Minimum</td>
                                    <td>@range.Maximum</td>
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>
                }
            </MudPaper>
        </MudStack>
    }
</MudContainer>

@code {
    [CascadingParameter] public Season Season { get; set; }

    List<DevelopmentRange>? ActiveAspectRanges { get; set; }
    List<DevelopmentRange> AgeRanges { get; set; }

    League League;
    List<SeasonDriver>? SeasonDrivers;
    List<SeasonTeam>? SeasonTeams;
    List<SeasonEngine>? SeasonEngines;
    List<DevelopedEntrant> DevelopedEntrants;

    static readonly DialogOptions SummaryDialogOptions = new()
    {
        MaxWidth = MaxWidth.ExtraLarge,
        CloseButton = true,
    };

    Entrant _activeEntrant = Entrant.Driver;
    Quantifier _selectedType = Quantifier.Range;
    Aspect _selectedTarget = Aspect.Reliability;
    string? _optionalColTitle = "Age";
    bool _ranDevelop = false;

    int currentMin = 0;
    int currentMax = 0;
    int minChange = 0;
    int maxChange = 0;

    protected override async Task OnInitializedAsync()
    {
        League = await LeagueService.GetLeagueById(Season.LeagueId);
        AgeRanges = League.DevelopmentRanges?.GetAspectRanges(Aspect.Age) ?? new();

        await ReloadDeveloped(Entrant.Driver);
    }

    async Task ReloadDeveloped(Entrant entrant)
    {
        switch (entrant)
        {
            case Entrant.Driver:
                await DevelopDrivers(); break;
            case Entrant.Team:
                await DevelopTeams(); break;
            case Entrant.Engine:
                await DevelopEngines(); break;
            default:
                throw new InvalidOperationException("wtf unexpected entrant added to develop? (how)");
        }

        _activeEntrant = entrant;
        _ranDevelop = false;
    }

    async Task DevelopDrivers()
    {
        if (SeasonDrivers == null)
            SeasonDrivers = await EntrantService.GetSeasonDrivers(Season.Id);

        DevelopedEntrants = SeasonDrivers.Select(e =>
            new DevelopedEntrant
                {
                    Id = e.Id,
                    Name = e.Driver.FullName,
                    Nationality = e.Driver.Country,
                    Optional = Season.Year - e.Driver.DateOfBirth.Year,
                    Old = e.RetrieveAspectValue(_selectedTarget),
                })
            .ToList();

        _optionalColTitle = "Age";
    }

    async Task DevelopTeams()
    {
        if (SeasonTeams == null)
            SeasonTeams = await EntrantService.GetSeasonTeams(Season.Id);

        DevelopedEntrants = SeasonTeams.Select(e =>
            new DevelopedEntrant
            {
                Id = e.Id,
                Name = e.Name,
                Nationality = e.Team.Country,
                Optional = null,
                Old = e.RetrieveAspectValue(_selectedTarget),
            })
            .ToList();

        _optionalColTitle = null;
    }

    async Task DevelopEngines()
    {
        if (SeasonEngines == null)
            SeasonEngines = await EntrantService.GetSeasonEngines(Season.Id);

        DevelopedEntrants = SeasonEngines.Select(e =>
            new DevelopedEntrant
            {
                Id = e.Id,
                Name = e.Name,
                Nationality = null,
                Optional = null,
                Old = e.RetrieveAspectValue(_selectedTarget),
            })
            .ToList();

        _optionalColTitle = null;
    }

    async Task EntrantChipChanged(MudChip? entrantChip)
    {
        if (entrantChip == null)
            return;

        _selectedTarget = Aspect.Reliability;
        _activeEntrant = (Entrant)entrantChip.Value;

        await ReloadDeveloped(_activeEntrant);
        ApplyCommon();
    }

    void TypeChipChanged(MudChip? typeChip)
    {
        if (typeChip == null)
            return;

        _selectedType = (Quantifier)typeChip.Value;
        ApplyCommon();
    }

    async Task TargetChipChanged(MudChip? devChip)
    {
        if (devChip == null)
            return;

        _selectedTarget = (Aspect)devChip.Value;
        await ReloadDeveloped(_activeEntrant);
        ApplyCommon();
    }

    void ApplyCommon()
    {
        if (League.DevelopmentRanges?.Any() == true)
            ActiveAspectRanges = League.DevelopmentRanges.GetAspectRanges(_selectedTarget);

        if (_selectedType == Quantifier.Set)
        {
            ApplyDefaultRanges();
        }
        else if (_selectedType == Quantifier.Range && currentMin != currentMax)
        {
            ApplyMinRange(currentMin);
            ApplyMaxRange(currentMax);
        }
    }

    void ApplyDefaultRanges()
    {
        if (ActiveAspectRanges?.Any() == true)
        {
            List<DevelopmentRange> setCompareRange = ActiveAspectRanges;
            List<DevelopmentRange>? additionalCompareRange = null;

            if (_activeEntrant == Entrant.Driver)
                additionalCompareRange = AgeRanges;

            if (setCompareRange.Any() || (additionalCompareRange?.Any() == true))
            {
                foreach (var entrant in DevelopedEntrants)
                {
                    int min = 0;
                    int max = 0;

                    var matchRange = setCompareRange.FirstOrDefault(e => e.Comparer >= entrant.Old);

                    if (matchRange == null)
                        matchRange = setCompareRange[setCompareRange.Count - 1];

                    min = matchRange.Minimum;
                    max = matchRange.Maximum;

                    if (additionalCompareRange?.Any() == true && entrant.Optional.HasValue)
                    {
                        var optRange = additionalCompareRange.FirstOrDefault(e => e.Comparer >= entrant.Optional.Value);

                        if (optRange != null)
                        {
                            min += optRange.Minimum;
                            max += optRange.Maximum;
                        }
                    }

                    entrant.Min = min;
                    entrant.Max = max;
                }

                return;
            }
        }

        // Fallback minimum and maximum with the defaults
        foreach (var entrant in DevelopedEntrants)
        {
            entrant.Min = -2;
            entrant.Max = 2;
        }
    }

    void ApplyMinRange(int newMin)
    {
        currentMin = newMin;

        foreach (var entrant in DevelopedEntrants)
            entrant.Min = newMin;
    }

    void ApplyMaxRange(int newMax)
    {
        currentMax = newMax;

        foreach (var entrant in DevelopedEntrants)
            entrant.Max = newMax;
    }

    void RunDevelop()
    {
        foreach (var entrant in DevelopedEntrants)
        {
            if (entrant.Min > entrant.Max)
            {
                _snackbar.Add("oi you cunt, a minimum should be less than the maximum. you better fix that shit first", Severity.Error);
                return;
            }

            entrant.Change = NumberHelper.RandomInt(entrant.Min, entrant.Max);
            entrant.New = entrant.Old + entrant.Change;

            if (entrant.New < 0)
                entrant.New = 0;

            if (_selectedTarget == Aspect.Reliability)
            {
                // The maximum value for reliability is 1000
                if (entrant.New > 1000)
                    entrant.New = 1000;
            }
        }

        var allChanges = DevelopedEntrants.Select(e => e.Change).ToArray();
        minChange = allChanges.Min();
        maxChange = allChanges.Max();

        _ranDevelop = true;
    }

    async Task SaveDevelopment()
    {
        var developedValues = DevelopedEntrants.ToDictionary(e => e.Id, e => e.New);

        switch (_activeEntrant)
        {
            case Entrant.Driver:
                await EntrantService.SaveDriverDevelopment(developedValues, _selectedTarget);
                SeasonDrivers = await EntrantService.GetSeasonDrivers(Season.Id);
                break;
            case Entrant.Team:
                await EntrantService.SaveTeamDevelopment(developedValues, _selectedTarget);
                SeasonTeams = await EntrantService.GetSeasonTeams(Season.Id);
                break;
            case Entrant.Engine:
                await EntrantService.SaveEngineDevelopment(developedValues, _selectedTarget);
                SeasonEngines = await EntrantService.GetSeasonEngines(Season.Id);
                break;
        }

        await EntrantService.SaveDevelopmentLog(CreateLog);
        await ReloadDeveloped(_activeEntrant);
    }

    private List<DevelopmentLog> CreateLog => DevelopedEntrants.Select(e => 
        new DevelopmentLog
        {
            EntrantId = e.Id,
            EntrantGroup = _activeEntrant,
            DevelopedAspect = _selectedTarget,
            Change = e.Change,
            SeasonId = Season.Id,
        })
        .ToList();

    async Task ShowSummary()
    {
        var seasonLog = await EntrantService.GetDevelopmentLog(Season.Id);

        // We directly take data from here so we're going to need it
        if (SeasonDrivers == null)
            SeasonDrivers = await EntrantService.GetSeasonDrivers(Season.Id);
        if (SeasonTeams == null)
            SeasonTeams = await EntrantService.GetSeasonTeams(Season.Id);
        if (SeasonEngines == null)
            SeasonEngines = await EntrantService.GetSeasonEngines(Season.Id);

        var summaries = new List<DevelopSummary>();
        foreach (var groupSummary in seasonLog.GroupBy(e => e.EntrantGroup))
        {
            var entrantLog = new List<EntrantDevelopLog>();

            foreach (var developed in groupSummary.ToArray().GroupBy(e => e.EntrantId))
            {
                EntrantDevelopLog? currentLogs;
                var developedLogs = developed.ToArray();

                switch (groupSummary.Key)
                {
                    case Entrant.Driver:
                        currentLogs = CreateDriverLog(developed.Key, developedLogs); break;
                    case Entrant.Team:
                        currentLogs = CreateTeamLog(developed.Key, developedLogs); break;
                    case Entrant.Engine:
                        currentLogs = CreateEngineLog(developed.Key, developedLogs); break;
                    default:
                        currentLogs = null; break;
                }

                if (currentLogs != null)
                    entrantLog.Add(currentLogs);
            }

            summaries.Add(new DevelopSummary
            {
                EntrantGroup = groupSummary.Key,
                Aspects = entrantLog[0].DevelopedAspects.Keys.ToArray(),
                EntrantLogs = entrantLog,
            });
        }

        await _dialogService.ShowAsync<SummaryDevelopment>(
            "Summary development", new DialogParameters { ["Summaries"] = summaries }, SummaryDialogOptions);
    }

    EntrantDevelopLog? CreateDriverLog(long driverId, DevelopmentLog[] logs)
    {
        var matchingDriver = SeasonDrivers?.Find(e => e.Id == driverId);

        if (matchingDriver == null)
            return null;

        var developedAspects = logs
            .GroupBy(e => e.DevelopedAspect)
            .ToDictionary(e => e.Key, e => (e.Select(x => x.Change).Sum(), matchingDriver.RetrieveAspectValue(e.Key)));

        return new EntrantDevelopLog
            {
                EntrantId = driverId,
                Entrant = Entrant.Driver,
                Name = matchingDriver.Driver.FullName,
                Nationality = matchingDriver.Driver.Country,
                DevelopedAspects = developedAspects,
            };
    }

    EntrantDevelopLog? CreateTeamLog(long teamId, DevelopmentLog[] logs)
    {
        var matchingTeam = SeasonTeams?.Find(e => e.Id == teamId);

        if (matchingTeam == null)
            return null;

        var developedAspects = logs
            .GroupBy(e => e.DevelopedAspect)
            .ToDictionary(e => e.Key, e => (e.Select(x => x.Change).Sum(), matchingTeam.RetrieveAspectValue(e.Key)));

        return new EntrantDevelopLog
            {
                EntrantId = teamId,
                Entrant = Entrant.Team,
                Name = matchingTeam.Name,
                Nationality = matchingTeam.Team.Country,
                DevelopedAspects = developedAspects,
            };
    }

    EntrantDevelopLog? CreateEngineLog(long engineId, DevelopmentLog[] logs)
    {
        var matchingEngine = SeasonEngines?.Find(e => e.Id == engineId);

        if (matchingEngine == null)
            return null;

        var developedAspects = logs
            .GroupBy(e => e.DevelopedAspect)
            .ToDictionary(e => e.Key, e => (e.Select(x => x.Change).Sum(), matchingEngine.RetrieveAspectValue(e.Key)));

        return new EntrantDevelopLog
            {
                EntrantId = engineId,
                Entrant = Entrant.Engine,
                Name = matchingEngine.Name,
                DevelopedAspects = developedAspects,
            };
    }
}
