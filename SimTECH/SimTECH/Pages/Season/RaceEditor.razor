@using MudBlazor.Utilities

<MudDialog>
    <TitleContent>
        <MudText>Add race</MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="6">
                <MudTextField @bind-Value="model.Name" Label="Name" />
                <MudSelect T="Weather" @bind-Value="model.Weather" Label="Weather">
                    @foreach (var select in EnumHelper.GetWeatherSelection())
                    {
                        <MudSelectItem Value="select.Key">@select.Value</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudNumericField T="int" @bind-Value="model.Round" Label="Round" />
                <MudSelect T="Weather" @bind-Value="model.Weather" Label="Weather">
                    @foreach (var select in EnumHelper.GetWeatherSelection())
                    {
                        <MudSelectItem Value="select.Key">@select.Value</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <div>
                    <MudText>Stint setup for the race</MudText>
                    <table>
                        <thead>
                            <tr>
                                <th>Order</th>
                                <th>UseDriver</th>
                                <th>UseCar</th>
                                <th>UseEngine</th>
                                <th>UseReliability</th>
                                <th>RngMin</th>
                                <th>RngMax</th>
                            </tr>
                        </thead>
                        <tbody ondragover="event.preventDefault();" ondragstart="event.dataTransfer.setData('', event.target.id);">
                            <!-- NOTE: underneath works but it isn't pretty nor easy to use -->
                            @foreach (var item in model.Stints.OrderBy(x => x.Order))
                            {
                                <tr @ondrop="() => HandleDrop(item)" @key="item"
                                    @ondragleave="@(() => { item.IsDragOver = false; })"
                                    @ondragenter="@(() => { item.IsDragOver = true; })"
                                    style="@(item.IsDragOver ? "border: solid 2px red; background-color:red;" : "")"
                                    @ondragstart="() => draggingItem = item"
                                    @ondragend="() => draggingItem = null"
                                    draggable="true">
                                    <td>
                                        <MudText>@item.Order</MudText>
                                    </td>
                                    <td>
                                        <MudCheckBox @bind-Checked="item.UseDriver" Color="Color.Tertiary" />
                                    </td>
                                    <td>
                                        <MudCheckBox @bind-Checked="item.UseCar" Color="Color.Tertiary" />
                                    </td>
                                    <td>
                                        <MudCheckBox @bind-Checked="item.UseEngine" Color="Color.Tertiary" />
                                    </td>
                                    <td>
                                        <MudCheckBox @bind-Checked="item.UseReliability" Color="Color.Tertiary" />
                                    </td>
                                    <td>
                                        <MudNumericField T="int" @bind-Value="item.RngMin" />
                                    </td>
                                    <td>
                                        <MudNumericField T="int" @bind-Value="item.RngMax" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td class="d-flex justify end">
                                    <MudButton StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Secondary" OnClick="AddStint">Add stint</MudButton>
                                </td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </MudItem>
            <MudItem xs="12">
                does this work?
                <MudButton OnClick="RefreshContainer">Refresh</MudButton>
                <MudDropContainer T="EditStintModel" Items="model.Stints" @ref="_container" ItemsSelector="(item, zone) => true" ItemDropped="ItemDropped">
                    <ChildContent>
                        <MudPaper Class="ma-4">
                            <MudList>
                                <MudDropZone T="EditStintModel" Identifier="temp" AllowReorder="true" />
                            </MudList>
                        </MudPaper>
                    </ChildContent>
                    <ItemRenderer>
                        <MudListItem Class="d-flex gap-2">
                            <MudText>@context.Order</MudText>
                            <MudCheckBox @bind-Checked="context.UseDriver" Color="Color.Tertiary" />
                            <MudCheckBox @bind-Checked="context.UseCar" Color="Color.Tertiary" />
                            <MudCheckBox @bind-Checked="context.UseEngine" Color="Color.Tertiary" />
                            <MudCheckBox @bind-Checked="context.UseReliability" Color="Color.Tertiary" />
                            <MudNumericField T="int" @bind-Value="context.RngMin" />
                            <MudNumericField T="int" @bind-Value="context.RngMax" />
                        </MudListItem>
                    </ItemRenderer>
                </MudDropContainer>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? RaceDialog { get; set; }

    [Parameter] public Race? Race { get; set; }
    [Parameter] public List<Track>? Tracks { get; set; }

    private EditRaceModel model = new();
    private EditStintModel? draggingItem; // model object which is being dragged
    private MudDropContainer<EditStintModel> _container;

    protected override void OnInitialized()
    {
        if (Race != null)
        {
            model = new EditRaceModel(Race);
            orderNum = model.Stints.Count;
        }
    }

    private int orderNum = 0;

    private void AddStint()
    {
        model.Stints.Add(new EditStintModel
        {
            Order = ++orderNum,
            RngMin = 20,
            RngMax = 40
        });
    }

    private void RefreshContainer()
    {
        //update the binding to the container
        StateHasChanged();

        //the container refreshes the internal state
        _container.Refresh();
    }

    private void HandleDrop(EditStintModel dropItem)
    {
        // draggingitem -> where the drop occurred
        if (draggingItem is null)
            return;

        // retain the original order for later
        var initialOrder = dropItem.Order;

        // increate all the orders beneath model with 1
        model.Stints.Where(e => e.Order >= initialOrder).ToList().ForEach(e => e.Order++);

        draggingItem.Order = initialOrder;

        int reorder = 0;
        foreach (var model in model.Stints.OrderBy(e => e.Order).ToList())
        {
            model.Order = reorder++; // keeps numbers from 0 to size-1
            model.IsDragOver = false; // removes the drag over
        }
    }

    private void ItemDropped(MudItemDropInfo<EditStintModel> dropItem)
    {
        model.Stints.UpdateOrder(dropItem, item => item.Order);
    }

    private void Submit()
    {
        if (model.IsDirty)
        {
            var modRace = model.Record;

            RaceDialog?.Close(DialogResult.Ok(modRace));
        }
    }

    private void Cancel() => RaceDialog?.Cancel();
}
