<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Add race for round: @IncomingRound</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@Model">
            <MudTextField @bind-Value="Model.Name" Label="Name" />
            <MudSelect T="long" @bind-Value="Model.TrackId" Label="Track" ReadOnly="@(Model.Id != 0)">
                @foreach (var select in Tracks)
                {
                    <MudSelectItem Value="select.Id">
                        <CountryFlag Code="@select.Country" Size="FlagSize.Small" />
                        @select.Name
                    </MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="Weather" @bind-Value="Model.Weather" Label="Weather">
                @foreach (var select in EnumHelper.GetWeatherSelection())
                {
                    <MudSelectItem Value="select.Key">@select.Value</MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? RaceDialog { get; set; }

    [Parameter] public Race? Race { get; set; }
    [Parameter] public List<Track> Tracks { get; set; } = new();
    [Parameter] public long SeasonId { get; set; }
    [Parameter] public int IncomingRound { get; set; }

    private EditRaceModel Model = new();

    protected override void OnInitialized()
    {
        if (Race != null)
        {
            Model = new EditRaceModel(Race)
            {
                Round = IncomingRound,
                SeasonId = SeasonId,
            };
        }
    }

    private void Submit()
    {
        if (Model.IsDirty)
        {
            var modRace = Model.Record;

            RaceDialog?.Close(DialogResult.Ok(modRace));
        }
    }

    private void Cancel() => RaceDialog?.Cancel();
}
