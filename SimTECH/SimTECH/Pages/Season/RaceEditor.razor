<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Add race for round: @IncomingRound</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@Model">
            <MudGrid>
                <MudItem xs="9">
                    <MudStack>
                        <MudTextField @bind-Value="Model.Name" Label="Name" Class="field-lg" />
                        <MudSelect T="long" @bind-Value="Model.TrackId" Label="Track" ReadOnly="@(Model.Id != 0)">
                            @foreach (var select in Tracks)
                            {
                                <MudSelectItem Value="select.Id">
                                    <CountryFlag Code="@select.Country" Size="FlagSize.Small" />
                                    @select.Name
                                </MudSelectItem>
                            }
                        </MudSelect>
                        <div>
                            <MudText Typo="Typo.subtitle2">Weather</MudText>
                            <MudChipSet @bind-SelectedChip="weatherChip">
                                @foreach (var select in EnumHelper.GetWeatherSelection())
                                {
                                    <MudChip Value="@select.Key" Default="@(Model.Weather == select.Key)">@select.Value</MudChip>
                                }
                            </MudChipSet>
                        </div>
                        <MudSwitch @bind-Checked="variableRaceLength" Label="Set variable race length"></MudSwitch>
                        @if (variableRaceLength)
                        {
                            <MudNumericField T="int" @bind-Value="Model.RaceLength" Step="10" Label="RaceLength" HelperText="Should round to nearest ten" Class="field-md" />
                        }
                    </MudStack>
                </MudItem>

                <MudItem xs="3">
                    @if (errorValidations.Any())
                    {
                        <MudList>
                            <MudListSubheader>Error messages</MudListSubheader>
                            @foreach (var error in errorValidations)
                            {
                                <MudListItem>
                                    <MudText Color="Color.Error">@error</MudText>
                                </MudListItem>
                            }
                        </MudList>
                    }
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? RaceDialog { get; set; }

    [Parameter] public Race? Race { get; set; }
    [Parameter] public List<Track> Tracks { get; set; } = new();
    [Parameter] public long SeasonId { get; set; }
    [Parameter] public int IncomingRound { get; set; }
    [Parameter] public int DefaultRaceLength { get; set; }

    private MudChip? weatherChip;
    private bool variableRaceLength { get; set; } = false;
    private List<string> errorValidations = new();

    private EditRaceModel Model = new();

    protected override void OnInitialized()
    {
        if (Race != null)
        {
            Model = new EditRaceModel(Race)
            {
                Round = IncomingRound,
                SeasonId = SeasonId,
                RaceLength = DefaultRaceLength,
            };
        }
    }

    private void Submit()
    {//_selectedType = (TypeDevelop)typeChip.Value;
        if (weatherChip != null)
            Model.Weather = (Weather)weatherChip.Value;
        else if (Model.Weather == Weather.Unknown)
            Model.Weather = EnumHelper.GetRandomWeather();

        if (!RunValidations())
            return;

        if (Model.IsDirty)
        {
            var modRace = Model.Record;

            RaceDialog?.Close(DialogResult.Ok(modRace));
        }
    }

    private void Cancel() => RaceDialog?.Cancel();

    private bool RunValidations()
    {
        var isValid = true;

        if ((Model.RaceLength % 10) != 0)
        {
            errorValidations.Add("Race length should be a factor of 10");
            isValid = false;
        }

        return isValid;
    }
}
