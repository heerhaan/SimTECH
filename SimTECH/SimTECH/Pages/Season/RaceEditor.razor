@using MudBlazor.Utilities

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Add race for round: @IncomingRound</MudText>
        <MudText Typo="Typo.body1">Stint's can be re-ordered by dragging them</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@Model">
            <MudGrid>
                <MudItem xs="6">
                    <MudTextField @bind-Value="Model.Name" Label="Name" />
                    <MudSelect T="long" @bind-Value="Model.TrackId" Label="Track" ReadOnly="@(Model.Id != 0)">
                        @foreach (var select in Tracks)
                        {
                            <MudSelectItem Value="select.Id">
                                <CountryFlag Code="@select.Country" Size="FlagSize.Small" />
                                @select.Name
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="6">
                    <MudSelect T="Weather" @bind-Value="Model.Weather" Label="Weather">
                        @foreach (var select in EnumHelper.GetWeatherSelection())
                        {
                            <MudSelectItem Value="select.Key">@select.Value</MudSelectItem>
                        }
                    </MudSelect>
                    <MudStack Row="true">
                        <MudNumericField T="int" @bind-Value="amountStints" Label="Amount of stints" />
                        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Size="Size.Small" OnClick="SetStintAmount">
                            Set amount
                        </MudButton>
                    </MudStack>
                </MudItem>

                <MudItem xs="12">
                    <MudDropContainer T="EditStintModel" Items="Model.Stints" @ref="_container" ItemsSelector="(item, zone) => true" ItemDropped="ItemDropped">
                        <ChildContent>
                            <MudPaper Elevation="15" Class="ma-2 pa-2">
                                <MudText>Stint setup for the race</MudText>
                                <MudDropZone T="EditStintModel" Identifier="temp" AllowReorder="true" />
                            </MudPaper>
                        </ChildContent>
                        <ItemRenderer>
                            <MudPaper Elevation="25" Class="ma-2 pa-2">
                                <MudStack Spacing="2" Row="true" Justify="Justify.SpaceEvenly">
                                    <MudText>@(1 + context.Order)</MudText>
                                        <MudCheckBox @bind-Checked="context.UseDriver" Color="Color.Tertiary" Label="Driver" />
                                        <MudCheckBox @bind-Checked="context.UseCar" Color="Color.Tertiary" Label="Car" />
                                        <MudCheckBox @bind-Checked="context.UseEngine" Color="Color.Tertiary" Label="Engine" />
                                        <MudCheckBox @bind-Checked="context.UseReliability" Color="Color.Tertiary" Label="Reliability" />
                                        <MudNumericField T="int" @bind-Value="context.RngMin" Label="RngMin" />
                                        <MudNumericField T="int" @bind-Value="context.RngMax" Label="RngMax" />
                                    </MudStack>
                                </MudPaper>
                            </ItemRenderer>
                        </MudDropContainer>
                    </MudItem>
                </MudGrid>
        </MudForm>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? RaceDialog { get; set; }

    [Parameter] public Race? Race { get; set; }
    [Parameter] public List<Track> Tracks { get; set; } = new();
    [Parameter] public int SeasonId { get; set; }
    [Parameter] public int IncomingRound { get; set; }

    private EditRaceModel Model = new();
    //private MudForm form; can be used for validation by calling form.Validate() if it's a ref
    private MudDropContainer<EditStintModel> _container;
    private int amountStints { get; set; }
    private int orderNum = 0;

    protected override void OnInitialized()
    {
        if (Race != null)
        {
            Model = new EditRaceModel(Race)
            {
                Round = IncomingRound,
                SeasonId = SeasonId,
            };

            orderNum = Model.Stints.Count;
        }
    }

    private void SetStintAmount()
    {
        if (amountStints > orderNum)
        {
            for (; orderNum < amountStints; orderNum++)
            {
                Model.Stints.Add(new EditStintModel
                    {
                        Order = orderNum,
                        RngMin = 10,
                        RngMax = (NumberHelper.RandomInt(4, 6) * 10)
                    });
            }
        }
        else
        {
            for (; orderNum > amountStints; orderNum--)
            {
                Model.Stints.RemoveAt(orderNum - 1);
            }
        }

        RefreshContainer();
    }

    private void RefreshContainer()
    {
        //update the binding to the container
        StateHasChanged();

        //the container refreshes the internal state
        _container.Refresh();
    }

    private void ItemDropped(MudItemDropInfo<EditStintModel> dropItem)
    {
        Model.Stints.UpdateOrder(dropItem, item => item.Order);
    }

    private void Submit()
    {
        if (Model.IsDirty)
        {
            var modRace = Model.Record;

            RaceDialog?.Close(DialogResult.Ok(modRace));
        }
    }

    private void Cancel() => RaceDialog?.Cancel();
}
