@using MudBlazor.Utilities

<MudDialog>
    <TitleContent>
        <MudText>Add race</MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="6">
                <MudTextField @bind-Value="model.Name" Label="Name" />
                <MudSelect T="long" @bind-Value="model.TrackId" Label="Track">
                    @foreach (var select in Tracks)
                    {
                        <MudSelectItem Value="select.Id">
                            <CountryFlag Code="@select.Country" Size="FlagSize.Small" />
                            @select.Name
                        </MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="6">
                <MudNumericField T="int" @bind-Value="model.Round" Label="Round" />
                <MudSelect T="Weather" @bind-Value="model.Weather" Label="Weather">
                    @foreach (var select in EnumHelper.GetWeatherSelection())
                    {
                        <MudSelectItem Value="select.Key">@select.Value</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="12">
                <MudStack Row="true">
                    <MudNumericField T="int" @bind-Value="_amountStints" Label="Amount of stints" ReadOnly="_amountReadonly" />
                    <MudButton OnClick="SetStintAmount" Variant="Variant.Filled" Color="Color.Primary" Disabled="_amountReadonly">
                        Set amount and edit stints
                    </MudButton>
                </MudStack>
            </MudItem>

            <MudItem xs="12" Class="@(_amountReadonly ? "" : "d-none")">
                <MudText>Stint setup for the race</MudText>
                <MudStack Spacing="3" Row="true">
                    <MudText>Order</MudText>
                    <MudText>Driver</MudText>
                    <MudText>Car</MudText>
                    <MudText>Engine</MudText>
                    <MudText>Reliability</MudText>
                    <MudText>RngMin</MudText>
                    <MudText>RngMax</MudText>
                </MudStack>
                <MudDropContainer T="EditStintModel" Items="model.Stints" @ref="_container" ItemsSelector="(item, zone) => true" ItemDropped="ItemDropped">
                    <ChildContent>
                        <MudPaper Class="ma-4">
                            <MudList>
                                <MudDropZone T="EditStintModel" Identifier="temp" AllowReorder="true" />
                            </MudList>
                        </MudPaper>
                    </ChildContent>
                    <ItemRenderer>
                        <MudListItem>
                            <MudStack Spacing="2" Row="true">
                                <MudText>@(1 + context.Order)</MudText>
                                <MudCheckBox @bind-Checked="context.UseDriver" Color="Color.Tertiary" Label="Driver" />
                                <MudCheckBox @bind-Checked="context.UseCar" Color="Color.Tertiary" Label="Car" />
                                <MudCheckBox @bind-Checked="context.UseEngine" Color="Color.Tertiary" Label="Engine" />
                                <MudCheckBox @bind-Checked="context.UseReliability" Color="Color.Tertiary" Label="Reliability" />
                                <MudNumericField T="int" @bind-Value="context.RngMin" Label="RngMin" />
                                <MudNumericField T="int" @bind-Value="context.RngMax" Label="RngMax" />
                            </MudStack>
                        </MudListItem>
                    </ItemRenderer>
                </MudDropContainer>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? RaceDialog { get; set; }

    [Parameter] public Race? Race { get; set; }
    [Parameter] public List<Track> Tracks { get; set; } = new();

    private EditRaceModel model = new();
    private MudDropContainer<EditStintModel> _container;
    private int _amountStints { get; set; }
    private bool _amountReadonly = false;
    private int orderNum = 0;

    protected override void OnInitialized()
    {
        if (Race != null)
        {
            model = new EditRaceModel(Race);
            orderNum = model.Stints.Count;
        }
    }

    private void SetStintAmount()
    {
        for (int i = 0; i < _amountStints; i++)
        {
            AddStint();
        }

        RefreshContainer();

        _amountReadonly = !_amountReadonly;
    }

    private void AddStint()
    {
        model.Stints.Add(new EditStintModel
        {
            Order = orderNum++,
            RngMin = 20,
            RngMax = 40
        });
    }

    private void RefreshContainer()
    {
        //update the binding to the container
        StateHasChanged();

        //the container refreshes the internal state
        _container.Refresh();
    }

    private void ItemDropped(MudItemDropInfo<EditStintModel> dropItem)
    {
        model.Stints.UpdateOrder(dropItem, item => item.Order);
    }

    private void Submit()
    {
        if (model.IsDirty)
        {
            var modRace = model.Record;

            RaceDialog?.Close(DialogResult.Ok(modRace));
        }
    }

    private void Cancel() => RaceDialog?.Cancel();
}
