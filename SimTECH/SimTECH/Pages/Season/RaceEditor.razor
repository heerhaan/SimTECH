<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Add race for round: @IncomingRound</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@Model">
            <MudGrid>
                <MudItem xs="9">
                    <MudStack>
                        <MudTextField @bind-Value="Model.Name" Label="Name" Class="field-lg" />

                        <div>
                            <MudText Typo="Typo.subtitle2">Weather</MudText>
                            <MudChipSet @bind-SelectedChip="climateChip" Mandatory="true">
                                @foreach (var climate in Climates)
                                {
                                    <MudChip Value="@climate.Id" Icon="@climate.Icon" Default="@(Model.ClimateId == climate.Id)">
                                        @climate.Terminology
                                    </MudChip>
                                }
                            </MudChipSet>
                        </div>

                        <MudSwitch @bind-Checked="variableRaceLength" Label="Set variable race length" />

                        @if (variableRaceLength)
                        {
                            <MudNumericField T="int" @bind-Value="Model.RaceLength" Step="10" Label="RaceLength" HelperText="Should round to nearest ten" Class="field-md" />
                        }
                    </MudStack>
                </MudItem>

                <MudItem xs="3">
                    @if (errorValidations.Any())
                    {
                        <MudList>
                            <MudListSubheader>Error messages</MudListSubheader>
                            @foreach (var error in errorValidations)
                            {
                                <MudListItem>
                                    <MudText Color="Color.Error">@error</MudText>
                                </MudListItem>
                            }
                        </MudList>
                    }
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? RaceDialog { get; set; }

    [Parameter] public Race? Race { get; set; }
    [Parameter] public long SeasonId { get; set; }
    [Parameter] public int IncomingRound { get; set; }
    [Parameter] public int DefaultRaceLength { get; set; }
    [Parameter] public List<Climate> Climates { get; set; }

    private MudChip? climateChip;
    private bool variableRaceLength { get; set; }
    private List<string> errorValidations = new();

    private EditRaceModel Model;

    protected override void OnInitialized()
    {
        Model = new EditRaceModel(Race)
            {
                Round = IncomingRound,
                SeasonId = SeasonId,
                RaceLength = DefaultRaceLength,
            };

        if (Model.ClimateId == 0)
            Model.ClimateId = Climates.TakeRandomClimate().Id;
    }

    private void Submit()
    {
        if (climateChip != null)
            Model.ClimateId = (long)climateChip.Value;
        else if (Model.ClimateId == 0)
            Model.ClimateId = Climates.TakeRandomClimate().Id;

        var validations = Model.RunValidations();
        if (validations.Any())
            errorValidations.AddRange(validations);

        if (Model.IsDirty)
        {
            var modRace = Model.Record;
            RaceDialog?.Close(DialogResult.Ok(modRace));
        }
    }

    private void Cancel() => RaceDialog?.Cancel();
}
