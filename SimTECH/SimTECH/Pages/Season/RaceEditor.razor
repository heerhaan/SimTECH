<MudDialog>
    <TitleContent>
        <MudText>Add race</MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            @*
            <MudItem>
                Alternatively use a custom list resorter if the one underneath doesnt work
                Ok, fuck the drop container. We're doing this differently: https://stackoverflow.com/questions/59302823/blazor-re-ordering-a-list-with-drag-and-drop
                <MudDropContainer T="EditStintModel" Items="@_dropZoneItems" ItemDropped="ReorderStint">
                    <ChildContent>
                        <MudPaper>
                            <MudList>
                                <MudListSubheader>Humongous W</MudListSubheader>
                                <MudDropZone T="EditStintModel" AllowReorder="true" />
                            </MudList>
                        </MudPaper>
                    </ChildContent>
                    <ItemRenderer>
                        <MudListItem>
                            <MudStack Row="true">
                                <MudText>@context.Order</MudText>
                                <MudCheckBox @bind-Checked="context.UseDriver" Color="Color.Tertiary" />
                                <MudCheckBox @bind-Checked="context.UseCar" Color="Color.Tertiary" />
                                <MudCheckBox @bind-Checked="context.UseEngine" Color="Color.Tertiary" />
                                <MudCheckBox @bind-Checked="context.UseReliability" Color="Color.Tertiary" />
                                <MudNumericField @bind-Value="context.RngMin" Label="RngMin" />
                                <MudNumericField @bind-Value="context.RngMax" Label="RngMax" />
                            </MudStack>
                        </MudListItem>
                    </ItemRenderer>
                </MudDropContainer>
            </MudItem> *@
            <MudItem>
                <div>
                    <ul ondragover="event.preventDefault();" ondragstart="event.dataTransfer.setData('', event.target.id);">
	                    @foreach (var item in model.Stints.OrderBy(x => x.Order))
	                    {
		                    <li @ondrop="()=>HandleDrop(item)" @key="item">
			                    <div @ondragleave="@(()=> {item.IsDragOver = false;})"
				                    @ondragenter="@(()=>{item.IsDragOver = true;})"
				                    style="@(item.IsDragOver?"border-style: solid none none none; border-color:red;":"")"
                                    @ondragstart="() => draggingItem = item"
				                    @ondragend="()=> draggingItem = null" draggable="true">
                                    stint: @item.Order
                                </div>
		                    </li>
	                    }
                    </ul>
                </div>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="AddStint">Add</MudButton>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? RaceDialog { get; set; }

    [Parameter] public Race? Race { get; set; }

    private EditRaceModel model = new();
    private EditStintModel? draggingItem; // model object which is being dragged

    protected override void OnInitialized()
    {
        if (Race != null)
        {
            model = new EditRaceModel(Race);
        }
    }

    private void AddStint()
    {
        model.Stints.Add(new EditStintModel());
    }

    private void HandleDrop(EditStintModel dropItem)
    {
        // draggingitem -> where the drop occurred
        if (draggingItem is null)
            return;

        // retain the original order for later
        var initialOrder = dropItem.Order;

        // increate all the orders beneath model with 1
        model.Stints.Where(e => e.Order >= initialOrder).ToList().ForEach(e => e.Order++);

        draggingItem.Order = initialOrder;

        int reorder = 0;
        foreach (var model in model.Stints.OrderBy(e => e.Order).ToList())
        {
            model.Order = reorder++; // keeps numbers from 0 to size-1
            model.IsDragOver = false; // removes the drag over
        }
    }

    private void Submit()
    {
        if (model.IsDirty)
        {
            var modRace = model.Record;

            RaceDialog?.Close(DialogResult.Ok(modRace));
        }
    }

    private void Cancel() => RaceDialog?.Cancel();
}
