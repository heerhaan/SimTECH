@page "/addentrants/{SeasonId:long}"
@inject SeasonService SeasonService
@inject SeasonEntrantService EntrantService
@inject ManufacturerService ManufacturerService
@inject NavigationManager Nav

<MudForm Model="@Model">
    <MudPaper Elevation="25" Class="ma-10">
        <MudToolBar>
            @if (_currentStep == 7)
            {
                <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Tertiary" OnClick="AddAllEntrants">Finish adding entrants</MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.NavigateNext" IconColor="Color.Tertiary" OnClick="AdvanceStep" Disabled="@_disableNext">Next step</MudButton>
            }
            <MudSpacer />
            @if (_loading)
            {
                <MudProgressCircular Color="Color.Secondary" Size="Size.Large" Indeterminate="true" />
            }
            @if (_informative != null)
            {
                <MudAlert Severity="Severity.Info" ShowCloseIcon="true" CloseIconClicked="HideInformative">@_informative</MudAlert>
            }
        </MudToolBar>
    </MudPaper>

    <MudContainer Class="@(_currentStep == 1 ? "" : "d-none")">
        <EntrantPicker Model="@Model"/>
    </MudContainer>

    <MudContainer Class="@(_currentStep == 2 ? "" : "d-none")">
        <MudTable T="EditSeasonEngineModel" Items="@Model.SeasonEngines" Hover="true">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Power</MudTh>
                <MudTh>Reliability</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Power">@context.Power</MudTd>
                <MudTd DataLabel="Reliability">@context.Reliability</MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="Name">
                    <MudTextField @bind-Value="@context.Name" Required />
                </MudTd>
                <MudTd DataLabel="Power">
                    <MudNumericField @bind-Value="@context.Power" />
                </MudTd>
                <MudTd DataLabel="Reliability">
                    <MudNumericField @bind-Value="@context.Reliability" />
                </MudTd>
            </RowEditingTemplate>
            <EditButtonContent Context="button">
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" />
            </EditButtonContent>
        </MudTable>
    </MudContainer>

    <MudContainer Class="@(_currentStep == 3 ? "" : "d-none")">
        <MudTable T="EditSeasonTeamModel" Items="@Model.SeasonTeams" Hover="true">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Principal</MudTh>
                <MudTh>Colour</MudTh>
                <MudTh>Accent</MudTh>
                <MudTh>BaseValue</MudTh>
                <MudTh>Aero</MudTh>
                <MudTh>Chassis</MudTh>
                <MudTh>Powertrain</MudTh>
                <MudTh>Reliability</MudTh>
                <MudTh>Manufacturer</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">
                    @if (context.Team != null)
                    {
                        <CountryFlag Code="context.Team.Country" Size="FlagSize.Small" />
                    }
                    @context.Name
                </MudTd>
                <MudTd DataLabel="Principal">@context.Principal</MudTd>
                <MudTd DataLabel="Colour">@context.Colour</MudTd>
                <MudTd DataLabel="Accent">@context.Accent</MudTd>
                <MudTd DataLabel="BaseValue">@context.BaseValue</MudTd>
                <MudTd DataLabel="Aero">@context.Aero</MudTd>
                <MudTd DataLabel="Chassis">@context.Chassis</MudTd>
                <MudTd DataLabel="Powertrain">@context.Powertrain</MudTd>
                <MudTd DataLabel="Reliability">@context.Reliability</MudTd>
                <MudTd DataLabel="Manufacturer">@context.ManufacturerId</MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="Name">
                    <MudTextField @bind-Value="@context.Name" Required />
                </MudTd>
                <MudTd DataLabel="Principal">
                    <MudTextField @bind-Value="@context.Principal" Required />
                </MudTd>
                <MudTd DataLabel="Colour">
                    <MudColorPicker @bind-Text="@context.Colour" DisableAlpha="true" />
                </MudTd>
                <MudTd DataLabel="Accent">
                    <MudColorPicker @bind-Text="@context.Accent" DisableAlpha="true" />
                </MudTd>
                <MudTd DataLabel="BaseValue">
                    <MudNumericField @bind-Value="@context.BaseValue" />
                </MudTd>
                <MudTd DataLabel="Aero">
                    <MudNumericField @bind-Value="@context.Aero" />
                </MudTd>
                <MudTd DataLabel="Chassis">
                    <MudNumericField @bind-Value="@context.Chassis" />
                </MudTd>
                <MudTd DataLabel="Powertrain">
                    <MudNumericField @bind-Value="@context.Powertrain" />
                </MudTd>
                <MudTd DataLabel="Reliability">
                    <MudNumericField @bind-Value="@context.Reliability" />
                </MudTd>
                <MudTd DataLabel="Manufacturer">
                    <MudSelect T="long" @bind-Value="@context.ManufacturerId">
                        @foreach (var manufacturer in manufacturers)
                        {
                            <MudSelectItem Value="manufacturer.Id">@manufacturer.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
            </RowEditingTemplate>
            <EditButtonContent Context="button">
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" />
            </EditButtonContent>
        </MudTable>
        <div>
            <MudText>Preview is in the works here!</MudText>
        </div>
    </MudContainer>

    <MudContainer Class="@(_currentStep == 4 ? "" : "d-none")">
        <MudTable T="EditSeasonDriverModel" Items="@Model.SeasonDrivers" Hover="true">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Number</MudTh>
                <MudTh>Skill</MudTh>
                <MudTh>Reliability</MudTh>
                <MudTh>TeamRole</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">
                    @if (context.Driver != null)
                    {
                        <CountryFlag Code="@context.Driver.Country" Size="FlagSize.Small" />
                        @context.Driver.FullName
                    }
                    else
                    {
                        <span>Unknown (wtf how did you do this?)</span>
                    }
                </MudTd>
                <MudTd DataLabel="Number">@context.Number</MudTd>
                <MudTd DataLabel="Skill">@context.Skill</MudTd>
                <MudTd DataLabel="Reliability">@context.Reliability</MudTd>
                <MudTd DataLabel="TeamRole">@context.TeamRole</MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="Name">
                    @if (context.Driver != null)
                    {
                        <CountryFlag Code="@context.Driver.Country" Size="FlagSize.Small" />
                        @context.Driver.FullName
                    }
                    else
                    {
                        <span>Unknown (wtf how did you do this?)</span>
                    }
                </MudTd>
                <MudTd DataLabel="Number">
                    <MudNumericField @bind-Value="@context.Number" />
                </MudTd>
                <MudTd DataLabel="Skill">
                    <MudNumericField @bind-Value="@context.Skill" />
                </MudTd>
                <MudTd DataLabel="Reliability">
                    <MudNumericField @bind-Value="@context.Reliability" />
                </MudTd>
                <MudTd DataLabel="TeamRole">
                    <MudSelect T="TeamRole" @bind-Value="@context.TeamRole">
                        @foreach (var select in EnumHelper.GetTeamRoleSelection())
                        {
                            <MudSelectItem Value="select.Key">@select.Value</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
            </RowEditingTemplate>
            <EditButtonContent Context="button">
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" />
            </EditButtonContent>
        </MudTable>
    </MudContainer>

    <MudContainer Class="@(_currentStep == 5 ? "" : "d-none")">
        <MudDropContainer T="EditSeasonTeamModel" Items="Model.SeasonTeams" @ref="_dropperTeams" ItemsSelector="@((item,dropzone) => item.BaseEngineId.ToString() == dropzone)" ItemDropped="TeamEngineDropped" Class="d-flex flex-wrap flex-grow-1">
            <ChildContent>
                <MudPaper Class="ma-4 flex-grow-1">
                    <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                        <MudListSubheader>Unassigned teams</MudListSubheader>
                        <MudDropZone T="EditSeasonTeamModel" Identifier="0" Class="flex-grow-1" />
                    </MudList>
                </MudPaper>
                @foreach (var seasonEngine in Model.SeasonEngines)
                {
                    var dropzone = seasonEngine.EngineId.ToString();
                    <MudPaper Class="ma-4 flex-grow-1">
                        <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                            <MudListSubheader>
                                Engine: @seasonEngine.Name
                            </MudListSubheader>
                            <MudDropZone T="EditSeasonTeamModel" Identifier="@dropzone" Class="flex-grow-1" />
                        </MudList>
                    </MudPaper>
                }
            </ChildContent>
            <ItemRenderer>
                <MudListItem Text="@context.Name" />
            </ItemRenderer>
        </MudDropContainer>
    </MudContainer>

    <MudContainer Class="@(_currentStep == 6 ? "" : "d-none")">
        <MudDropContainer T="EditSeasonDriverModel" Items="Model.SeasonDrivers" @ref="_dropperDrivers" ItemsSelector="@((item,dropzone) => item.BaseTeamId.ToString() == dropzone)" ItemDropped="DriverTeamDropped" Class="d-flex flex-wrap flex-grow-1">
            <ChildContent>
                <MudPaper Class="ma-4 flex-grow-1">
                    <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                        <MudListSubheader>Unassigned drivers</MudListSubheader>
                        <MudDropZone T="EditSeasonDriverModel" Identifier="0" Class="flex-grow-1" />
                    </MudList>
                </MudPaper>
                @foreach (var seasonTeam in Model.SeasonTeams)
                {
                    var dropzone = seasonTeam.TeamId.ToString();
                    <MudPaper Class="ma-4 flex-grow-1">
                        <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                            <MudListSubheader>
                                <CountryFlag Code="@seasonTeam.Team.Country" /> @seasonTeam.Name
                            </MudListSubheader>
                            <MudDropZone T="EditSeasonDriverModel" Identifier="@dropzone" Class="flex-grow-1" />
                        </MudList>
                    </MudPaper>
                }
            </ChildContent>
            <ItemRenderer>
                <MudListItem>
                    <CountryFlag Code="@context.Driver.Country" Size="FlagSize.Tiny" />
                    <MudText>@context.Driver.FullName</MudText>
                </MudListItem>
            </ItemRenderer>
        </MudDropContainer>
    </MudContainer>

    <MudContainer Class="@(_currentStep == 7 ? "" : "d-none")">
        <MudStack Row="true">
            <MudTable Items="Model.SeasonEngines">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Participating engines</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Power</MudTh>
                    <MudTh>Reliability</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="Power">@context.Power</MudTd>
                    <MudTd DataLabel="Reliability">@context.Reliability</MudTd>
                </RowTemplate>
            </MudTable>
            <MudTable Items="Model.SeasonTeams">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Participating teams</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Principal</MudTh>
                    <MudTh>Colour</MudTh>
                    <MudTh>Accent</MudTh>
                    <MudTh>BaseValue</MudTh>
                    <MudTh>Aero</MudTh>
                    <MudTh>Chassis</MudTh>
                    <MudTh>Powertrain</MudTh>
                    <MudTh>Reliability</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">
                        @if (context.Team != null)
                        {
                            <CountryFlag Code="context.Team.Country" Size="FlagSize.Small" />
                        }
                        @context.Name
                    </MudTd>
                    <MudTd DataLabel="Principal">@context.Principal</MudTd>
                    <MudTd DataLabel="Colour">@context.Colour</MudTd>
                    <MudTd DataLabel="Accent">@context.Accent</MudTd>
                    <MudTd DataLabel="BaseValue">@context.BaseValue</MudTd>
                    <MudTd DataLabel="Aero">@context.Aero</MudTd>
                    <MudTd DataLabel="Chassis">@context.Chassis</MudTd>
                    <MudTd DataLabel="Powertrain">@context.Powertrain</MudTd>
                    <MudTd DataLabel="Reliability">@context.Reliability</MudTd>
                </RowTemplate>
            </MudTable>
            <MudTable Items="Model.SeasonDrivers">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Participating drivers</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Number</MudTh>
                    <MudTh>Skill</MudTh>
                    <MudTh>Reliability</MudTh>
                    <MudTh>TeamRole</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">
                        @if (context.Driver != null)
                        {
                            <CountryFlag Code="@context.Driver.Country" Size="FlagSize.Small" />
                            @context.Driver.FullName
                        }
                        else
                        {
                            <span>Unknown (wtf how did you do this?)</span>
                        }
                    </MudTd>
                    <MudTd DataLabel="Number">@context.Number</MudTd>
                    <MudTd DataLabel="Skill">@context.Skill</MudTd>
                    <MudTd DataLabel="Reliability">@context.Reliability</MudTd>
                    <MudTd DataLabel="TeamRole">@context.TeamRole</MudTd>
                </RowTemplate>
            </MudTable>
        </MudStack>
    </MudContainer>
</MudForm>

@code {
    [Parameter] public long SeasonId { get; set; }

    public Season Season = new();
    public AddEntrantsModel Model = new();

    private List<Manufacturer> manufacturers = new();
    private MudDropContainer<EditSeasonTeamModel> _dropperTeams;
    private MudDropContainer<EditSeasonDriverModel> _dropperDrivers;

    private bool _loading = false;
    private bool _disableNext = false;
    private string? _informative;
    private int _currentStep = 0;

    protected override async Task OnInitializedAsync()
    {
        Season = await SeasonService.GetSeasonById(SeasonId);
        manufacturers = await ManufacturerService.GetManufacturers();

        _currentStep++;
    }

    private void HideInformative() => _informative = null;

    private void ToggleLoader() => _loading = !_loading;

    private void AdvanceStep()
    {
        ToggleLoader();

        switch (_currentStep)
        {
            case 1:
                {
                    foreach (var engine in Model.BaseEngines)
                    {
                        // TODO: Retrieve stats from previous season engine
                        Model.SeasonEngines.Add(new EditSeasonEngineModel() { EngineId = engine.Id, Name = engine.Name, SeasonId = Season.Id });
                    }
                    _informative = "The following engines are selected for the upcoming season, if you wish so then the info can be edited in-line";
                }
                break;
            case 2:
                {
                    foreach (var team in Model.BaseTeams)
                    {
                        // TODO: Retrieve stats from previous season team
                        Model.SeasonTeams.Add(new EditSeasonTeamModel() { TeamId = team.Id, SeasonId = Season.Id, Team = team });
                    }
                    _informative = "The following teams are selected for the upcoming season, if you wish so then the info can be edited in-line";
                }
                break;
            case 3:
                {
                    foreach (var driver in Model.BaseDrivers)
                    {
                        // TODO: Retrieve stats from previous season driver
                        Model.SeasonDrivers.Add(new EditSeasonDriverModel() { DriverId = driver.Id, SeasonId = Season.Id, Driver = driver });
                    }
                    _informative = "The following drivers are selected for the upcoming season, if you wish so then the info can be edited in-line";
                }
                break;
            case 4:
                RefreshTeamEngine();
                break;
            case 5:
                RefreshDriverTeam();
                break;
            default:
                break;
        }

        _currentStep++;
        ToggleLoader();
    }

    private void TeamEngineDropped(MudItemDropInfo<EditSeasonTeamModel> dropItem)
    {
        dropItem.Item.BaseEngineId = long.Parse(dropItem.DropzoneIdentifier);
    }

    private void RefreshTeamEngine()
    {
        //update the binding to the container
        StateHasChanged();

        //the container refreshes the internal state
        _dropperTeams.Refresh();
    }

    private void DriverTeamDropped(MudItemDropInfo<EditSeasonDriverModel> dropItem)
    {
        dropItem.Item.BaseTeamId = long.Parse(dropItem.DropzoneIdentifier);
    }

    private void RefreshDriverTeam()
    {
        //update the binding to the container
        StateHasChanged();

        //the container refreshes the internal state
        _dropperDrivers.Refresh();
    }

    async Task AddAllEntrants()
    {
        var allEntrants = Model.CombineEntrantModels();

        var rootEntrants = allEntrants.Select(e => e.Record).ToList();

        await EntrantService.PersistSeasonEntrants(rootEntrants);

        Nav.NavigateTo($"/overview/{SeasonId}");
    }
}
