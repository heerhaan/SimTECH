@using MudBlazor.Utilities

<MudDialog>
    <TitleContent>
        <MudText>Adding multiple of these bad boys</MudText>
    </TitleContent>
    <DialogContent>
        @if (errorValidations.Any())
        {
            <MudPaper Class="pa-2">
                <MudList>
                    <MudListSubheader>
                        <MudText Typo="Typo.subtitle1">Error messages</MudText>
                    </MudListSubheader>
                    @foreach (var error in errorValidations)
                    {
                        <MudListItem>
                            <MudText Color="Color.Error">@error</MudText>
                        </MudListItem>
                    }
                </MudList>
            </MudPaper>
        }
        <MudContainer Class="@(stepIndex == 0 ? string.Empty : "d-none")">
            <MudPaper MinWidth="1000px">
                <MudTable T="Track" @bind-SelectedItems="selectedTracks" Items="@Tracks" MultiSelection="true" Hover="true">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Country</MudTh>
                        <MudTh>Length</MudTh>
                        <MudTh>AER.</MudTh>
                        <MudTh>CHA.</MudTh>
                        <MudTh>POW.</MudTh>
                        <MudTh>QUA.</MudTh>
                        <MudTh>DEF.</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudText>@context.Name</MudText>
                        </MudTd>
                        <MudTd>
                            <CountryNamedFlag Code="@context.Country" Size="ElementSize.Small" Reverse="true" />
                        </MudTd>
                        <MudTd>
                            <MudText Typo="Typo.caption">@(context.Length)Km</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText>@(context.AeroMod.ToString("F2"))x</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText>@(context.ChassisMod.ToString("F2"))x</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText>@(context.PowerMod.ToString("F2"))x</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText>@(context.QualifyingMod.ToString("F2"))x</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText>@(context.DefenseMod.ToString("F2"))x</MudText>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudContainer>
        <MudContainer Class="@(stepIndex == 1 ? string.Empty : "d-none")">
            <MudPaper MinWidth="1000px">
                <MudTable T="EditRaceModel" Items="@addedRaces.OrderBy(e => e.Round)" EditTrigger="TableEditTrigger.RowClick" Hover="true">
                    <HeaderContent>
                        <MudTh>Round</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Length</MudTh>
                        <MudTh>Weather</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudText Typo="Typo.caption">@context.Round</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText>@context.Name</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText>@(context.RaceLength)km</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText>@(Climates.Find(e => e.Id == context.ClimateId)?.Terminology ?? "Unknown")</MudText>
                        </MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd>
                            <MudText Typo="Typo.caption">@context.Round</MudText>
                        </MudTd>
                        <MudTd>
                            <MudTextField @bind-Value="context.Name" />
                        </MudTd>
                        <MudTd>
                            <MudNumericField T="int"
                                             @bind-Value="context.RaceLength"
                                             Step="10"
                                             Label="RaceLength"
                                             HelperText="Should round to nearest ten"
                                             Class="field-md" />
                        </MudTd>
                        <MudTd>
                            <MudSelect T="long" @bind-Value="context.ClimateId">
                                @foreach (var climate in Climates)
                                {
                                    <MudSelectItem Value="climate.Id">@climate.Terminology</MudSelectItem>
                                }
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
            </MudPaper>
        </MudContainer>
        <MudContainer Class="@(stepIndex == 2 ? string.Empty : "d-none")">
            <MudText Typo="Typo.body2" Color="Color.Info">
                Drag to re-order in which round the races occur.<br/>
                Don't worry about the numeric round value, this will be restored properly when storing the races.
            </MudText>
            <MudPaper MinWidth="1000px">
                <MudDropContainer @ref="reorderContainer"
                                  T="EditRaceModel"
                                  Items="@addedRaces"
                                  ItemsSelector="@((item, zone) => item.SeasonId.ToString() == zone)"
                                  ItemDropped="ReorderItems">
                    <ChildContent>
                        <MudPaper>
                            <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                                <MudListSubheader>Reorder races (just drag)</MudListSubheader>
                                <MudDropZone T="EditRaceModel" Identifier="@(SeasonId.ToString())" AllowReorder="true" Class="flex-grow-1" />
                            </MudList>
                        </MudPaper>
                    </ChildContent>
                    <ItemRenderer>
                        <MudListItem Text="@($"{context.Name} [Round:{context.Round}]")" />
                    </ItemRenderer>
                </MudDropContainer>
            </MudPaper>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        @if (stepIndex == 2)
        {
            <MudButton Color="Color.Primary" OnClick="Submit">Save</MudButton>
        }
        else
        {
            <MudButton Color="Color.Primary" OnClick="Next">Next</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? RaceDialog { get; set; }

    [Parameter] public List<Track> Tracks { get; set; }
    [Parameter] public long SeasonId { get; set; }
    [Parameter] public int OffsetRound { get; set; }
    [Parameter] public int DefaultRaceLength { get; set; }
    [Parameter] public List<Climate> Climates { get; set; }

    private MudDropContainer<EditRaceModel> reorderContainer;

    private HashSet<Track> selectedTracks = new();
    private List<EditRaceModel> addedRaces = new();
    private List<string> errorValidations = new();

    int stepIndex = 0;

    private void Next()
    {
        stepIndex++;

        if (stepIndex == 2)
        {
            StateHasChanged();
            reorderContainer.Refresh();
            return;
        }

        var climateIdentifiers = Climates.Select(e => e.Id).ToArray();

        foreach (var track in selectedTracks)
        {
            addedRaces.Add(new EditRaceModel
            {
                Round = OffsetRound++,
                Name = track.Name, // TODO: find previously used name for this track, perhaps
                RaceLength = DefaultRaceLength,
                TrackId = track.Id,
                SeasonId = SeasonId,
                ClimateId = climateIdentifiers.TakeRandomItem(),
            });
        }
    }

    private void ReorderItems(MudItemDropInfo<EditRaceModel> item)
    {
        addedRaces.UpdateOrder(item, e => e.Round);
    }

    private void Submit()
    {
        if (!RunValidations())
            return;

        var raceRecords = addedRaces.Select(e => e.Record).ToList();

        RaceDialog?.Close(DialogResult.Ok(raceRecords));
    }

    private void Cancel() => RaceDialog?.Cancel();

    private bool RunValidations()
    {
        var isValid = true;

        int roundIndex = 0;
        foreach (var model in addedRaces.OrderBy(e => e.Round))
        {
            model.Round = ++roundIndex;

            if ((model.RaceLength % 10) != 0)
            {
                errorValidations.Add("Race length should be a factor of 10");
                isValid = false;
                break;
            }
        }

        return isValid;
    }
}
