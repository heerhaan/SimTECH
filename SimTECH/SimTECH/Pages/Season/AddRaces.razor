<MudDialog>
    <TitleContent>
        <MudText>Adding multiple of these bad boys</MudText>
    </TitleContent>
    <DialogContent>
        @if (errorValidations.Any())
        {
            <MudPaper Class="pa-2">
                <MudList>
                    <MudListSubheader>
                        <MudText Typo="Typo.subtitle1">Error messages</MudText>
                    </MudListSubheader>
                    @foreach (var error in errorValidations)
                    {
                        <MudListItem>
                            <MudText Color="Color.Error">@error</MudText>
                        </MudListItem>
                    }
                </MudList>
            </MudPaper>
        }
        <MudContainer Class="@(lastStep ? "d-none" : string.Empty)">
            <MudPaper>
                <MudTable T="Track" @bind-SelectedItems="@selectedTracks" Items="@Tracks" MultiSelection="true" Hover="true">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Country</MudTh>
                        <MudTh>Length</MudTh>
                        <MudTh>Modifiers (A/C/P/Q)</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudText>@context.Name</MudText>
                        </MudTd>
                        <MudTd>
                            <CountryNamedFlag Code="@context.Country" Size="FlagSize.Small" />
                        </MudTd>
                        <MudTd>
                            <MudText Typo="Typo.caption">@(context.Length)Km</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText>@(context.AeroMod)x | @(context.ChassisMod)x | @(context.PowerMod)x | @(context.QualifyingMod)x</MudText>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudContainer>
        <MudContainer Class="@(lastStep ? string.Empty : "d-none")">
            <MudPaper MinWidth="1000px">
                <MudTable T="EditRaceModel" Items="addedRaces.OrderBy(e => e.Round)" EditTrigger="TableEditTrigger.RowClick" Hover="true">
                    <HeaderContent>
                        <MudTh>Round</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Length</MudTh>
                        <MudTh>Weather</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudText Typo="Typo.caption">@context.Round</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText>@context.Name</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText>@(context.RaceLength)Km</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText>@(Climates.Find(e => e.Id == context.ClimateId)?.Terminology ?? "Unknown")</MudText>
                        </MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd>
                            <MudText Typo="Typo.caption">@context.Round</MudText>
                        </MudTd>
                        <MudTd>
                            <MudTextField @bind-Value="context.Name" />
                        </MudTd>
                        <MudTd>
                            <MudNumericField T="int" @bind-Value="context.RaceLength" Step="10" Label="RaceLength" HelperText="Should round to nearest ten" Class="field-md" />
                        </MudTd>
                        <MudTd>
                            <MudSelect T="long" @bind-Value="context.ClimateId">
                                @foreach (var climate in Climates)
                                {
                                    <MudSelectItem Value="climate.Id">
                                        @climate.Terminology
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
            </MudPaper>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        @if (!lastStep)
        {
            <MudButton Color="Color.Primary" OnClick="Next">Next</MudButton>
        }
        else
        {
            <MudButton Color="Color.Primary" OnClick="Submit">Save</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    protected MudDialogInstance? RaceDialog { get; set; }

    [Parameter]
    public List<Track> Tracks { get; set; }
    [Parameter]
    public long SeasonId { get; set; }
    [Parameter]
    public int OffsetRound { get; set; }
    [Parameter]
    public int DefaultRaceLength { get; set; }
    [Parameter]
    public List<Climate> Climates { get; set; }

    private HashSet<Track> selectedTracks = new();
    private List<EditRaceModel> addedRaces = new();
    private List<string> errorValidations = new();

    bool lastStep = false;

    private void Next()
    {
        var climateIdentifiers = Climates.Select(e => e.Id).ToArray();

        foreach (var track in selectedTracks)
        {
            addedRaces.Add(new EditRaceModel
            {
                Round = OffsetRound++,
                Name = track.Name, // TODO: find previously used name for this track, perhaps
                RaceLength = DefaultRaceLength,
                TrackId = track.Id,
                SeasonId = SeasonId,
                ClimateId = climateIdentifiers.TakeRandomItem(),
            });
        }

        lastStep = true;
    }

    private void Submit()
    {
        if (!RunValidations())
            return;

        var raceRecords = addedRaces.Select(e => e.Record).ToList();

        RaceDialog?.Close(DialogResult.Ok(raceRecords));
    }

    private void Cancel() => RaceDialog?.Cancel();

    private bool RunValidations()
    {
        var isValid = true;

        foreach (var model in addedRaces)
        {
            if ((model.RaceLength % 10) != 0)
            {
                errorValidations.Add("Race length should be a factor of 10");
                isValid = false;
                break;
            }
        }

        return isValid;
    }
}
