<MudTabs Outlined="true" Centered="true">
    <MudTabPanel Text="Standings">
        <MudGrid Spacing="2" id="standings-numerical-overview">
            <MudItem xs="12">
                <MudPaper Height="75px" Class="pa-2">
                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <span style="width:10%"></span>
                        <MudText Typo="Typo.h3">Season standings @(Season.Year)</MudText>
                        <ScreenshotButton TargetId="standings-numerical-overview" Styles="@("width:10%")" />
                    </MudStack>
                </MudPaper>
            </MudItem>
            <MudItem xs="6">
                <DriverStandings StandingDrivers="@DriverResultsModel" />
            </MudItem>
            <MudItem xs="6">
                <ConstructorStandings StandingConstructors="@TeamResultsModel" />
            </MudItem>
        </MudGrid>
    </MudTabPanel>
    <MudTabPanel Text="WDC results">
        <DriverResults StandingDrivers="@DriverResultsModel"
                        CountryRounds="@countryRounds" />
    </MudTabPanel>
    <MudTabPanel Text="WCC results">
        <ConstructorResults StandingConstructors="@TeamResultsModel"
                            CountryRounds="@countryRounds" />
    </MudTabPanel>
</MudTabs>

@code {
    [CascadingParameter] public Season Season { get; set; }

    [Parameter] public IEnumerable<SeasonDriver> SeasonDrivers { get; set; } = Enumerable.Empty<SeasonDriver>();
    [Parameter] public IEnumerable<SeasonTeam> SeasonTeams { get; set; } = Enumerable.Empty<SeasonTeam>();
    [Parameter] public IEnumerable<Race> Races { get; set; } = Enumerable.Empty<Race>();
    [Parameter] public IEnumerable<Result> Results { get; set; } = Enumerable.Empty<Result>();

    private List<StandingDriverModel> DriverResultsModel = new();
    private List<StandingTeamModel> TeamResultsModel = new();

    private Dictionary<int, Country> countryRounds = new();

    private bool loading = true;

    protected override void OnInitialized()
    {
        loading = true;

        countryRounds.Clear();
        DriverResultsModel.Clear();
        TeamResultsModel.Clear();

        foreach (var round in Races.OrderBy(e => e.Round))
            countryRounds.Add(round.Round, round.Track?.Country ?? Constants.DefaultCountry);

        int indexer = 0;

        DriverResultsModel = SeasonDrivers
            .OrderByDescending(e => e.Points)
                .ThenByDescending(e => e.HiddenPoints)
            .Select(e =>
                ToDriverResultModel(e, Results.Where(r => r.SeasonDriverId == e.Id).ToList(), ++indexer))
            .ToList();

        indexer = 0;

        TeamResultsModel = SeasonTeams
            .OrderByDescending(e => e.Points)
                .ThenByDescending(e => e.HiddenPoints)
            .Select(e =>
                ToTeamResultModel(e, Results.Where(r => r.SeasonTeamId == e.Id).ToList(), ++indexer))
            .ToList();

        loading = false;
    }

    private StandingDriverModel ToDriverResultModel(SeasonDriver driver, List<Result> results, int position)
    {
        var team = SeasonTeams.FirstOrDefault(e => e.Id == driver.SeasonTeamId);
        return new StandingDriverModel
            {
                Id = driver.Id,
                Position = position,
                Name = driver.Driver.FullName,
                Number = driver.Number,
                Nationality = driver.Driver.Country,
                Colour = team?.Colour ?? "var(--mud-palette-primary)",
                Accent = team?.Accent ?? "var(--mud-palette-primary-text)",
                Points = driver.Points,
                HiddenPoints = driver.HiddenPoints,
                Mark = driver.Driver.Mark,
                SeasonTeamId = driver.SeasonTeamId,
                Team = team?.Team?.Name ?? "None",

                ResultCells = results.Select(ToResultCell).ToList(),
            };
    }

    private StandingTeamModel ToTeamResultModel(SeasonTeam team, List<Result> results, int position)
    {
        return new StandingTeamModel
            {
                Id = team.Id,
                Position = position,
                Name = team.Team.Name,
                Principal = team.Principal,
                Nationality = team.Team.Country,
                Colour = team.Colour,
                Accent = team.Accent,
                Points = team.Points,
                HiddenPoints = team.HiddenPoints,
                Mark = team.Team.Mark,

                ResultCells = results.Select(ToResultCell).ToList() ?? new(),
            };
    }

    private StandingResultCell ToResultCell(Result result)
    {
        return new StandingResultCell
            {
                Position = result.Position,
                Status = result.Status,
                Round = Races.Single(e => e.Id == result.RaceId).Round,
                Pole = result.Grid == 1,
                FL = result.FastestLap,
            };
    }
}
