<MudTabs Outlined="true" Centered="true">
    <MudTabPanel Text="Standings">
        <MudGrid Spacing="2" id="standings-numerical-overview">
            <MudItem xs="12">
                <MudPaper Height="75px" Class="pa-2">
                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <span class="btn-md"></span>
                        <MudText Typo="Typo.h3">Season standings for @OverviewModel.Season.Year</MudText>
                        <ScreenshotButton TargetId="standings-numerical-overview" Class="btn-md" />
                    </MudStack>
                </MudPaper>
            </MudItem>
            <MudItem xs="6">
                <DriverStandings StandingDrivers="@driverResultsModel" />
            </MudItem>
            <MudItem xs="6">
                <ConstructorStandings StandingConstructors="@teamResultsModel" />
            </MudItem>
        </MudGrid>
    </MudTabPanel>
    <MudTabPanel Text="WDC results">
        <DriverResults StandingDrivers="@driverResultsModel"
                       CountryRounds="@countryRounds" />
    </MudTabPanel>
    <MudTabPanel Text="WCC results">
        <ConstructorResults StandingConstructors="@teamResultsModel"
                            CountryRounds="@countryRounds" />
    </MudTabPanel>
</MudTabs>

@code {
    [CascadingParameter] public OverviewModel OverviewModel { get; set; }

    List<StandingDriverModel> driverResultsModel = new();
    List<StandingTeamModel> teamResultsModel = new();
    Dictionary<int, Country> countryRounds = new();

    protected override void OnInitialized()
    {
        countryRounds.Clear();
        driverResultsModel.Clear();
        teamResultsModel.Clear();

        var classResults = OverviewModel.ClassResults();

        foreach (var round in OverviewModel.Races.OrderBy(e => e.Round))
            countryRounds.Add(round.Round, round.Track?.Country ?? Generals.DefaultCountry);

        int indexer = 0;

        driverResultsModel = OverviewModel.ClassDrivers()
            .OrderByDescending(e => e.Points)
                .ThenByDescending(e => e.HiddenPoints)
            .Select(e =>
                ToDriverResultModel(e, classResults.Where(r => r.SeasonDriverId == e.Id).ToList(), ++indexer))
            .ToList();

        indexer = 0;

        teamResultsModel = OverviewModel.ClassTeams()
            .OrderByDescending(e => e.Points)
                .ThenByDescending(e => e.HiddenPoints)
            .Select(e =>
                ToTeamResultModel(e, classResults.Where(r => r.SeasonTeamId == e.Id).ToList(), ++indexer))
            .ToList();
    }

    private StandingDriverModel ToDriverResultModel(SeasonDriver driver, List<Result> results, int position)
    {
        var team = OverviewModel.SeasonTeams.FirstOrDefault(e => e.Id == driver.SeasonTeamId);
        return new StandingDriverModel
            {
                Id = driver.Id,
                Position = position,
                Name = driver.Driver.FullName,
                Number = driver.Number,
                Nationality = driver.Driver.Country,
                Colour = team?.Colour ?? "var(--mud-palette-primary)",
                Accent = team?.Accent ?? "var(--mud-palette-primary-text)",
                Points = driver.Points,
                HiddenPoints = driver.HiddenPoints,
                Mark = driver.Driver.Mark,
                SeasonTeamId = driver.SeasonTeamId,
                Team = team?.Team?.Name ?? "None",

                ResultCells = results.Select(ToResultCell).ToList(),
            };
    }

    private StandingTeamModel ToTeamResultModel(SeasonTeam team, List<Result> results, int position)
    {
        return new StandingTeamModel
            {
                Id = team.Id,
                Position = position,
                Name = team.Name,
                Principal = team.Principal,
                Nationality = team.Team.Country,
                Colour = team.Colour,
                Accent = team.Accent,
                Points = team.Points,
                HiddenPoints = team.HiddenPoints,
                Mark = team.Team.Mark,

                ResultCells = results.Select(ToResultCell).ToList() ?? new(),
            };
    }

    private StandingResultCell ToResultCell(Result result)
    {
        return new StandingResultCell
            {
                Position = result.Position,
                Status = result.Status,
                Round = OverviewModel.Races.Single(e => e.Id == result.RaceId).Round,
                Pole = result.Grid == 1,
                FL = result.FastestLap,
            };
    }
}
