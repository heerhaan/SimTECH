@inject SeasonEntrantService _entrantService
@inject RaceService _raceService
@inject IDialogService _dialog

@if (!loading)
{
    <MudTabs Outlined="true" Centered="true">
        <MudTabPanel Text="Standings">
            <MudGrid Spacing="2" id="standings-numerical-overview">
                <MudItem xs="12">
                    <MudPaper Height="75px" Class="pa-2">
                        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <span style="width:10%"></span>
                            <MudText Typo="Typo.h3">Season standings @(Season.Year)</MudText>
                            <ScreenshotButton TargetId="standings-numerical-overview" Styles="@("width:10%")" />
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="6">
                    <DriverStandings StandingDrivers="@DriverResultsModel" />
                </MudItem>
                <MudItem xs="6">
                    <ConstructorStandings StandingConstructors="@TeamResultsModel" />
                </MudItem>
            </MudGrid>
        </MudTabPanel>
        <MudTabPanel Text="WDC results">
            <DriverResults StandingDrivers="@DriverResultsModel"
                           CountryRounds="@countryRounds"/>
        </MudTabPanel>
        <MudTabPanel Text="WCC results">
            <ConstructorResults StandingConstructors="@TeamResultsModel"
                                CountryRounds="@countryRounds" />
        </MudTabPanel>
    </MudTabs>
}

@code {
    [CascadingParameter] public Season Season { get; set; }

    List<SeasonDriver> SeasonDrivers { get; set; }
    List<SeasonTeam> SeasonTeams { get; set; }
    List<Race> Races { get; set; }

    List<StandingDriverModel> DriverResultsModel { get; set; }
    List<StandingTeamModel> TeamResultsModel { get; set; }

    Dictionary<int, Country> countryRounds = new();

    bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        Races = await _raceService.GetRacesBySeason(Season.Id);
        SeasonDrivers = await _entrantService.GetSeasonDriversWithResults(Season.Id);
        SeasonTeams = await _entrantService.GetSeasonTeamsWithResults(Season.Id);

        foreach (var round in Races.OrderBy(e => e.Round))
            countryRounds.Add(round.Round, round.Track?.Country ?? Constants.DefaultCountry);

        int indexer = 0;

        DriverResultsModel = SeasonDrivers
            .OrderByDescending(e => e.Points)
                .ThenByDescending(e => e.HiddenPoints)
            .Select(e => ToDriverResultModel(e, ++indexer))
            .ToList();

        indexer = 0;

        TeamResultsModel = SeasonTeams
            .OrderByDescending(e => e.Points)
                .ThenByDescending(e => e.HiddenPoints)
            .Select(e => ToTeamResultModel(e, ++indexer))
            .ToList();

        loading = false;
    }

    private StandingDriverModel ToDriverResultModel(SeasonDriver driver, int position)
    {
        var driverTeam = SeasonTeams.Find(e => e.Id == driver.SeasonTeamId);
        return new StandingDriverModel
            {
                Id = driver.Id,
                Position = position,
                Name = driver.Driver.FullName,
                Number = driver.Number,
                Nationality = driver.Driver.Country,
                Colour = driverTeam?.Colour ?? "var(--mud-palette-primary)",
                Accent = driverTeam?.Accent ?? "var(--mud-palette-primary-text)",
                Points = driver.Points,
                HiddenPoints = driver.HiddenPoints,
                SeasonTeamId = driver.SeasonTeamId,
                Team = driverTeam?.Team?.Name ?? "None",

                ResultCells = driver.Results.Select(ToResultCell).ToList(),
            };
    }

    private StandingTeamModel ToTeamResultModel(SeasonTeam team, int position)
    {
        return new StandingTeamModel
            {
                Id = team.Id,
                Position = position,
                Name = team.Team.Name,
                Principal = team.Principal,
                Nationality = team.Team.Country,
                Colour = team.Colour,
                Accent = team.Accent,
                Points = team.Points,
                HiddenPoints = team.HiddenPoints,

                ResultCells = team.Results?.Select(ToResultCell).ToList() ?? new(),
            };
    }

    private StandingResultCell ToResultCell(Result result)
    {
        return new StandingResultCell
            {
                Position = result.Position,
                Status = result.Status,
                Round = Races.Single(e => e.Id == result.RaceId).Round,
                Pole = result.Grid == 1,
                FL = result.FastestLap,
            };
    }
}
