@page "/components/{SeasonId:long}"
@inject BreadcrumbProvider _bread
@inject IncidentService _incidentService
@inject SeasonService _seasonService

<PageTitle>Components</PageTitle>

<MudContainer>
    @if (!loading)
    {
        <MudGrid>
            <MudItem xs="9">
                <MudPaper Class="mud-height-full">
                    <MudPaper MinHeight="60px" Class="pa-4">
                        <MudText Typo="Typo.h3">Components</MudText>
                    </MudPaper>
                    <MudTable Items="@driverComponentModel" Dense="true">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh Class="number-col">NO</MudTh>
                            @foreach (var incident in incidents.Where(e => e.HasLimit()).OrderBy(e => e.Name))
                            {
                                <MudTh Class="number-col">@incident.Name</MudTh>
                            }
                            <MudTh Class="number-col">DNF</MudTh>
                            <MudTh Class="number-col">DSQ</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>
                                <MudText>@context.Name</MudText>
                            </MudTd>
                            <MudTd Class="number-col">
                                <NumberDisplay Colour="@context.Colour" Accent="@context.Accent">@context.Number</NumberDisplay>
                            </MudTd>
                            @foreach (var incident in incidents.Where(e => e.HasLimit()).OrderBy(e => e.Name))
                            {
                                <MudTd Class="number-col">
                                    <MudText Typo="Typo.caption">
                                        @(context.DriverIncidents.ContainsKey(incident.Id) ? context.DriverIncidents[incident.Id] : 0)
                                    </MudText>
                                </MudTd>
                            }
                            <MudTd Class="number-col">
                                <MudText Typo="Typo.caption">@context.TotalDnf</MudText>
                            </MudTd>
                            <MudTd Class="number-col">
                                <MudText Typo="Typo.caption">@context.TotalDsq</MudText>
                            </MudTd>
                        </RowTemplate>
                        <FooterContent>
                            <MudTd>LIMIT</MudTd>
                            <MudTd></MudTd>
                            @foreach (var incident in incidents.Where(e => e.HasLimit()).OrderBy(e => e.Name))
                            {
                                <MudTd>@incident.Limit</MudTd>
                            }
                            <MudTd></MudTd>
                            <MudTd></MudTd>
                        </FooterContent>
                    </MudTable>
                </MudPaper>
            </MudItem>
            <MudItem xs="3">
                <MudPaper Class="pa-4 mud-height-full">
                    <MudText Typo="Typo.h5">Consumed penalties</MudText>
                    <MudList>
                        @foreach (var consum in consumedPenalties.OrderBy(e => e.Key))
                        {
                            <MudListItem Text="@consum.Key" InitiallyExpanded="true">
                                <NestedList>
                                    @foreach (var incidentale in consum.Value)
                                    {
                                        <MudListItem>
                                            <MudText>
                                                @incidentale.Consumed | @incidentale.Incident | @incidentale.Punishment
                                            </MudText>
                                        </MudListItem>
                                    }
                                </NestedList>
                            </MudListItem>
                        }
                    </MudList>
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    [Parameter] public long SeasonId { get; set; }

    private List<Incident> incidents;
    private List<PartsUsedByDriver> driverComponentModel;
    private Dictionary<string, List<PenaltyConsoom>> consumedPenalties = new();

    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: "/"),
            new BreadcrumbItem("Seasons", href: "seasons}"),
            new BreadcrumbItem("Overview", href: $"overview/{SeasonId}"),
            new BreadcrumbItem("Components", href: $"components/{SeasonId}", disabled: true),
        });

        incidents = await _incidentService.GetIncidents();
        driverComponentModel = await _seasonService.GetPartsUsageModel(SeasonId);

        BuildConsumedPenalties();

        loading = false;
    }

    private void BuildConsumedPenalties()
    {
        foreach (var driver in driverComponentModel.Where(e => e.GivenPenalties.Any()))
        {
            var consoom = new List<PenaltyConsoom>();
            foreach (var penalty in driver.GivenPenalties)
            {
                var inchident = incidents.Find(x => x.Id == penalty.IncidentId);
                consoom.Add(new PenaltyConsoom
                {
                    Consumed = penalty.Consumed,
                    Incident = inchident?.Name ?? "[Unknown]",
                    Punishment = inchident?.Punishment ?? 0,
                });
            }
            consumedPenalties.Add(driver.Name, consoom);
        }
    }

    internal class PenaltyConsoom
    {
        public bool Consumed { get; set; }
        public string Incident { get; set; }
        public int Punishment { get; set; }
    }
}
