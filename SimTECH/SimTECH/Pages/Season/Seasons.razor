@page "/seasons"
@inject NavigationManager Nav
@inject LeagueService LeagueService
@inject SeasonService SeasonService
@inject IDialogService DialogService

<PageTitle>Seasons</PageTitle>

<MudContainer>
    @if (SeasonList != null)
    {
        <MudDataGrid T="SeasonListModel" Items="@SeasonList" Bordered="true" Dense="true" Class="my-2">
            <ToolBarContent>
                <MudText Typo="Typo.h4">Seasons</MudText>
                <MudSpacer />
                <MudButton Variant="Variant.Text" Color="Color.Success" OnClick="NewSeason">New</MudButton>
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="e => e.Year" />
                <PropertyColumn Property="e => e.State" />
                <TemplateColumn Title="Leaders">
                    <CellTemplate>
                        @if (context.Item.LeadingDriver == null)
                        {
                            <MudText>No leading driver</MudText>
                        }
                        else
                        {
                            <MudText>@context.Item.LeadingDriver.Name [context.Item.LeadingDriver.Colour] [context.Item.LeadingDriver.Accent]</MudText>
                        }
                    </CellTemplate>
                </TemplateColumn>
@*                <TemplateColumn Title="League">
                    <CellTemplate>
                        <MudText>@(Leagues.Find(e => e.Id == context.Item.LeagueId)?.Name ?? "Unknown?!")</MudText>
                    </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn CellClass="d-flex justify end">
                        <CellTemplate>
                            <MudButtonGroup Size="@Size.Small">
                                <MudIconButton Icon="@Icons.Material.Outlined.ContentCopy" OnClick="@(async () => await CopySeason(context.Item))" />
                                <MudIconButton Icon="@Icons.Material.Outlined.Logout" OnClick="@(() => GoToOverview(context.Item.Id))" />
                                @if (context.Item.State == State.Concept)
                            {
                                <MudIconButton Color="Color.Error" Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateSeason(context.Item))" />
                                <MudIconButton Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(async() => await DeleteSeason(context.Item))" />
                            }
                        </MudButtonGroup>
                    </CellTemplate>
                </TemplateColumn>*@
            </Columns>
            <PagerContent>
                <MudDataGridPager T="SeasonListModel" />
            </PagerContent>
        </MudDataGrid>
    }
    
</MudContainer>

@code {
    private List<Season> SeasonData = new();
    private List<League> Leagues = new();

    private List<SeasonListModel> SeasonList;

    protected override async Task OnInitializedAsync()
    {
        SeasonData = await SeasonService.GetSeasons();
        Leagues = await LeagueService.GetLeagues();

        SeasonList = await SeasonService.GetSeasonList();
    }

    // Arguably delete the copy, use by default the last season as a base
    private async Task NewSeason() => await UpdateSeason(new Season());
    private async Task CopySeason(Season season) => await UpdateSeason(season, true);
    private async Task UpdateSeason(Season item, bool isCopied = false)
    {
        var parameters = new DialogParameters { ["Season"] = item, ["Leagues"] = Leagues, ["Copied"] = isCopied };

        var dialog = await DialogService.ShowAsync<SeasonEditor>("Modify season", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Season updatedItem)
        {
            await SeasonService.UpdateSeason(updatedItem);
            Nav.NavigateTo($"/overview/{updatedItem.Id}");
        }
    }

    private async Task DeleteSeason(Season season)
    {
        var result = await SeasonService.DeleteSeason(season);
        if (result)
        {
            SeasonData.Remove(season);
        }
    }

    private void GoToOverview(long seasonId)
    {
        Nav.NavigateTo($"/overview/{seasonId}");
    }

    private class SeasonOverview
    {
        public int Year { get; set; }

        // Leading driver
        // Leading team
    }
}
