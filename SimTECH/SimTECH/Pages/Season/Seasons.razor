@page "/seasons"
@inject BreadcrumbProvider _bread
@inject NavigationManager Nav
@inject LeagueService LeagueService
@inject SeasonService SeasonService
@inject IDialogService DialogService

<PageTitle>Seasons</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    @if (SeasonList != null)
    {
        <MudPaper MinHeight="60px">
            <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4">
                <MudText Typo="Typo.h3">Seasons</MudText>
                <MudSpacer />
                <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" OnClick="NewSeason">New</MudButton>
            </MudStack>
        </MudPaper>
        <MudDataGrid T="SeasonListModel" Items="@SeasonList.OrderByDescending(e => e.Year)" Dense="true">
            <Columns>
                <PropertyColumn Property="e => e!.Year" />
                <TemplateColumn T="SeasonListModel" Title="NO" SortBy="e => e!.DriverNumber" HeaderClass="number-col hide-sort-icons" CellClass="number-col">
                    <CellTemplate>
                        <NumberDisplay Colour="@Constants.PrimaryColourDefault"
                                       Accent="@Constants.DefaultAccent">
                            @context.Item.DriverNumber
                        </NumberDisplay>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn T="SeasonListModel" Title="Leading driver">
                    <CellTemplate>
                        <MudStack Row="true" AlignItems="AlignItems.Center">
                            <MudText Class="overflow-hider">@context.Item.DriverName</MudText>
                            <MudSpacer />
                            <CountryFlag Code="context.Item.DriverNationality" Size="ElementSize.Small" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn T="SeasonListModel" Sortable="false" Class="accent-cell">
                    <CellTemplate>
                        <span class="smol-accent" style="@(ViewHelper.SetBackgroundColour(context.Item.TeamColour))"></span>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn T="SeasonListModel" Title="Leading team">
                    <CellTemplate>
                        <MudStack Row="true" AlignItems="AlignItems.Center">
                            <MudText Class="overflow-hider">@context.Item.TeamName</MudText>
                            <MudSpacer />
                            <CountryFlag Code="context.Item.TeamNationality" Size="ElementSize.Small" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="e => e!.League" />
                <PropertyColumn Property="e => e!.State" />
                <TemplateColumn T="SeasonListModel" Sortable="false">
                    <CellTemplate>
                        <MudButtonGroup Size="@Size.Small">
                            <MudIconButton Icon="@Icons.Material.Outlined.ContentCopy" OnClick="@(() => CopySeason(context.Item.Id))" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Logout" OnClick="@(() => GoToOverview(context.Item.Id))" />
                            @if (context.Item.State == State.Concept)
                            {
                                <MudIconButton Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(async() => await DeleteSeason(context.Item.Id))" />
                            }
                        </MudButtonGroup>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="SeasonListModel" />
            </PagerContent>
        </MudDataGrid>
    }
</MudContainer>

@code {
    List<Season> SeasonData;
    List<League> LeagueData;
    List<SeasonListModel> SeasonList;

    protected override async Task OnInitializedAsync()
    {
        _bread.Reset();
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Seasons", href: "seasons", disabled: true),
        });

        SeasonData = await SeasonService.GetSeasons();
        LeagueData = await LeagueService.GetLeagues();
        SeasonList = await SeasonService.GetSeasonList();
    }

    private async Task NewSeason()
    {
        EditSeasonModel model;

        var previousSeason = SeasonData.OrderByDescending(e => e.Year).FirstOrDefault();

        if (previousSeason != null)
        {
            model = new EditSeasonModel(previousSeason);
            model.ResetIdentifierFields();
            model.Year++;
        }
        else
        {
            model = new EditSeasonModel(null);
        }

        await EditSeason(model);
    }

    private async Task CopySeason(long seasonId)
    {
        var copyingSeason = SeasonData.Single(e => e.Id == seasonId);
        var model = new EditSeasonModel(copyingSeason);
        model.ResetIdentifierFields();
        model.Year++;

        await EditSeason(model);
    }

    private async Task EditSeason(EditSeasonModel model)
    {
        var parameters = new DialogParameters { ["Model"] = model, ["Leagues"] = LeagueData };

        var dialog = await DialogService.ShowAsync<SeasonEditor>("Modify season", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Season updatedItem)
        {
            await SeasonService.UpdateSeason(updatedItem);
            Nav.NavigateTo($"/overview/{updatedItem.Id}");
        }
    }

    private async Task DeleteSeason(long seasonId)
    {
        var result = await SeasonService.DeleteSeason(seasonId);
        if (result)
        {
            SeasonData.Remove(SeasonData.Single(e => e.Id == seasonId));
        }
    }

    private void GoToOverview(long seasonId) => Nav.NavigateTo($"/overview/{seasonId}");
}
