@page "/seasons"
@inject NavigationManager Nav
@inject SeasonService SeasonService
@inject IDialogService DialogService

<PageTitle>Seasons</PageTitle>

<MudContainer>
    <MudPaper Class="d-flex justify-space-between pa-2 mx-2 my-2">
        <MudText Typo="Typo.h4">Seasons</MudText>
        <MudButton Variant="Variant.Text" Color="Color.Success" OnClick="NewSeason">New</MudButton>
    </MudPaper>
    <MudDataGrid T="Season" Items="@SeasonData" Bordered="true" Dense="true">
        <Columns>
            <PropertyColumn Property="e => e.Year" />
            <PropertyColumn Property="e => e.State" />
            <PropertyColumn Property="e => e.LeagueId" />
            <TemplateColumn CellClass="d-flex justify end">
                <CellTemplate>
                    <MudButtonGroup Size="@Size.Small">
                        <MudIconButton Icon="@Icons.Material.Outlined.ContentCopy" OnClick="@(async () => await UpdateSeason(context.Item))" />
                        <MudIconButton Icon="@Icons.Material.Outlined.Logout" OnClick="@(() => GoToOverview(context.Item.Id))" />
                        @if (context.Item.State == State.Concept)
                        {
                            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteSeason(context.Item))" />
                        }
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Season" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    private bool _readOnly = false;
    private List<Season> SeasonData = new();

    protected override async Task OnInitializedAsync()
    {
        SeasonData = await SeasonService.GetSeasons();
    }

    // Arguably delete the copy, use by default the last season as a base
    private async Task NewSeason() => await UpdateSeason(new Season());
    private async Task CopySeason(Season season) => await UpdateSeason(season, true);
    private async Task UpdateSeason(Season item, bool isCopied = false)
    {
        var parameters = new DialogParameters { ["Season"] = item, ["Copied"] = isCopied };

        var dialog = await DialogService.ShowAsync<SeasonEditor>("Modify season", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Season updatedItem)
        {
            await SeasonService.UpdateSeason(updatedItem);
            Nav.NavigateTo($"/overview/{updatedItem.Id}");
        }
    }

    private async Task DeleteSeason(Season season)
    {
        var result = await SeasonService.DeleteSeason(season);
        if (result)
        {
            SeasonData.Remove(season);
        }
    }

    private void GoToOverview(long seasonId)
    {
        Nav.NavigateTo($"/overview/{seasonId}");
    }

    private class SeasonOverview
    {
        public int Year { get; set; }

        // Leading driver
        // Leading team
    }
}
