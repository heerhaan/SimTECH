@page "/seasons"
@inject NavigationManager Nav
@inject LeagueService LeagueService
@inject SeasonService SeasonService
@inject BreadcrumbProvider _bread
@inject IDialogService DialogService

<PageTitle>Seasons</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    @if (SeasonList != null)
    {
        <MudDataGrid T="SeasonListModel" Items="@SeasonList" Bordered="true" Dense="true" Class="my-2">
            <ToolBarContent>
                <MudText Typo="Typo.h4">Seasons</MudText>
                <MudSpacer />
                <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" OnClick="NewSeason">New</MudButton>
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="e => e.Year" />
                <TemplateColumn T="SeasonListModel" Title="Leading driver">
                    <CellTemplate>
                        <MudStack Row="true" AlignItems="AlignItems.Center">
                            <MudText>@context.Item.DriverName</MudText>
                            <MudSpacer />
                            <CountryFlag Code="context.Item.DriverNationality" Size="FlagSize.Small" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="e => e.DriverNumber" SortBy="e => e.DriverNumber" Title="No." HeaderClass="number-col hide-sort-icons" CellClass="number-col" />
                <TemplateColumn T="SeasonListModel" Title="Leading team" CellStyleFunc="LeadTeamStyleFunc">
                    <CellTemplate>
                        <MudStack Row="true" AlignItems="AlignItems.Center">
                            <MudText>@context.Item.TeamName</MudText>
                            <MudSpacer />
                            <CountryFlag Code="context.Item.TeamNationality" Size="FlagSize.Small" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="e => e.League" />
                <PropertyColumn Property="e => e.State" />
                <TemplateColumn T="SeasonListModel" Sortable="false">
                    <CellTemplate>
                        <MudButtonGroup Size="@Size.Small">
                            <MudIconButton Icon="@Icons.Material.Outlined.Logout" OnClick="@(() => GoToOverview(context.Item.Id))" />
                            @if (context.Item.State == State.Concept)
                            {
                                <MudIconButton Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(async() => await DeleteSeason(context.Item.Id))" />
                            }
                        </MudButtonGroup>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="SeasonListModel" />
            </PagerContent>
        </MudDataGrid>
    }
</MudContainer>

@code {
    List<Season> SeasonData;
    List<League> LeagueData;
    List<SeasonListModel> SeasonList;

    protected override async Task OnInitializedAsync()
    {
        _bread.Reset();
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Seasons", href: "seasons", disabled: true),
        });

        SeasonData = await SeasonService.GetSeasons();
        LeagueData = await LeagueService.GetLeagues();

        SeasonList = await SeasonService.GetSeasonList();
    }

    private async Task NewSeason()
    {
        EditSeasonModel model;

        var previousSeason = SeasonData.OrderByDescending(e => e.Year).FirstOrDefault();

        if (previousSeason != null)
        {
            model = new EditSeasonModel(previousSeason);
            model.ResetIdentifierFields();
            model.Year++;
        }
        else
        {
            model = new EditSeasonModel(null);
        }

        var parameters = new DialogParameters { ["Model"] = model, ["Leagues"] = LeagueData };

        var dialog = await DialogService.ShowAsync<SeasonEditor>("Modify season", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Season updatedItem)
        {
            await SeasonService.UpdateSeason(updatedItem);
            Nav.NavigateTo($"/overview/{updatedItem.Id}");
        }
    }

    private async Task DeleteSeason(long seasonId)
    {
        var result = await SeasonService.DeleteSeason(seasonId);
        if (result)
        {
            SeasonData.Remove(SeasonData.Single(e => e.Id == seasonId));
        }
    }

    private static Func<SeasonListModel, string> LeadTeamStyleFunc => model => ViewHelper.SetBorderLeftStyle(model.TeamColour);

    private void GoToOverview(long seasonId) => Nav.NavigateTo($"/overview/{seasonId}");
}
