<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">Summary of season developments</MudText>
    </TitleContent>
    <DialogContent>
        <MudPaper>
            <MudStack Row="true" Justify="Justify.SpaceBetween">
                <div>
                    <MudText Typo="Typo.body2" Color="Color.Info">OLD - CHANGE - NEW</MudText>
                </div>
                <ScreenshotButton TargetId="developed-summary" Class="btn-md" />
            </MudStack>
        </MudPaper>
        <MudPaper id="developed-summary">
            <MudStack Row="true" Spacing="0" Class="flex-wrap">
                @foreach (var entrantGroup in summaries)
                {
                    <MudPaper Elevation="15" Class="px-4 py-2">
                        <MudTable T="EntrantDevelopLog"
                                  Items="@entrantGroup.EntrantLogs.OrderBy(e => e.Name)"
                                  GroupBy="@_entrantDefinition"
                                  GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
                                  FixedHeader="true"
                                  Bordered="true"
                                  Dense="true"
                                  Class="extra-dense"
                                  id="@(entrantGroup.SummaryElementId)">
                            <ToolBarContent>
                                <MudText Typo="Typo.h5" Color="Color.Tertiary">@entrantGroup.EntrantGroup.ToString()</MudText>
                                <MudDivider Vertical="true" Class="mx-2" />
                                <MudText Typo="Typo.h5">Boing</MudText>
                                <MudSpacer />
                                <ScreenshotButton TargetId="@(entrantGroup.SummaryElementId)" Class="btn-md" />
                            </ToolBarContent>
                            <HeaderContent>
                                @foreach (var (aspect, i) in entrantGroup.Aspects.OrderBy(e => e.ReadableAspect()).WithIndex())
                                {
                                    <MudTh Class="@($"overflow-hider {InspectTheWheel(i)}")">
                                        @aspect.ReadableAspect()
                                    </MudTh>
                                }
                            </HeaderContent>
                            <GroupHeaderTemplate>
                                <MudTh Class="mud-table-cell-custom-group" colspan="10">
                                    <MudText>@context.Key</MudText>
                                </MudTh>
                            </GroupHeaderTemplate>
                            <RowTemplate>
                                @foreach (var (dev, i) in context.DevelopedAspects.OrderBy(e => e.Key.ReadableAspect()).WithIndex())
                                {
                                    <MudTd Class="@(InspectTheWheel(i))">
                                        <MudStack Row="true" Spacing="0" AlignItems="AlignItems.Center" Justify="Justify.Center">
                                            <MudText Typo="Typo.caption" Style="color:white !important">@(dev.Value.Item1 - dev.Value.Item2)</MudText>
                                            <MudIcon Icon="@IconCollection.ArrowNarrowRight" Size="Size.Small"></MudIcon>
                                            <GradientColour Min="@entrantGroup.MinMaxValues[dev.Key].Item1"
                                                            Max="@entrantGroup.MinMaxValues[dev.Key].Item2"
                                                            Value="@dev.Value.Item1">
                                                <MudText Typo="Typo.caption">@dev.Value.Item1</MudText>
                                            </GradientColour>
                                            <MudIcon Icon="@IconCollection.ArrowNarrowRight" Size="Size.Small"></MudIcon>
                                            <MudText Typo="Typo.caption" Style="color:white !important">@dev.Value.Item2</MudText>
                                        </MudStack>
                                    </MudTd>
                                }
                            </RowTemplate>
                        </MudTable>
                    </MudPaper>
                }
            </MudStack>
        </MudPaper>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? SummaryDialog { get; set; }

    [Parameter] public IEnumerable<DevelopmentLog> DevelopmentLog { get; set; } = Enumerable.Empty<DevelopmentLog>();
    [Parameter] public IEnumerable<SeasonDriver> SeasonDrivers { get; set; } = Enumerable.Empty<SeasonDriver>();
    [Parameter] public IEnumerable<SeasonTeam> SeasonTeams { get; set; } = Enumerable.Empty<SeasonTeam>();
    [Parameter] public IEnumerable<SeasonEngine> SeasonEngines { get; set; } = Enumerable.Empty<SeasonEngine>();

    private static readonly string[] cycleWheel = new[] { "fallback-muted-background-primary", "fallback-muted-background-secondary", "fallback-muted-background-tertiary" };

    private List<DevelopSummary> summaries = new();

    private TableGroupDefinition<EntrantDevelopLog> _entrantDefinition = new()
    {
        GroupName = "Entrant",
        Selector = (e) => e.Name
    };

    protected override void OnInitialized()
    {
        // Build summaries first
        foreach (var entrantSummary in DevelopmentLog.GroupBy(e => e.EntrantGroup))
        {
            var entrantLog = new List<EntrantDevelopLog>();

            // Iterates through the logs of a single entrant
            foreach (var developed in entrantSummary.ToArray().GroupBy(e => e.EntrantId))
            {
                EntrantDevelopLog? currentLog;
                var developedLogs = developed.ToArray();

                switch (entrantSummary.Key)
                {
                    case Entrant.Driver:
                        currentLog = CreateDriverLog(developed.Key, developedLogs); break;
                    case Entrant.Team:
                        currentLog = CreateTeamLog(developed.Key, developedLogs); break;
                    case Entrant.Engine:
                        currentLog = CreateEngineLog(developed.Key, developedLogs); break;
                    default:
                        currentLog = null; break;
                }

                if (currentLog != null)
                    entrantLog.Add(currentLog);
            }

            var minMaxPerAspect = new Dictionary<Aspect, (int, int)>();
            foreach (var allChanged in entrantLog.SelectMany(e => e.DevelopedAspects).GroupBy(e => e.Key))
            {
                var lowest = allChanged.Select(e => e.Value.Item1).Min();
                var highest = allChanged.Select(e => e.Value.Item1).Max();
                minMaxPerAspect.Add(allChanged.Key, (lowest, highest));
            }

            summaries.Add(new DevelopSummary
                {
                    EntrantGroup = entrantSummary.Key,
                    Aspects = entrantLog[0].DevelopedAspects.Keys.ToArray(),
                    EntrantLogs = entrantLog,
                    MinMaxValues = minMaxPerAspect,
                });
        }
    }

    private string InspectTheWheel(int numCycle)
    {
        numCycle %= cycleWheel.Length;
        return cycleWheel[numCycle];
    }

    private EntrantDevelopLog? CreateDriverLog(long driverId, DevelopmentLog[] logs)
    {
        var matchingDriver = SeasonDrivers?.FirstOrDefault(e => e.Id == driverId);

        if (matchingDriver == null)
            return null;

        var developedAspects = logs
            .GroupBy(e => e.DevelopedAspect)
            .ToDictionary(e => e.Key, e => (e.Select(x => x.Change).Sum(), matchingDriver.RetrieveAspectValue(e.Key)));

        return new EntrantDevelopLog
            {
                EntrantId = driverId,
                Entrant = Entrant.Driver,
                Name = matchingDriver.Driver.FullName,
                Nationality = matchingDriver.Driver.Country,
                DevelopedAspects = developedAspects,
            };
    }

    private EntrantDevelopLog? CreateTeamLog(long teamId, DevelopmentLog[] logs)
    {
        var matchingTeam = SeasonTeams?.FirstOrDefault(e => e.Id == teamId);

        if (matchingTeam == null)
            return null;

        var developedAspects = logs
            .GroupBy(e => e.DevelopedAspect)
            .ToDictionary(e => e.Key, e => (e.Select(x => x.Change).Sum(), matchingTeam.RetrieveAspectValue(e.Key)));

        return new EntrantDevelopLog
            {
                EntrantId = teamId,
                Entrant = Entrant.Team,
                Name = matchingTeam.Name,
                Nationality = matchingTeam.Team.Country,
                DevelopedAspects = developedAspects,
            };
    }

    private EntrantDevelopLog? CreateEngineLog(long engineId, DevelopmentLog[] logs)
    {
        var matchingEngine = SeasonEngines?.FirstOrDefault(e => e.Id == engineId);

        if (matchingEngine == null)
            return null;

        var developedAspects = logs
            .GroupBy(e => e.DevelopedAspect)
            .ToDictionary(e => e.Key, e => (e.Select(x => x.Change).Sum(), matchingEngine.RetrieveAspectValue(e.Key)));

        return new EntrantDevelopLog
            {
                EntrantId = engineId,
                Entrant = Entrant.Engine,
                Name = matchingEngine.Name,
                DevelopedAspects = developedAspects,
            };
    }
}
