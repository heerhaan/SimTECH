@inject ISnackbar _snack

<MudTable Items="@DevelopedEntrants" Dense="true" id="development-results">
    <ToolBarContent>
        <MudText Typo="Typo.h5">Development</MudText>
        <MudSpacer />
        <MudButtonGroup Color="Color.Info" Variant="Variant.Outlined">
            @if (ranDevelop)
            {
                <MudButton StartIcon="@Icons.Material.Filled.Save"
                           Color="Color.Success"
                           Variant="Variant.Outlined"
                           OnClick="SaveDevelopment">
                    Save
                </MudButton>
            }
            <MudButton StartIcon="@Icons.Material.Filled.Recycling"
                       Color="Color.Info"
                       Variant="Variant.Outlined"
                       OnClick="RunDevelop">
                Run
            </MudButton>
            <ScreenshotButton TargetId="development-results" />
        </MudButtonGroup>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel T="DevelopedEntrant" SortBy="@(e => e.Name)">
                Name
            </MudTableSortLabel>
        </MudTh>
        @if (ShowOptionalColumn)
        {
            <MudTh>
                <MudTableSortLabel T="DevelopedEntrant" SortBy="@(e => e.Optional)">
                    Age
                </MudTableSortLabel>
            </MudTh>
        }
        <MudTh Class="number-col-lg">
            <MudTableSortLabel T="DevelopedEntrant" SortBy="@(e => e.Old)">
                Old
            </MudTableSortLabel>
        </MudTh>
        <MudTh Class="number-col-lg">
            <MudTableSortLabel T="DevelopedEntrant" SortBy="@(e => e.Change)">
                Change
            </MudTableSortLabel>
        </MudTh>
        <MudTh Class="number-col-lg">
            <MudTableSortLabel T="DevelopedEntrant" SortBy="@(e => e.New)">
                New
            </MudTableSortLabel>
        </MudTh>
        <MudTh Style="min-width:225px">Range</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-0">
                <MudText>@context.Name</MudText>
                <MudSpacer />
                @if (context.Nationality.HasValue)
                {
                    <CountryFlag Code="@context.Nationality.Value" Size="ElementSize.Small" />
                }
            </MudStack>
        </MudTd>
        @if (ShowOptionalColumn)
        {
            <MudTd>
                <MudText Typo="Typo.caption">@(context.Optional.HasValue ? context.Optional.Value : "?")</MudText>
            </MudTd>
        }
        <MudTd Class="number-col-lg">
            <MudText Typo="Typo.caption">@context.Old</MudText>
        </MudTd>
        <MudTd Class="number-col-lg">
            <GradientColour Min="@minChange" Max="@maxChange" Value="@context.Change">
                <MudText Typo="Typo.caption">@context.Change</MudText>
            </GradientColour>
        </MudTd>
        <MudTd Class="number-col-lg">
            <MudText Typo="Typo.caption">@context.New</MudText>
        </MudTd>
        <MudTd>
            <MudStack Row="true" Class="pa-0">
                <MudNumericField T="int"
                                 @bind-Value="@context.Min"
                                 ReadOnly="@(SelectedType != Quantifier.Direct)"
                                 Class="field-xs" />
                <MudNumericField T="int"
                                 @bind-Value="@context.Max"
                                 ReadOnly="@(SelectedType != Quantifier.Direct)"
                                 Class="field-xs" />
            </MudStack>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    [Parameter] public IEnumerable<DevelopedEntrant> DevelopedEntrants { get; set; }
    [Parameter] public Aspect SelectedAspect { get; set; }
    [Parameter] public Quantifier SelectedType { get; set; }
    [Parameter] public bool ShowOptionalColumn { get; set; }
    [Parameter] public EventCallback OnSaveDevelopment { get; set; }

    private bool ranDevelop = false;
    private int minChange = 0;
    private int maxChange = 0;

    private void RunDevelop()
    {
        foreach (var entrant in DevelopedEntrants)
        {
            if (entrant.Min > entrant.Max)
            {
                _snack.Add("oi you cunt, a minimum should be less than the maximum. you better fix that shit first", Severity.Error);
                return;
            }

            entrant.Change = NumberHelper.RandomInt(entrant.Min, entrant.Max);
            entrant.New = entrant.Old + entrant.Change;

            if (entrant.New < 0)
                entrant.New = 0;

            if (SelectedAspect == Aspect.Reliability)
            {
                // The maximum value for reliability is 1000
                if (entrant.New > 1000)
                    entrant.New = 1000;
            }
        }

        var allChanges = DevelopedEntrants.Select(e => e.Change).ToArray();
        minChange = allChanges.Min();
        maxChange = allChanges.Max();

        ranDevelop = true;
    }

    private async Task SaveDevelopment() => await OnSaveDevelopment.InvokeAsync();
}
