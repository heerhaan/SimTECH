<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="px-0">
    <MudStack Row="true" Class="mud-width-full">
        <MudPaper Width="20%" Class="pa-2">
            <DevelopSettings />

            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="ShowDevSummary" Class="mt-4">Summary</MudButton>
        </MudPaper>
        <MudPaper Class="flex-grow-1">

        </MudPaper>
        <MudPaper Width="20%" Class="pa-2">
            <MudText Typo="Typo.h5">Set DEV ranges</MudText>
            <MudDivider />

            @if (ActiveRanges?.Any() == true)
            {
                <DefinedSetRanges SelectedAspect="@selectedAspect" SetRanges="@ActiveRanges" />
            }

            @if (selectedEntrant == Entrant.Driver && selectedAspect == Aspect.Skill && AgeRanges?.Any() == true)
            {
                <DefinedSetRanges SelectedAspect="@(Aspect.Age)" SetRanges="@AgeRanges" />
            }
        </MudPaper>
    </MudStack>
</MudContainer>

@code {
    [CascadingParameter] public Season Season { get; set; }

    [Parameter] public IEnumerable<SeasonEngine> SeasonEngines { get; set; } = Enumerable.Empty<SeasonEngine>();
    [Parameter] public IEnumerable<SeasonTeam> SeasonTeams { get; set; } = Enumerable.Empty<SeasonTeam>();
    [Parameter] public IEnumerable<SeasonDriver> SeasonDrivers { get; set; } = Enumerable.Empty<SeasonDriver>();
    [Parameter] public IEnumerable<DevelopmentRange> LeagueDevelopmentRanges { get; set; } = Enumerable.Empty<DevelopmentRange>();
    [Parameter] public EventCallback OnShowSummary { get; set; }

    private List<DevelopedEntrant> DevelopedEntrants;
    private List<DevelopmentRange>? ActiveRanges;
    private List<DevelopmentRange>? AgeRanges;

    private Entrant selectedEntrant = Entrant.Driver;
    private Aspect selectedAspect = Aspect.Skill;

    private async Task ShowDevSummary() => await OnShowSummary.InvokeAsync();
}
