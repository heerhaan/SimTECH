@page "/developer/{SeasonId:long}"
@inject LeagueService _leagueService
@inject SeasonEntrantService _entrantService
@inject SeasonService _seasonService
@inject BreadcrumbProvider _bread
@inject IDialogService _dialogService

<PageTitle>Development</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Elevation="15" MinHeight="60px" Class="pa-2 text-center">
                <MudText Typo="Typo.h3">Entrant Development</MudText>
            </MudPaper>
        </MudItem>
        @if (!loading)
        {
            <MudItem xs="3">
                <MudPaper Class="pa-2">
                    <MudText Typo="Typo.h5">Settings</MudText>
                    <MudDivider />

                    <MudStack>
                        <MudStack Spacing="0">
                            <MudTooltip Text="For whom the development is run">
                                <MudText Typo="Typo.subtitle1">Entrant</MudText>
                            </MudTooltip>
                            <MudChipSet SelectedChipChanged="EntrantChipChanged" Mandatory="true">
                                <MudChip Color="Color.Primary" Value="Entrant.Driver" Default="true">Driver</MudChip>
                                <MudChip Color="Color.Primary" Value="Entrant.Team">Team</MudChip>
                                <MudChip Color="Color.Primary" Value="Entrant.Engine">Engine</MudChip>
                            </MudChipSet>
                        </MudStack>

                        <div>
                            <MudDivider />
                        </div>

                        <MudStack Spacing="0">
                            <MudTooltip Text="Which aspect is going to be developed">
                                <MudText Typo="Typo.subtitle1">Target</MudText>
                            </MudTooltip>
                            <MudChipSet SelectedChipChanged="TargetChipChanged" Mandatory="true">
                                <MudChip Color="Color.Secondary" Value="Aspect.Reliability" Default="true">Reliability</MudChip>

                                @if (selectedEntrant == Entrant.Driver)
                                {
                                    <MudChip Color="Color.Secondary" Value="Aspect.Skill">@Aspect.Skill.ReadableAspect()</MudChip>
                                    <MudChip Color="Color.Secondary" Value="Aspect.Attack">Attack</MudChip>
                                    <MudChip Color="Color.Secondary" Value="Aspect.Defense">Defense</MudChip>
                                }
                                else if (selectedEntrant == Entrant.Team)
                                {
                                    <MudChip Color="Color.Secondary" Value="Aspect.BaseCar">@Aspect.BaseCar.ReadableAspect()</MudChip>
                                    <MudChip Color="Color.Secondary" Value="Aspect.Aero">Aero</MudChip>
                                    <MudChip Color="Color.Secondary" Value="Aspect.Chassis">Chassis</MudChip>
                                    <MudChip Color="Color.Secondary" Value="Aspect.Powertrain">Powertrain</MudChip>
                                }
                                else if (selectedEntrant == Entrant.Engine)
                                {
                                    <MudChip Color="Color.Secondary" Value="Aspect.Engine">@Aspect.Engine.ReadableAspect()</MudChip>
                                }
                            </MudChipSet>
                        </MudStack>

                        <div>
                            <MudDivider />
                        </div>

                        <MudStack Spacing="0">
                            <MudTooltip Text="How the development ranges are determined">
                                <MudText Typo="Typo.subtitle1">Type</MudText>
                            </MudTooltip>
                            <MudChipSet SelectedChipChanged="TypeChipChanged" Mandatory="true">
                                <MudChip Color="Color.Tertiary" Value="Quantifier.Range" Default="true">Range</MudChip>
                                <MudChip Color="Color.Tertiary" Value="Quantifier.Set">Set</MudChip>
                                <MudChip Color="Color.Tertiary" Value="Quantifier.Direct">Direct</MudChip>
                            </MudChipSet>
                        </MudStack>

                        @if (selectedType == Quantifier.Range)
                        {
                            <div>
                                <MudDivider />
                            </div>

                            <MudStack Spacing="0">
                                <MudText Typo="Typo.subtitle1">Development range</MudText>
                                <MudNumericField T="int" Label="Min" ValueChanged="ApplyMinRange" Class="field-sm" />
                                <MudNumericField T="int" Label="Max" ValueChanged="ApplyMaxRange" Class="field-sm" />
                            </MudStack>
                        }
                    </MudStack>

                    <MudDivider />

                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Secondary"
                               FullWidth="true"
                               OnClick="ShowDevelopmentSummary"
                               Class="mt-4">
                        Summary
                    </MudButton>
                </MudPaper>
            </MudItem>
            <MudItem xs="6">
                <MudPaper>
                    <DevelopEntrant DevelopedEntrants="@DevelopedEntrants"
                                    SelectedType="@selectedType"
                                    ShowOptionalColumn="@showOptionalColumn"
                                    OnSaveDevelopment="SaveDevelopment" />
                </MudPaper>
            </MudItem>
            <MudItem xs="3">
                <MudPaper Class="pa-2">
                    <MudText Typo="Typo.h5">Defined SET ranges for @selectedEntrant.ToString()</MudText>
                    <MudDivider />

                    @if (ActiveRanges?.Any() == true)
                    {
                        <DefinedSetRanges SelectedAspect="@selectedAspect" SetRanges="@ActiveRanges" />
                    }

                    @if (selectedEntrant == Entrant.Driver && selectedAspect == Aspect.Skill && AgeRanges?.Any() == true)
                    {
                        <DefinedSetRanges SelectedAspect="@Aspect.Age" SetRanges="@AgeRanges" />
                    }
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    [Parameter] public long SeasonId { get; set; }

    private List<SeasonEngine> SeasonEngines { get; set; }
    private List<SeasonTeam> SeasonTeams { get; set; }
    private List<SeasonDriver> SeasonDrivers { get; set; }
    private List<DevelopmentRange> LeagueDevelopmentRanges { get; set; }
    private List<DevelopmentRange> AgeRanges { get; set; }

    private List<DevelopedEntrant> DevelopedEntrants { get; set; } = new();
    private List<DevelopmentRange> ActiveRanges { get; set; } = new();

    Entrant selectedEntrant = Entrant.Driver;
    Aspect selectedAspect = Aspect.Reliability;
    Quantifier selectedType = Quantifier.Range;

    bool loading = true;
    bool showOptionalColumn;
    int currentYear;
    int currentMin = 0;
    int currentMax = 0;

    protected override async Task OnInitializedAsync()
    {
        SeasonEngines = await _entrantService.GetSeasonEngines(SeasonId);
        SeasonTeams = await _entrantService.GetSeasonTeams(SeasonId);
        SeasonDrivers = await _entrantService.GetSeasonDrivers(SeasonId);

        var season = await _seasonService.GetSeasonById(SeasonId);
        currentYear = season.Year;
        LeagueDevelopmentRanges = await _leagueService.GetLeagueDevelopmentRanges(season.LeagueId);
        AgeRanges = LeagueDevelopmentRanges.Where(e => e.Type == Aspect.Age).ToList();

        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Seasons", href: "seasons"),
            new BreadcrumbItem("Overview", href: $"overview/{SeasonId}"),
            new BreadcrumbItem("Development", href: $"developer/{SeasonId}", disabled: true),
        });

        LoadEntrants();

        loading = false;
    }

    private void LoadEntrants()
    {
        switch (selectedEntrant)
        {
            case Entrant.Driver:
                DevelopDrivers(); break;
            case Entrant.Team:
                DevelopTeams(); break;
            case Entrant.Engine:
                DevelopEngines(); break;
            default:
                throw new InvalidOperationException("wtf unexpected entrant added to develop? (how)");
        }
    }

    private void DevelopDrivers()
    {
        DevelopedEntrants = SeasonDrivers.Select(e =>
            new DevelopedEntrant
                {
                    Id = e.Id,
                    Name = e.Driver.FullName,
                    Nationality = e.Driver.Country,
                    Optional = currentYear - e.Driver.DateOfBirth.Year,
                    Old = e.RetrieveAspectValue(selectedAspect),
                    Mark = e.Driver.Mark
                })
            .ToList();

        showOptionalColumn = true;
    }

    private void DevelopTeams()
    {
        DevelopedEntrants = SeasonTeams.Select(e =>
            new DevelopedEntrant
                {
                    Id = e.Id,
                    Name = e.Name,
                    Nationality = e.Team.Country,
                    Optional = null,
                    Old = e.RetrieveAspectValue(selectedAspect),
                    Mark = e.Team.Mark
                })
            .ToList();

        showOptionalColumn = false;
    }

    private void DevelopEngines()
    {
        DevelopedEntrants = SeasonEngines.Select(e =>
            new DevelopedEntrant
                {
                    Id = e.Id,
                    Name = e.Name,
                    Nationality = null,
                    Optional = null,
                    Old = e.RetrieveAspectValue(selectedAspect),
                })
            .ToList();

        showOptionalColumn = false;
    }

    private void EntrantChipChanged(MudChip? entrantChip)
    {
        if (entrantChip == null)
            return;

        selectedAspect = Aspect.Reliability;
        selectedEntrant = (Entrant)entrantChip.Value;

        LoadEntrants();
        ApplyCommon();
    }

    private void TypeChipChanged(MudChip? typeChip)
    {
        if (typeChip == null)
            return;

        selectedType = (Quantifier)typeChip.Value;
        ApplyCommon();
    }

    private void TargetChipChanged(MudChip? devChip)
    {
        if (devChip == null)
            return;

        selectedAspect = (Aspect)devChip.Value;

        LoadEntrants();
        ApplyCommon();
    }

    private void ApplyCommon()
    {
        ActiveRanges = LeagueDevelopmentRanges.GetAspectRanges(selectedAspect);

        if (selectedType == Quantifier.Set)
        {
            ApplyDefaultRanges();
        }
        else if (selectedType == Quantifier.Range && currentMin != currentMax)
        {
            ApplyMinRange(currentMin);
            ApplyMaxRange(currentMax);
        }
    }

    private void ApplyDefaultRanges()
    {
        List<DevelopmentRange> setCompareRange = ActiveRanges;
        List<DevelopmentRange>? additionalCompareRange = null;

        if (selectedEntrant == Entrant.Driver && selectedAspect == Aspect.Skill)
            additionalCompareRange = AgeRanges;

        if (!setCompareRange.Any() && !(additionalCompareRange?.Any() == true))
        {
            // Fallback minimum and maximum with the defaults
            foreach (var entrant in DevelopedEntrants)
            {
                entrant.Min = -2;
                entrant.Max = 2;
            }

            return;
        }

        foreach (var entrant in DevelopedEntrants)
        {
            int min = 0;
            int max = 0;

            var matchRange = setCompareRange.FirstOrDefault(e => e.Comparer >= entrant.Old);

            if (matchRange == null)
                matchRange = setCompareRange[setCompareRange.Count - 1];

            min = matchRange.Minimum;
            max = matchRange.Maximum;

            if (additionalCompareRange?.Any() == true && entrant.Optional.HasValue)
            {
                var optRange = additionalCompareRange.FirstOrDefault(e => e.Comparer >= entrant.Optional.Value);

                if (optRange != null)
                {
                    min += optRange.Minimum;
                    max += optRange.Maximum;
                }
            }

            entrant.Min = min;
            entrant.Max = max;
        }
    }

    private void ApplyMinRange(int newMin)
    {
        currentMin = newMin;

        foreach (var entrant in DevelopedEntrants)
            entrant.Min = newMin;
    }

    private void ApplyMaxRange(int newMax)
    {
        currentMax = newMax;

        foreach (var entrant in DevelopedEntrants)
            entrant.Max = newMax;
    }

    private async Task SaveDevelopment()
    {
        var developedValues = DevelopedEntrants.ToDictionary(e => e.Id, e => e.New);

        switch (selectedEntrant)
        {
            case Entrant.Driver:
                await _entrantService.SaveDriverDevelopment(developedValues, selectedAspect);
                SeasonDrivers = await _entrantService.GetSeasonDrivers(SeasonId);
                break;
            case Entrant.Team:
                await _entrantService.SaveTeamDevelopment(developedValues, selectedAspect);
                SeasonTeams = await _entrantService.GetSeasonTeams(SeasonId);
                break;
            case Entrant.Engine:
                await _entrantService.SaveEngineDevelopment(developedValues, selectedAspect);
                SeasonEngines = await _entrantService.GetSeasonEngines(SeasonId);
                break;
        }

        await _entrantService.SaveDevelopmentLog(CreateLog);
        LoadEntrants();
    }

    private List<DevelopmentLog> CreateLog => DevelopedEntrants.Select(e =>
        new DevelopmentLog
            {
                EntrantId = e.Id,
                EntrantGroup = selectedEntrant,
                DevelopedAspect = selectedAspect,
                Change = e.Change,
                SeasonId = SeasonId,
            })
        .ToList();

    private async Task ShowDevelopmentSummary()
    {
        var developmentLog = await _entrantService.GetDevelopmentLog(SeasonId);

        var parameters = new DialogParameters
            {
                ["DevelopmentLog"] = developmentLog,
                ["SeasonDrivers"] = SeasonDrivers,
                ["SeasonTeams"] = SeasonTeams,
                ["SeasonEngines"] = SeasonEngines
            };

        await _dialogService.ShowAsync<SummaryDevelopment>("Summary development", parameters, _summaryDialogOptions);
    }

    private static readonly DialogOptions _summaryDialogOptions = new()
        {
            MaxWidth = MaxWidth.ExtraLarge,
            CloseButton = true,
        };
}
