@inject RaceService RaceService
@inject TrackService TrackService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer>
    <MudText Typo="Typo.h3">Races</MudText>
    <MudText>[Temp] The seasonId is @Season.Id</MudText>

    @if (Season.State == State.Concept)
    {
        <MudButtonGroup Variant="Variant.Filled" Color="Color.Inherit" Size="Size.Large">
            <MudButton StartIcon="@Icons.Material.Outlined.CarRepair" IconColor="Color.Primary" OnClick="AddRace">Add race</MudButton>
            <MudButton StartIcon="@Icons.Material.Outlined.CarRepair" IconColor="Color.Primary" OnClick="NotImplementedMoment">Copy race</MudButton>
            <MudButton StartIcon="@Icons.Material.Outlined.CarRepair" IconColor="Color.Primary" OnClick="NotImplementedMoment">Copy all races in season</MudButton>
        </MudButtonGroup>
    }

    <MudTable Items="RaceData">
        <HeaderContent>
            <MudTh>Round</MudTh>
            <MudTh></MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Weather</MudTh>
            <MudTh>Winning driver</MudTh>
            <MudTh>Winning team</MudTh>
            <MudTh>State</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Round</MudTd>
            <MudTd>
                <CountryFlag Code="context.Track.Country" />
            </MudTd>
            <MudTd>@context.Name</MudTd>
            <MudTd>@context.Weather</MudTd>
            <MudTd>TODO</MudTd>
            <MudTd>TODO</MudTd>
            <MudTd>@context.State</MudTd>
            <MudTd>
                butt(on)(s)
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    [CascadingParameter] public Season Season { get; set; }

    private IList<Race> RaceData = new List<Race>();
    private string? _notification;

    protected override async Task OnInitializedAsync()
    {
        RaceData = await RaceService.GetRacesBySeason(Season.Id);
    }

    async Task AddRace() => await UpdateRace(new Race());
    async Task UpdateRace(Race item)
    {
        var availableTracks = (await TrackService.GetTracks())
            .Where(e => !RaceData.Select(r => r.TrackId).Contains(e.Id))
            .ToList();

        if (!availableTracks.Any())
        {
            AlertMoment("No accessible tracks are available to create a race from");
            return;
        }

        var parameters = new DialogParameters 
            {
                ["Race"] = item,
                ["Tracks"] = availableTracks
            };

        var dialog = await DialogService.ShowAsync<RaceEditor>("Modify Race", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Race updatedRace)
        {
            await RaceService.UpdateRace(updatedRace);
            RaceData = await RaceService.GetRacesBySeason(Season.Id);
        }
    }

    private void NotImplementedMoment() => AlertMoment("Functionality has not been implemented yet!!!");
    private void AlertMoment(string text)
    {
        Snackbar.Add(text, Severity.Error);
    }
}
