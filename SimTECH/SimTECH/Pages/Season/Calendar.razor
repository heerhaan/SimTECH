@inject LeagueService LeagueService
@inject RaceService RaceService
@inject TrackService TrackService
@inject NavigationManager Nav
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudTable Items="RaceCalendar">
    <ToolBarContent>
        <MudText Typo="Typo.h3">Races</MudText>
        <MudSpacer />
        @if (Season.State == State.Concept)
        {
            <MudButtonGroup Variant="Variant.Filled" Color="Color.Inherit" Size="Size.Large">
                <MudButton StartIcon="@Icons.Material.Outlined.CarRepair" IconColor="Color.Primary" OnClick="AddRaces">Add races</MudButton>
            </MudButtonGroup>
        }
    </ToolBarContent>
    <ColGroup>
        <col class="number-col" />
        <col />
        <col />
        <col />
        <col class="number-col" />
        <col />
        <col class="number-col" />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh Class="number-col">Round</MudTh>
        <MudTh>Country</MudTh>
        <MudTh>Race</MudTh>
        <MudTh>Weather</MudTh>
        <MudTh>Polesitter</MudTh>
        <MudTh Class="number-col"></MudTh>
        <MudTh>Winner</MudTh>
        <MudTh Class="number-col"></MudTh>
        <MudTh>Winner</MudTh>
        <MudTh>Status</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Class="number-col">@context.Round</MudTd>
        <MudTd>
            <CountryFlag Code="context.Country" Size="FlagSize.Small" IncludeName="true" />
        </MudTd>
        <MudTd>@context.Name</MudTd>
        <MudTd>@context.Weather</MudTd>
        @if (context.PoleSitter != null)
        {
            <MudTd>
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    <MudText>@context.PoleSitter.Name</MudText>
                    <MudSpacer />
                    <CountryFlag Code="context.PoleSitter.Country" Size="FlagSize.Small" />
                </MudStack>
            </MudTd>
            <MudTd Class="number-col" Style="@(ViewHelper.SetFullColourstyle(context.PoleSitter.Colour, context.PoleSitter.Accent))">
                <MudText Typo="Typo.caption">@(context.PoleSitter.Number)</MudText>
            </MudTd>
        }
        else
        {
            <MudTd></MudTd>
            <MudTd Class="number-col"></MudTd>
        }

        @if (context.DriverWinner != null)
        {
            <MudTd>
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    <MudText>@context.DriverWinner.Name</MudText>
                    <MudSpacer />
                    <CountryFlag Code="context.DriverWinner.Country" Size="FlagSize.Small" />
                </MudStack>
            </MudTd>
            <MudTd Class="number-col" Style="@(ViewHelper.SetFullColourstyle(context.DriverWinner.Colour, context.DriverWinner.Accent))">
                <MudText Typo="Typo.caption">@(context.DriverWinner.Number)</MudText>
            </MudTd>
        }
        else
        {
            <MudTd Class="number-col"></MudTd>
            <MudTd></MudTd>
        }

        @if (context.TeamWinner != null)
        {
            <MudTd>
                <MudText Typo="Typo.button">@context.TeamWinner.Name</MudText>
            </MudTd>
        }
        else
        {
            <MudTd></MudTd>
        }
        <MudTd>@context.State</MudTd>
        <MudTd>
            <MudButtonGroup Size="@Size.Small">
                @if (Season.State == State.Concept)
                {
                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateRace(context.Id))" />
                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(async () => await DeleteRace(context.Id))" />
                }
                else if (Season.State == State.Active && (context.Round == _nextRound))
                {
                    <MudIconButton Icon="@Icons.Material.Outlined.Logout" OnClick="@(() => GoToRaceWeek(context))" />
                }
                else if (context.State == State.Closed)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Flag" OnClick="@(() => GoToRaceWeek(context))" />
                }
                else
                {
                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateRace(context.Id))" />
                }
            </MudButtonGroup>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    [CascadingParameter] public Season Season { get; set; }

    List<CalendarRaceModel> RaceCalendar = new();
    int _nextRound;

    protected override async Task OnInitializedAsync()
    {
        RaceCalendar = await RaceService.GetRaceCalendar(Season.Id);

        _nextRound = (await RaceService.GetNextRaceOfSeason(Season.Id))?.Round ?? 0;
    }

    private async Task UpdateRace(long raceId)
    {
        var item = await RaceService.GetRaceById(raceId);
        var seasonLeague = await LeagueService.GetLeagueById(Season.LeagueId);
        var availableTracks = (await TrackService.GetTracks())
            .Where(e => !RaceCalendar.Select(r => r.TrackId).Contains(e.Id))
            .ToList();

        if (seasonLeague == null)
        {
            Snackbar.Add("how in the hell is it unknown which league this is, cant do shit now?!", Severity.Error);
            return;
        }

        if (!availableTracks.Any() && item.Id == 0)
        {
            Snackbar.Add("there aren't any tracks left to add to this season, ya absolute willy", Severity.Error);
            return;
        }

        var parameters = new DialogParameters 
            {
                ["Race"] = item,
                ["Tracks"] = availableTracks,
                ["SeasonId"] = Season.Id,
                ["IncomingRound"] = item.Round,
                ["DefaultRaceLength"] = seasonLeague.RaceLength,
            };

        var dialog = await DialogService.ShowAsync<RaceEditor>("Modify Race", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Race updatedRace)
        {
            await RaceService.UpdateRace(updatedRace);
            RaceCalendar = await RaceService.GetRaceCalendar(Season.Id);
        }
    }

    private async Task AddRaces()
    {
        var seasonLeague = await LeagueService.GetLeagueById(Season.LeagueId);
        var availableTracks = (await TrackService.GetTracks())
            .Where(e => !RaceCalendar.Select(r => r.TrackId).Contains(e.Id))
            .ToList();

        if (seasonLeague == null)
        {
            Snackbar.Add("how in the hell is it unknown which league this is, cant do shit now?!", Severity.Error);
            return;
        }

        if (!availableTracks.Any())
        {
            Snackbar.Add("there aren't any tracks left to add to this season, ya absolute willy", Severity.Error);
            return;
        }

        var parameters = new DialogParameters
            {
                ["Tracks"] = availableTracks,
                ["SeasonId"] = Season.Id,
                ["OffsetRound"] = (RaceCalendar.Count + 1),
                ["DefaultRaceLength"] = seasonLeague.RaceLength,
            };

        var dialog = await DialogService.ShowAsync<AddRaces>("Insert races", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is List<Race> addedRaces)
        {
            await RaceService.InsertRaces(addedRaces);
            RaceCalendar = await RaceService.GetRaceCalendar(Season.Id);
        }
    }

    private async Task DeleteRace(long raceId)
    {
        // TODO: implement delete action
        Snackbar.Add("functionality has not been implemented yet!!! :3", Severity.Error);
    }

    private async Task GoToRaceWeek(CalendarRaceModel race)
    {
        if (race.State == State.Concept)
        {
            if (race.Round == _nextRound)
                await RaceService.ActivateRace(race.Id);
            else
            {
                Snackbar.Add("oi oi oi, a previous round hasn't been finished (or even started!) yet. do that one first, cunt.", Severity.Error);
                return;
            }
        }

        Nav.NavigateTo($"/raceweek/{race.Id}");
    }
}
