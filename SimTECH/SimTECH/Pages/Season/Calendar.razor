@inject RaceService RaceService
@inject TrackService TrackService
@inject NavigationManager Nav
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer>
    <MudText Typo="Typo.h3">Races</MudText>

    @if (Season.State == State.Concept)
    {
        <MudButtonGroup Variant="Variant.Filled" Color="Color.Inherit" Size="Size.Large">
            <MudButton StartIcon="@Icons.Material.Outlined.CarRepair" IconColor="Color.Primary" OnClick="AddRace">Add new race</MudButton>
            <MudButton StartIcon="@Icons.Material.Outlined.CarRepair" IconColor="Color.Primary" OnClick="CopyRace">Copy race</MudButton>
        </MudButtonGroup>
    }

    <MudTable Items="RaceData">
        <HeaderContent>
            <MudTh>Round</MudTh>
            <MudTh>Country</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Weather</MudTh>
            <MudTh>Winning driver</MudTh>
            <MudTh>Winning team</MudTh>
            <MudTh>State</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Round</MudTd>
            <MudTd>
                <CountryFlag Code="context.Track.Country" Size="FlagSize.Normal" IncludeName="true" />
            </MudTd>
            <MudTd>@context.Name</MudTd>
            <MudTd>@context.Weather</MudTd>
            <MudTd>TODO</MudTd>
            <MudTd>TODO</MudTd>
            <MudTd>@context.State</MudTd>
            <MudTd>
                <MudButtonGroup Size="@Size.Small">
                    @if (Season.State == State.Concept)
                    {
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateRace(context))" />
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(async () => await DeleteRace(context))" />
                    }
                    else if (Season.State == State.Active && (context.State == State.Active || context.Round == nextRound))
                    {
                        <MudIconButton Icon="@Icons.Material.Outlined.Logout" OnClick="@(() => GoToRaceWeek(context))" />
                    }
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    [CascadingParameter] public Season Season { get; set; }

    private IList<Race> RaceData = new List<Race>();
    private string? _notification;
    private int? nextRound;

    protected override async Task OnInitializedAsync()
    {
        RaceData = (await RaceService.GetRacesBySeason(Season.Id))
            .OrderBy(e => e.Round)
            .ToList();

        var nextRace = RaceData.FirstOrDefault(e => e.State == State.Concept || e.State == State.Active);
        if (nextRace != null)
            nextRound = nextRace.Round;
    }

    private async Task AddRace() => await UpdateRace(new Race());
    private async Task UpdateRace(Race item)
    {
        var availableTracks = (await TrackService.GetTracks())
            .Where(e => !RaceData.Select(r => r.TrackId).Contains(e.Id))
            .ToList();

        if (!availableTracks.Any() && item.Id == 0)
        {
            Snackbar.Add("there aren't any tracks left to add to this season, ya absolute willy", Severity.Error);
            return;
        }

        var parameters = new DialogParameters 
            {
                ["Race"] = item,
                ["Tracks"] = availableTracks,
                ["SeasonId"] = Season.Id,
                ["IncomingRound"] = (RaceData.Count + 1)
            };

        var dialog = await DialogService.ShowAsync<RaceEditor>("Modify Race", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Race updatedRace)
        {
            await RaceService.UpdateRace(updatedRace);

            // Could potentially be modified to remove and update if isn't new
            if (updatedRace.Id == 0)
                RaceData.Add(updatedRace);
            else
                RaceData = await RaceService.GetRacesBySeason(Season.Id);
        }
    }

    private async Task DeleteRace(Race race)
    {
        // TODO: implement delete action
        Snackbar.Add("functionality has not been implemented yet!!! :3", Severity.Error);
    }

    private async Task CopyRace()
    {
        // TODO: this
        Snackbar.Add("not implemented yet lol", Severity.Warning);
        return;

        var parameters = new DialogParameters { ["LeagueId"] = 1 };

        var dialog = await DialogService.ShowAsync<CopyRace>("Copy an existing race", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Race copiedRace)
        {
            // Store result
            RaceData.Add(copiedRace);
        }
    }

    private async Task GoToRaceWeek(Race race)
    {
        if (race.State == State.Concept)
        {
            if (race.Round == nextRound)
                await RaceService.ActivateRace(race.Id);
            else
            {
                Snackbar.Add("oi oi oi, a previous round hasn't been finished (or even started!) yet. do that one first, cunt.", Severity.Error);
                return;
            }
        }

        Nav.NavigateTo($"/raceweek/{race.Id}");
    }
}
