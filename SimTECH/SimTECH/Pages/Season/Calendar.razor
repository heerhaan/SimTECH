<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="px-0">
    <MudPaper MinHeight="60px">
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4">
            <MudText Typo="Typo.h3">Races</MudText>
            <MudSpacer />
            @if (Season.State == State.Concept)
            {
                <MudButton StartIcon="@Icons.Material.Outlined.CarRepair"
                           IconColor="Color.Primary"
                           Variant="Variant.Outlined"
                           Color="Color.Primary"
                           Size="Size.Large"
                           OnClick="AddRaces">
                    Add races
                </MudButton>
            }
        </MudStack>
    </MudPaper>
    <MudTable T="CalendarListing" Items="@SeasonCalendar" Dense="true" Loading="@loading">
        <HeaderContent>
            <MudTh Class="number-col">Round</MudTh>
            <MudTh>Country</MudTh>
            <MudTh>Race</MudTh>
            <MudTh>Weather</MudTh>
            <MudTh>Polesitter</MudTh>
            <MudTh Class="number-col">NO</MudTh>
            <MudTh>Winner driver</MudTh>
            <MudTh Class="number-col">NO</MudTh>
            <MudTh>Winner team</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Class="number-col">
                <MudText Typo="Typo.caption">@context.Round</MudText>
            </MudTd>
            <MudTd>
                <CountryNamedFlag Code="@context.Country" Size="ElementSize.Small" Reverse="true" Class="overflow-hider" />
            </MudTd>
            <MudTd Style="max-width:300px">
                <MudText Class="overflow-hider">@context.Name</MudText>
            </MudTd>
            <MudTd>
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                    <MudIcon Icon="@context.WeatherIcon" />
                    <MudText>@context.Weather</MudText>
                </MudStack>
            </MudTd>

            @if (context.PoleSitter != null)
            {
                <MudTd Style="max-width:250px">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Style="max-width:250px">
                        <MudText Class="overflow-hider">@context.PoleSitter.Name</MudText>
                        <MudSpacer />
                        <CountryFlag Code="@context.PoleSitter.Country" Size="ElementSize.Small" />
                    </MudStack>
                </MudTd>
                <MudTd Class="number-col">
                    <NumberDisplay Colour="@context.PoleSitter.Colour" Accent="@context.PoleSitter.Accent">@context.PoleSitter.Number</NumberDisplay>
                </MudTd>
            }
            else
            {
                <MudTd></MudTd>
                <MudTd Class="number-col"></MudTd>
            }

            @if (context.DriverWinner != null)
            {
                <MudTd Style="max-width:250px">
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText Class="overflow-hider">@context.DriverWinner.Name</MudText>
                        <MudSpacer />
                        <CountryFlag Code="@context.DriverWinner.Country" Size="ElementSize.Small" />
                    </MudStack>
                </MudTd>
                <MudTd Class="number-col">
                    <NumberDisplay Colour="@context.DriverWinner.Colour" Accent="@context.DriverWinner.Accent">@context.DriverWinner.Number</NumberDisplay>
                </MudTd>
            }
            else
            {
                <MudTd Class="number-col"></MudTd>
                <MudTd></MudTd>
            }

            <MudTd>
                @if (context.TeamWinner != null)
                {
                    <MudText Typo="Typo.button" Class="overflow-hider">@context.TeamWinner.Name</MudText>
                }
            </MudTd>
            <MudTd>
                <MudButtonGroup Size="@Size.Small">
                    @if (Season.State == State.Active && (context.Round == nextRound))
                    {
                        <MudIconButton Icon="@Icons.Material.Outlined.Logout" OnClick="@(() => GoToRace(context.Round))" />
                    }
                    else if (context.State == State.Closed)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Flag" OnClick="@(() => GoToRace(context.Round))" />
                    }
                    else if (Season.State != State.Closed)
                    {
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateRace(context.Race))" />
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(async () => await DeleteRace(context.RaceId))" />
                    }
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    [CascadingParameter] public Season Season { get; set; }

    [Parameter] public IEnumerable<Race> Races { get; set; } = Enumerable.Empty<Race>();
    [Parameter] public IEnumerable<Result> Results { get; set; } = Enumerable.Empty<Result>();
    [Parameter] public IEnumerable<SeasonDriver> SeasonDrivers { get; set; } = Enumerable.Empty<SeasonDriver>();
    [Parameter] public IEnumerable<SeasonTeam> SeasonTeams { get; set; } = Enumerable.Empty<SeasonTeam>();
    [Parameter] public IEnumerable<Climate> Climates { get; set; } = Enumerable.Empty<Climate>();
    [Parameter] public EventCallback OnAddRaces { get; set; }
    [Parameter] public EventCallback<Race?> OnEditorOpen { get; set; }
    [Parameter] public EventCallback<long> OnDelete { get; set; }
    [Parameter] public EventCallback<int> OnGoToRace { get; set; }

    private List<CalendarListing> SeasonCalendar = new();

    private bool loading = true;
    private int nextRound;

    protected override void OnParametersSet()
    {
        loading = true;
        nextRound = Races.FindNext()?.Round ?? 0;
        SeasonCalendar.Clear();

        foreach (var race in Races)
        {
            var climate = Climates.First(e => e.Id == race.ClimateId);

            var listing = new CalendarListing
            {
                RaceId = race.Id,
                Round = race.Round,
                Name = race.Name,
                Country = race.Track.Country,
                State = race.State,
                Weather = climate.Terminology,
                WeatherIcon = climate.Icon,
                TrackId = race.TrackId,

                Race = race
            };

            var polesitter = Results.FirstOrDefault(e => e.RaceId == race.Id && e.Grid == 1);
            if (polesitter != null)
            {
                var poleDriver = SeasonDrivers.First(e => e.Id == polesitter.SeasonDriverId);
                var poleTeam = SeasonTeams.First(e => e.Id == polesitter.SeasonTeamId);

                listing.PoleSitter = new CompactDriver
                {
                    Name = poleDriver.Driver.FullName,
                    Country = poleDriver.Driver.Country,
                    Number = poleDriver.Number,
                    Colour = poleTeam.Colour,
                    Accent = poleTeam.Accent
                };
            }

            var winner = Results.FirstOrDefault(e => e.RaceId == race.Id && e.Position == 1);
            if (winner != null)
            {
                var winnerDriver = SeasonDrivers.First(e => e.Id == winner.SeasonDriverId);
                var winnerTeam = SeasonTeams.First(e => e.Id == winner.SeasonTeamId);

                listing.DriverWinner = new CompactDriver
                {
                    Name = winnerDriver.Driver.FullName,
                    Country = winnerDriver.Driver.Country,
                    Number = winnerDriver.Number,
                    Colour = winnerTeam.Colour,
                    Accent = winnerTeam.Accent
                };

                listing.TeamWinner = new CompactTeam
                {
                    Name = winnerTeam.Name,
                    Country = winnerTeam.Team.Country,
                    Colour = winnerTeam.Colour,
                    Accent = winnerTeam.Accent
                };
            }

            SeasonCalendar.Add(listing);
        }

        loading = false;
    }

    private async Task AddRaces() => await OnAddRaces.InvokeAsync();

    private async Task UpdateRace(Race? item) => await OnEditorOpen.InvokeAsync(item);

    private async Task DeleteRace(long raceId) => await OnDelete.InvokeAsync(raceId);

    private async Task GoToRace(int round) => await OnGoToRace.InvokeAsync(round);

    internal class CalendarListing
    {
        public long RaceId { get; set; }
        public int Round { get; set; }
        public string Name { get; set; }
        public Country Country { get; set; }
        public State State { get; set; }
        public string Weather { get; set; }
        public string WeatherIcon { get; set; }
        public long TrackId { get; set; }

        public CompactDriver? PoleSitter { get; set; }
        public CompactDriver? DriverWinner { get; set; }
        public CompactTeam? TeamWinner { get; set; }

        public Race Race { get; set; }
    }
}
