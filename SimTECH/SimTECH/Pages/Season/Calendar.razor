@inject LeagueService LeagueService
@inject RaceService RaceService
@inject TrackService TrackService
@inject NavigationManager Nav
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudTable Items="RaceCalendar">
    <ToolBarContent>
        <MudText Typo="Typo.h3">Races</MudText>
        <MudSpacer />
        @if (Season.State == State.Concept)
        {
            <MudButtonGroup Variant="Variant.Filled" Color="Color.Inherit" Size="Size.Large">
                <MudButton StartIcon="@Icons.Material.Outlined.CarRepair" IconColor="Color.Primary" OnClick="AddRaces">Add races</MudButton>
            </MudButtonGroup>
        }
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Round</MudTh>
        <MudTh>Country</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Weather</MudTh>
        <MudTh>Winning driver</MudTh>
        <MudTh>Winning team</MudTh>
        <MudTh>Status</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Round</MudTd>
        <MudTd>
            <CountryFlag Code="context.Country" Size="FlagSize.Normal" IncludeName="true" />
        </MudTd>
        <MudTd>@context.Name</MudTd>
        <MudTd>@context.Weather</MudTd>
        <MudTd>
            @if (context.WinningDriver != null)
            {
                <CountryFlag Code="context.DriverNationality.GetValueOrDefault()" Size="FlagSize.Small" />
                <span>@context.WinningDriver [@(context.DriverNumber)]</span>
            }
        </MudTd>
        <MudTd Style="@ViewHelper.GetFullColourStyle(context.TeamColour, context.TeamAccent)">
            @if (context.WinningTeam != null)
            {
                <CountryFlag Code="context.TeamNationality.GetValueOrDefault()" Size="FlagSize.Small" />
                <span>@context.WinningTeam</span>
            }
        </MudTd>
        <MudTd>@context.State</MudTd>
        <MudTd>
            <MudButtonGroup Size="@Size.Small">
                @if (Season.State == State.Concept)
                {
                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateRace(context.Id))" />
                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(async () => await DeleteRace(context.Id))" />
                }
                else if (Season.State == State.Active && (context.Round == _nextRound.GetValueOrDefault()))
                {
                    <MudIconButton Icon="@Icons.Material.Outlined.Logout" OnClick="@(() => GoToRaceWeek(context))" />
                }
            </MudButtonGroup>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    [CascadingParameter] public Season Season { get; set; }

    IList<Race> RaceData = new List<Race>();
    List<CalendarRaceModel> RaceCalendar = new();
    int? _nextRound;

    protected override async Task OnInitializedAsync()
    {
        RaceCalendar = await RaceService.GetRaceCalendar(Season.Id);
        RaceData = (await RaceService.GetRacesBySeason(Season.Id))
            .OrderBy(e => e.Round)
            .ToList();

        _nextRound = (await RaceService.GetNextRaceOfSeason(Season.Id))?.Round ?? null;
    }

    private async Task UpdateRace(long raceId)
    {
        var item = await RaceService.GetRaceById(raceId);
        var seasonLeague = await LeagueService.GetLeagueById(Season.LeagueId);
        var availableTracks = (await TrackService.GetTracks())
            .Where(e => !RaceData.Select(r => r.TrackId).Contains(e.Id))
            .ToList();

        if (seasonLeague == null)
        {
            Snackbar.Add("how in the hell is it unknown which league this is, cant do shit now?!", Severity.Error);
            return;
        }

        if (!availableTracks.Any() && item.Id == 0)
        {
            Snackbar.Add("there aren't any tracks left to add to this season, ya absolute willy", Severity.Error);
            return;
        }

        var parameters = new DialogParameters 
            {
                ["Race"] = item,
                ["Tracks"] = availableTracks,
                ["SeasonId"] = Season.Id,
                ["IncomingRound"] = (RaceData.Count + 1),
                ["DefaultRaceLength"] = seasonLeague.RaceLength,
            };

        var dialog = await DialogService.ShowAsync<RaceEditor>("Modify Race", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Race updatedRace)
        {
            await RaceService.UpdateRace(updatedRace);

            // Could potentially be modified to remove and update if isn't new
            if (updatedRace.Id == 0)
                RaceData.Add(updatedRace);
            else
                RaceData = await RaceService.GetRacesBySeason(Season.Id);
        }
    }

    private async Task AddRaces()
    {
        // TODO: implement plural add action
        Snackbar.Add("functionality has not been implemented yet!!! :3", Severity.Error);
    }

    private async Task DeleteRace(long raceId)
    {
        // TODO: implement delete action
        Snackbar.Add("functionality has not been implemented yet!!! :3", Severity.Error);
    }

    private async Task GoToRaceWeek(CalendarRaceModel race)
    {
        if (race.State == State.Concept)
        {
            if (race.Round == _nextRound)
                await RaceService.ActivateRace(race.Id);
            else
            {
                Snackbar.Add("oi oi oi, a previous round hasn't been finished (or even started!) yet. do that one first, cunt.", Severity.Error);
                return;
            }
        }

        Nav.NavigateTo($"/raceweek/{race.Id}");
    }
}
