@inject ClimateService _climateService
@inject LeagueService LeagueService
@inject RaceService RaceService
@inject TrackService TrackService
@inject NavigationManager Nav
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.False">
    <MudPaper MinHeight="60px">
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4">
            <MudText Typo="Typo.h3">Races</MudText>
            <MudSpacer />
            @if (Season.State == State.Concept)
            {
                <MudButtonGroup Variant="Variant.Filled" Color="Color.Inherit" Size="Size.Large">
                    <MudButton StartIcon="@Icons.Material.Outlined.CarRepair" IconColor="Color.Primary" OnClick="AddRaces">Add races</MudButton>
                </MudButtonGroup>
            }
        </MudStack>
    </MudPaper>
    <MudTable Items="@RaceCalendar">
        <HeaderContent>
            <MudTh Class="number-col">Round</MudTh>
            <MudTh>Country</MudTh>
            <MudTh>Race</MudTh>
            <MudTh>Weather</MudTh>
            <MudTh Class="number-col"></MudTh>
            <MudTh>Polesitter</MudTh>
            <MudTh Class="number-col"></MudTh>
            <MudTh>Winner</MudTh>
            <MudTh>Winner</MudTh>
            <MudTh>Status</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Class="number-col">
                <MudText>@context.Round</MudText>
            </MudTd>
            <MudTd>
                <CountryNamedFlag Code="context.Country" Size="FlagSize.Small" />
            </MudTd>
            <MudTd>
                <MudText>@context.Name</MudText>
            </MudTd>
            <MudTd>
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="4">
                    <MudIcon Icon="@context.WeatherIcon" />
                    <MudText>@context.Weather</MudText>
                </MudStack>
            </MudTd>
            @if (context.PoleSitter != null)
            {
                <MudTd Class="number-col" Style="@(ViewHelper.SetFullColourstyle(context.PoleSitter.Colour, context.PoleSitter.Accent))">
                    <MudText Typo="Typo.caption">@(context.PoleSitter.Number)</MudText>
                </MudTd>
                <MudTd>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText>@context.PoleSitter.Name</MudText>
                        <MudSpacer />
                        <CountryFlag Code="@context.PoleSitter.Country" Size="FlagSize.Small" />
                    </MudStack>
                </MudTd>
            }
            else
            {
                <MudTd></MudTd>
                <MudTd Class="number-col"></MudTd>
            }

            @if (context.DriverWinner != null)
            {
                <MudTd Class="number-col" Style="@(ViewHelper.SetFullColourstyle(context.DriverWinner.Colour, context.DriverWinner.Accent))">
                    <MudText Typo="Typo.caption">@(context.DriverWinner.Number)</MudText>
                </MudTd>
                <MudTd>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText>@context.DriverWinner.Name</MudText>
                        <MudSpacer />
                        <CountryFlag Code="@context.DriverWinner.Country" Size="FlagSize.Small" />
                    </MudStack>
                </MudTd>
            }
            else
            {
                <MudTd Class="number-col"></MudTd>
                <MudTd></MudTd>
            }

            @if (context.TeamWinner != null)
            {
                <MudTd>
                    <MudText Typo="Typo.button">@context.TeamWinner.Name</MudText>
                </MudTd>
            }
            else
            {
                <MudTd></MudTd>
            }
            <MudTd>
                <MudText>@context.State</MudText>
            </MudTd>
            <MudTd>
                <MudButtonGroup Size="@Size.Small">
                    @if (Season.State == State.Active && (context.Round == _nextRound))
                    {
                        <MudIconButton Icon="@Icons.Material.Outlined.Logout" OnClick="@(() => GoToRaceWeek(context))" />
                    }
                    else if (context.State == State.Closed)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Flag" OnClick="@(() => GoToRaceWeek(context))" />
                    }
                    else
                    {
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateRace(context.RaceId))" />
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(async () => await DeleteRace(context.RaceId))" />
                    }
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    [CascadingParameter] public Season Season { get; set; }

    List<CalendarRaceModel> RaceCalendar = new();
    List<Climate> Climates = new();
    int _nextRound;

    protected override async Task OnInitializedAsync()
    {
        RaceCalendar = await RaceService.GetRaceCalendar(Season.Id);
        Climates = await _climateService.GetClimates(StateFilter.Active);

        _nextRound = (await RaceService.GetNextRaceOfSeason(Season.Id))?.Round ?? 0;
    }

    private async Task AddRaces()
    {
        var seasonLeague = await LeagueService.GetLeagueById(Season.LeagueId);
        var availableTracks = (await TrackService.GetTracks())
            .Where(e => !RaceCalendar.Select(r => r.TrackId).Contains(e.Id))
            .ToList();

        if (seasonLeague == null)
        {
            Snackbar.Add("how in the hell is it unknown which league this is, cant do shit now?!", Severity.Error);
            return;
        }

        if (!availableTracks.Any())
        {
            Snackbar.Add("there aren't any tracks left to add to this season, ya absolute willy", Severity.Error);
            return;
        }

        var parameters = new DialogParameters
            {
                ["Tracks"] = availableTracks,
                ["SeasonId"] = Season.Id,
                ["OffsetRound"] = (RaceCalendar.Count + 1),
                ["DefaultRaceLength"] = seasonLeague.RaceLength,
                ["Climates"] = Climates,
            };

        var dialog = await DialogService.ShowAsync<AddRaces>("Insert races", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is List<Race> addedRaces)
        {
            await RaceService.InsertRaces(addedRaces);
            RaceCalendar = await RaceService.GetRaceCalendar(Season.Id);
        }
    }

    private async Task UpdateRace(long raceId)
    {
        var item = await RaceService.GetRaceById(raceId);
        var seasonLeague = await LeagueService.GetLeagueById(Season.LeagueId);

        if (seasonLeague == null)
        {
            Snackbar.Add("how in the hell is it unknown which league this is, cant do shit now?!", Severity.Error);
            return;
        }

        var parameters = new DialogParameters 
            {
                ["Race"] = item,
                ["SeasonId"] = Season.Id,
                ["IncomingRound"] = item.Round,
                ["DefaultRaceLength"] = seasonLeague.RaceLength,
                ["Climates"] = Climates,
            };

        var dialog = await DialogService.ShowAsync<RaceEditor>("Modify Race", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Race updatedRace)
        {
            await RaceService.UpdateRace(updatedRace);
            RaceCalendar = await RaceService.GetRaceCalendar(Season.Id);
        }
    }

    private async Task DeleteRace(long raceId)
    {
        await RaceService.DeleteRace(raceId);
        RaceCalendar.Remove(RaceCalendar.First(e => e.RaceId == raceId));
    }

    private async Task GoToRaceWeek(CalendarRaceModel race)
    {
        if (race.State == State.Concept)
        {
            if (race.Round == _nextRound)
                await RaceService.ActivateRace(race.RaceId);
            else
            {
                Snackbar.Add("oi oi oi, a previous round hasn't been finished (or even started!) yet. do that one first, cunt.", Severity.Error);
                return;
            }
        }

        Nav.NavigateTo($"/raceweek/{race.RaceId}");
    }
}
