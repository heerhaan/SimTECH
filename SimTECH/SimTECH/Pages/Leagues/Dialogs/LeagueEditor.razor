@using SimTECH.Pages.Leagues.Components

@inject IOptions<SimConfig> _config

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h3">Modify league</MudText>
        <MudText Typo="Typo.body2">
            Keep in mind that race length is used to determine the amount of calcuations each race, 
            which is why we round to 10 since every ten decimals amounts to one additional calculation.
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (!loading)
        {
            <MudGrid>
                <MudItem xs="4">
                    <MudText Typo="Typo.subtitle1">League settings</MudText>
                    <MudDivider />

                    <MudTextField @bind-Value="Model.Name" Label="Name" Class="field-md" />
                    <MudNumericField @bind-Value="Model.RaceLength"
                                     Min="10"
                                     Step="10"
                                     Label="Length (km)"
                                     HelperText="Should round to nearest ten."
                                     Validation="@(new Func<int, string?>(LengthValidator))"
                                     Class="field-md" />
                    <MudNumericField @bind-Value="Model.BattleRng"
                                     Min="1"
                                     Label="Battle RNG"
                                     HelperText="Range is between given value and negative given value."
                                     Class="field-md" />

                    @if (errorValidations.Any())
                    {
                        <MudList T="string">
                            <MudListSubheader>Error messages</MudListSubheader>
                            @foreach (var error in errorValidations)
                            {
                                <MudListItem>
                                    <MudText Color="Color.Error">@error</MudText>
                                </MudListItem>
                            }
                        </MudList>
                    }
                </MudItem>
                <MudItem xs="3">
                    <MudText Typo="Typo.subtitle1">Toggles</MudText>
                    <MudDivider />

                    <MudStack Class="mt-2">
                        <MudSwitchM3 @bind-Value="Model.UsePenalty"
                                     T="bool"
                                     ThumbIcon="@Icons.Material.Filled.Done"
                                     ThumbOffIcon="@Icons.Material.Filled.Close"
                                     Label="Penalties"
                                     Color="Color.Secondary" />
                        <MudSwitchM3 @bind-Value="Model.EnableFatality"
                                     T="bool"
                                     ThumbIcon="@Icons.Material.Filled.Done"
                                     ThumbOffIcon="@Icons.Material.Filled.Close"
                                     Label="Fatalities"
                                     Color="Color.Secondary" />
                        <MudSwitchM3 @bind-Value="Model.AllowContracting"
                                     T="bool"
                                     ThumbIcon="@Icons.Material.Filled.Done"
                                     ThumbOffIcon="@Icons.Material.Filled.Close"
                                     Label="Contracts"
                                     Color="Color.Secondary" />
                        <MudSwitchM3 @bind-Value="Model.AllowPersonalNumbers"
                                     T="bool"
                                     ThumbIcon="@Icons.Material.Filled.Done"
                                     ThumbOffIcon="@Icons.Material.Filled.Close"
                                     Label="Personal numbers"
                                     Color="Color.Secondary" />
                    </MudStack>
                </MudItem>
                <MudItem xs="5">
                    <MudText Typo="Typo.subtitle1">Available tyres for league<span style="color:red">*</span></MudText>
                    <MudDivider />

                    <MudTable @bind-SelectedItems="selectedTyres"
                              Items="@Tyres"
                              MultiSelection="true"
                              SelectOnRowClick="true"
                              Dense="true"
                              Hover="true">
                        <HeaderContent>
                            <MudTh>Tyre</MudTh>
                            <MudTh>
                                <MudTooltip Text="Life bonus; additional pace per newly fitted tyre">
                                    LB
                                </MudTooltip>
                            </MudTh>
                            <MudTh>Wear</MudTh>
                            <MudTh>Length</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>
                                <TyreElement Colour="@context.Colour">
                                    @context.Name.ElementAt(0)
                                </TyreElement>
                            </MudTd>
                            <MudTd>@context.Pace</MudTd>
                            <MudTd>
                                <MudStack Row="true" Spacing="1" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.caption">@context.WearMin</MudText>
                                    <MudIcon Size="Size.Small" Icon="@IconCollection.ArrowMoveHorizontal" />
                                    <MudText Typo="Typo.caption">@context.WearMax</MudText>
                                </MudStack>
                            </MudTd>
                            <MudTd>@context.ExpectedLength(advanceDistance)km</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudItem>
                <MudItem xs="4">
                    <MudText Typo="Typo.subtitle1">Configurations</MudText>
                    <MudDivider />
                    <MudText Typo="Typo.body2" Color="Color.Info">
                        About odds: input is the upper value and the lower value is 0, if the random number is 0 then action will apply (so 0 means guaranteed).
                    </MudText>
                    @if (Model.EnableFatality)
                    {
                        <div class="d-flex flex-row">
                            <MudNumericField @bind-Value="Model.FatalityOdds"
                                             Min="0"
                                             Label="Fatal incident odds" />
                            <div class="inline-info-text-container">
                                <MudText Typo="Typo.body1">@(NumberHelper.Percentage(1, 1 + Model.FatalityOdds))%</MudText>
                            </div>
                        </div>
                    }
                    <div class="d-flex flex-row">
                        <MudNumericField @bind-Value="Model.DisqualificationOdds"
                                         Min="0"
                                         Label="Disqualification odds" />
                        <div class="inline-info-text-container">
                            <MudText Typo="Typo.body1">@(NumberHelper.Percentage(1, 1 + Model.DisqualificationOdds))%</MudText>
                        </div>
                    </div>
                    <div class="d-flex flex-row">
                        <MudNumericField @bind-Value="Model.SafetyCarOdds"
                                         Min="0"
                                         Label="Safety car odds after incident" />
                        <div class="inline-info-text-container">
                            <MudText Typo="Typo.body1">@(NumberHelper.Percentage(1, 1 + Model.SafetyCarOdds))%</MudText>
                        </div>
                    </div>
                    <div class="d-flex flex-row">
                        <MudNumericField @bind-Value="Model.SafetyCarReturnOdds"
                                         Min="0"
                                         Label="Safety car return odds" />
                        <div class="inline-info-text-container">
                            <MudText Typo="Typo.body1">@(NumberHelper.Percentage(1, 1 + Model.SafetyCarReturnOdds))%</MudText>
                        </div>
                    </div>
                    <MudNumericField @bind-Value="Model.SafetyCarGap"
                                     Min="1"
                                     Label="Gap between drivers during a SC" />
                    <MudNumericField @bind-Value="Model.SafetyCarGapCloser"
                                     Min="50"
                                     Label="How much the gap closes during a SC every advance" />
                    <MudNumericField @bind-Value="Model.DriverStatusPaceModifier"
                                     Min="0"
                                     Label="Main/support driver pace modifier" />
                    <MudNumericField @bind-Value="Model.SetupRng"
                                     Min="0"
                                     Label="Max. setup score to gain per practice session" />
                </MudItem>
                <MudItem xs="8" Style="min-height: 500px">
                    <MudText Typo="Typo.subtitle1">Weighted development ranges</MudText>
                    <MudDivider />

                    <MudText Typo="Typo.body2" Color="Color.Info">
                        The range which will be used is the first comparer ('less than') which is equal or less than the corresponding value.
                        &nbsp;So for a skill of 31, it would take the first comparer which is equal or less than 31.
                    </MudText>
                    <MudStack Row="true" Class="pa-0">
                        <MudChipSet T="Aspect"
                                    @bind-SelectedChip="selectedChip"
                                    CheckMark="true"
                                    Class="d-flex flex-column flex-wrap mt-3"
                                    Style="height: 200px; width: 250px">
                            @foreach (var aspect in rangeables)
                            {
                                <MudChip Text="@aspect.GetReadableAspect()"
                                         Value="@aspect"
                                         Color="Color.Secondary"
                                         Style="width: 100px" />
                            }
                        </MudChipSet>
                        @if (selectedChip != null && selectedChip.Value is Aspect selectedAspect)
                        {
                            <RangeInput @bind-Items="weightedAspects[selectedAspect]"
                                        RangeType="@selectedAspect"
                                        Style="@("width: calc(100% - 250px)")" />
                        }
                    </MudStack>
                </MudItem>
            </MudGrid>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private int halfAmountAspects = AspectEnumHelper.GetRangeableAspects.Length / 2;
    private static readonly Aspect[] rangeables = AspectEnumHelper.GetRangeableAspects;

    [CascadingParameter] protected MudDialogInstance? LeagueDialog { get; set; }

    [Parameter] public League? League { get; set; }
    [Parameter] public List<Tyre> Tyres { get; set; }

    private EditLeagueModel Model;
    private bool loading = true;
    private int advanceDistance;

    private Dictionary<Aspect, List<EditRangeModel>> weightedAspects = new();
    private HashSet<Tyre> selectedTyres = new();

    private MudChip<Aspect>? selectedChip;

    private List<string> errorValidations = new();

    protected override void OnInitialized()
    {
        Model = new EditLeagueModel(League);

        foreach (var range in rangeables)
            weightedAspects.Add(range, new());

        if (League != null)
        {
            foreach (var developGroup in Model.DevelopmentRanges.OrderBy(e => (int)e.Type).GroupBy(e => e.Type))
                weightedAspects[developGroup.Key].AddRange(developGroup);

            foreach (var leagueTyre in Model.LeagueTyres)
            {
                var matchTyre = Tyres.FirstOrDefault(e => e.Id == leagueTyre.TyreId);
                if (matchTyre != null)
                    selectedTyres.Add(matchTyre);
            }
        }

        advanceDistance = _config.Value.CalculationDistance;

        loading = false;
    }

    private string? LengthValidator(int length)
    {
        if ((length % 10) != 0)
            return "Race length should be a factor of 10";

        return null;
    }

    private bool RunValidations()
    {
        errorValidations.Clear();

        var isValid = true;

        if ((Model.RaceLength % 10) != 0)
        {
            errorValidations.Add("Race length should be a factor of 10");
            isValid = false;
        }

        if (selectedTyres.Count(e => e.ForWet) == 0 || selectedTyres.Count(e => !e.ForWet) == 0)
        {
            errorValidations.Add("At least one normal and one wet tyre is required");
            isValid = false;
        }

        return isValid;
    }

    private void Submit()
    {
        if (!RunValidations())
            return;

        Model.DevelopmentRanges = weightedAspects
            .Where(e => e.Value.Any())
            .SelectMany(e => e.Value)
            .ToList();

        Model.LeagueTyres = selectedTyres
            .Select(e => new EditLeagueTyreModel { LeagueId = Model.Id, TyreId = e.Id })
            .ToList();

        if (Model.IsDirty)
        {
            var modLeague = Model.Record;
            LeagueDialog?.Close(DialogResult.Ok(modLeague));
        }
    }

    private void Cancel() => LeagueDialog?.Cancel();
}
