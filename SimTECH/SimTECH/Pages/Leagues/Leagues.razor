@page "/leagues"
@inject BreadcrumbProvider Bread
@inject LeagueService LeagueService
@inject IDialogService DialogService

<PageTitle>Leagues</PageTitle>

<MudContainer>
    <MudDataGrid T="League" Items="@LeagueData" Loading="_loading" LoadingProgressColor="Color.Info" Bordered="true" Class="my-2">
        <ToolBarContent>
            <MudText Typo="Typo.h4">Leagues</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" OnClick="AddLeague">New</MudButton>
        </ToolBarContent>
        <Columns>
            <HierarchyColumn T="League" />
            <PropertyColumn Property="e => e.Name" />
            <PropertyColumn Property="e => e.RaceLength" Title="Length (in km)" />
            <PropertyColumn Property="e => e.State" />
            <TemplateColumn Sortable="false" CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudButtonGroup Size="Size.Small">
                        @*<MudIconButton Icon="@Icons.Material.Filled.ElectricBolt" OnClick="@(async () => await ActivateLeague(context.Item))" />*@
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateLeague(context.Item))" />
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(async () => await DeleteLeague(context.Item))" />
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            @if (context.Item.DevelopmentRanges != null)
            {
                <MudStack Spacing="2" Row="true">
                    @foreach (var rangeGroup in context.Item.DevelopmentRanges.GroupBy(e => e.Type))
                    {
                        <MudPaper Elevation="15">
                            <MudList>
                                <MudListSubheader>Development ranges for @rangeGroup.Key.ToString()</MudListSubheader>
                                @foreach (var range in rangeGroup)
                                {
                                    <MudListItem>@range.Comparer | @range.Minimum ↔ @range.Maximum</MudListItem>
                                }
                            </MudList>
                        </MudPaper>
                    }
                </MudStack>
            }
            else
            {
                <MudText>There aren't any development ranges set at all!</MudText>
            }
        </ChildRowContent>
    </MudDataGrid>
</MudContainer>

@code {
    DialogOptions dialogOptions = new() { MaxWidth = MaxWidth.ExtraLarge };
    List<League> LeagueData = new List<League>();

    bool _loading = true;
    //private long activeLeagueId { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        Bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
        });

        LeagueData = await LeagueService.GetLeagues();
        _loading = false;
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    var storedLeagueId = await LocalStorage.GetAsync<long>("activeleague");
    //    if (storedLeagueId.Success)
    //    {
    //        activeLeagueId = storedLeagueId.Value;
    //    }
    //}

    //async Task ActivateLeague(League item)
    //{
    //    await LocalStorage.SetAsync("activeleague", item.Id);
    //}

    async Task AddLeague() => await UpdateLeague(new League());
    async Task UpdateLeague(League item)
    {
        var parameters = new DialogParameters { ["League"] = (item) };

        var dialog = await DialogService.ShowAsync<LeagueEditor>("Modify League", parameters, dialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is League updatedLeague)
        {
            await LeagueService.UpdateLeague(updatedLeague);
            LeagueData = await LeagueService.GetLeagues();
        }
    }

    async Task DeleteLeague(League league)
    {
        await LeagueService.DeleteLeague(league);
        LeagueData.Remove(league);
    }
}
