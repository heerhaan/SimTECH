@page "/leagues"
@inject BreadcrumbProvider _bread
@inject NavigationManager _nav
@inject LeagueService LeagueService
@inject IDialogService DialogService

<PageTitle>Leagues</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper MinHeight="60px">
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4">
            <MudText Typo="Typo.h3">Leagues</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="AddLeague">New</MudButton>
        </MudStack>
    </MudPaper>
    <MudDataGrid T="League" Items="@LeagueData" Bordered="true">
        <Columns>
            <HierarchyColumn T="League" />
            <PropertyColumn Property="e => e!.Name" />
            <PropertyColumn Property="e => e!.RaceLength" Title="Length" Style="font-family: var(--mud-typography-caption-family)" />
            <TemplateColumn T="League" Sortable="false">
                <CellTemplate>
                    <MudButtonGroup Size="Size.Small">
                        @if (context.Item.Options.HasFlag(LeagueOptions.AllowContracting))
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.AssignmentTurnedIn"
                                           OnClick="@(() => GoToLeagueContracts(context.Item.Id))" />
                        }
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit"
                                       OnClick="@(async () => await UpdateLeague(context.Item))" />
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete"
                                       Color="Color.Error"
                                       OnClick="@(async () => await DeleteLeague(context.Item))" />
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            <MudPaper Elevation="15" Class="pa-2">
                <MudText Typo="Typo.h5">League info</MudText>
                <MudDivider />

                <MudPaper Class="pa-2">
                    <MudText Typo="Typo.subtitle1">Options</MudText>
                    <MudText Typo="Typo.body2">
                        Penalties are @(context.Item.Options.HasFlag(LeagueOptions.EnablePenalty) ? "enabled" : "disabled")
                    </MudText>
                    <MudText Typo="Typo.body2">
                        Fatalities are @(context.Item.Options.HasFlag(LeagueOptions.EnableFatality) ? "enabled" : "disabled")
                    </MudText>
                    <MudText Typo="Typo.body2">
                        Contracts are @(context.Item.Options.HasFlag(LeagueOptions.AllowContracting) ? "enabled" : "disabled")
                    </MudText>
                </MudPaper>

                @if (context.Item.DevelopmentRanges != null)
                {
                    <MudText Typo="Typo.h6">Development ranges</MudText>
                    <MudStack Spacing="2" Row="true" Justify="Justify.SpaceBetween" Class="flex-wrap ">
                        @foreach (var rangeGroup in context.Item.DevelopmentRanges.GroupBy(e => e.Type))
                        {
                            <MudStack>
                                <MudText Typo="Typo.subtitle1">@rangeGroup.Key</MudText>
                                <MudSimpleTable>
                                    <thead>
                                        <tr>
                                            <th>Less than</th>
                                            <th>Lower</th>
                                            <th>Upper</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var range in rangeGroup.OrderBy(e => e.Comparer))
                                        {
                                            <tr>
                                                <td>@range.Comparer</td>
                                                <td>@range.Minimum</td>
                                                <td>@range.Maximum</td>
                                            </tr>
                                        }
                                    </tbody>
                                </MudSimpleTable>
                            </MudStack>
                        }
                    </MudStack>
                }
                else
                {
                    <MudText>There aren't any development ranges set at all!</MudText>
                }
            </MudPaper>
        </ChildRowContent>
    </MudDataGrid>
</MudContainer>

@code {
    DialogOptions dialogOptions = new() { MaxWidth = MaxWidth.ExtraLarge };
    List<League> LeagueData = new List<League>();

    protected override async Task OnInitializedAsync()
    {
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Leagues", href: "leagues", disabled: true),
        });

        LeagueData = await LeagueService.GetLeagues();
    }

    async Task AddLeague() => await UpdateLeague(null);
    async Task UpdateLeague(League? item)
    {
        var parameters = new DialogParameters { ["League"] = (item) };

        var dialog = await DialogService.ShowAsync<LeagueEditor>("Modify League", parameters, dialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is League updatedLeague)
        {
            await LeagueService.UpdateLeague(updatedLeague);
            LeagueData = await LeagueService.GetLeagues();
        }
    }

    async Task DeleteLeague(League league)
    {
        await LeagueService.DeleteLeague(league);
        LeagueData.Remove(league);
    }

    void GoToLeagueContracts(long leagueId) => _nav.NavigateTo($"league/contracts/{leagueId}");
}
