@page "/leagues"

@inject LeagueService LeagueService
@inject IDialogService DialogService

<PageTitle>Leagues</PageTitle>

<MudContainer>
    <MudPaper Class="d-flex justify-space-between pa-2 mx-2 my-2">
        <MudText Typo="Typo.h4">Leagues</MudText>
        <MudButton Variant="Variant.Text" Color="Color.Success" OnClick="AddLeague">New</MudButton>
    </MudPaper>
    <MudTable Items="@leagueData" Loading="_loading" LoadingProgressColor="Color.Info" Bordered="true">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>State</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Name</MudTd>
            <MudTd>@context.State</MudTd>
            <MudTd Class="d-flex justify-end">
                <MudButtonGroup>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateLeague(context))" />
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    private bool _loading = true;
    private IEnumerable<League> leagueData = new List<League>();

    protected override async Task OnInitializedAsync()
    {
        leagueData = await LeagueService.GetLeagues();
        _loading = false;
    }

    async Task AddLeague() => await UpdateLeague(new League());
    async Task UpdateLeague(League item)
    {
        var parameters = new DialogParameters { ["League"] = (item) };

        var dialog = await DialogService.ShowAsync<LeagueEditor>("Modify League", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is League updatedLeague)
            await LeagueService.UpdateLeague(updatedLeague);

    }
}
