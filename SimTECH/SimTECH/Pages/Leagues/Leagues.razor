@page "/leagues"
@inject LeagueService LeagueService
@inject IDialogService DialogService

<PageTitle>Leagues</PageTitle>

<MudContainer>
    <MudPaper Class="d-flex justify-space-between pa-2 mx-2 my-2">
        <MudText Typo="Typo.h4">Leagues</MudText>
        <MudButton Variant="Variant.Text" Color="Color.Success" OnClick="AddLeague">New</MudButton>
    </MudPaper>
    <MudDataGrid T="League" Items="@LeagueData" Loading="_loading" LoadingProgressColor="Color.Info" Bordered="true">
        <Columns>
            <HierarchyColumn T="League" />
            <Column T="League" Field="Name" />
            <Column T="League" Field="State" />
            <Column T="League" CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudButtonGroup>
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateLeague(context.Item))" />
                    </MudButtonGroup>
                </CellTemplate>
            </Column>
        </Columns>
        <ChildRowContent>
            <MudGrid>

            </MudGrid>
        </ChildRowContent>
    </MudDataGrid>
</MudContainer>

@code {
    private bool _loading = true;
    private IEnumerable<League> LeagueData = new List<League>();

    protected override async Task OnInitializedAsync()
    {
        LeagueData = await LeagueService.GetLeagues();
        _loading = false;
    }

    async Task AddLeague() => await UpdateLeague(new League());
    async Task UpdateLeague(League item)
    {
        var parameters = new DialogParameters { ["League"] = (item) };

        var dialog = await DialogService.ShowAsync<LeagueEditor>("Modify League", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is League updatedLeague)
        {
            await LeagueService.UpdateLeague(updatedLeague);
            LeagueData = await LeagueService.GetLeagues();
        }
    }
}
