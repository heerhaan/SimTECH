@page "/leagues"
@inject LeagueService LeagueService
@inject IDialogService DialogService

<PageTitle>Leagues</PageTitle>

<MudContainer>
    <MudPaper Class="d-flex justify-space-between pa-2 mx-2 my-2">
        <MudText Typo="Typo.h4">Leagues</MudText>
        <MudButton Variant="Variant.Text" Color="Color.Success" OnClick="AddLeague">New</MudButton>
    </MudPaper>
    <MudDataGrid T="League" Items="@LeagueData" Loading="_loading" LoadingProgressColor="Color.Info" Bordered="true">
        <Columns>
            <HierarchyColumn T="League" />
            <PropertyColumn Property="e => e.Name" />
            <PropertyColumn Property="e => e.State" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudButtonGroup Size="Size.Small">
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateLeague(context.Item))" />
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(async () => await DeleteLeague(context.Item))" />
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            @if (context.Item.DevelopmentRanges != null)
            {
                <MudStack Spacing="2" Row="true">
                    @foreach (var rangeGroup in context.Item.DevelopmentRanges.GroupBy(e => e.Type))
                    {
                        <MudPaper Elevation="15">
                            <MudList>
                                <MudListSubheader>Development ranges for @rangeGroup.Key.ToString()</MudListSubheader>
                                @foreach (var range in rangeGroup)
                                {
                                    <MudListItem>@range.Comparer - @range.Minimum - @range.Maximum</MudListItem>
                                }
                            </MudList>
                        </MudPaper>
                    }
                </MudStack>
            }
            else
            {
                <MudText>There aren't any development ranges set at all!</MudText>
            }
        </ChildRowContent>
    </MudDataGrid>
</MudContainer>

@code {
    private bool _loading = true;
    private DialogOptions dialogOptions = new()
    {
        MaxWidth = MaxWidth.ExtraLarge,
    };
    private List<League> LeagueData = new List<League>();

    protected override async Task OnInitializedAsync()
    {
        LeagueData = await LeagueService.GetLeagues();
        _loading = false;
    }

    async Task AddLeague() => await UpdateLeague(new League());
    async Task UpdateLeague(League item)
    {
        var parameters = new DialogParameters { ["League"] = (item) };

        var dialog = await DialogService.ShowAsync<LeagueEditor>("Modify League", parameters, dialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is League updatedLeague)
        {
            await LeagueService.UpdateLeague(updatedLeague);
            LeagueData = await LeagueService.GetLeagues();
        }
    }

    async Task DeleteLeague(League league)
    {
        await LeagueService.DeleteLeague(league);
        LeagueData.Remove(league);
    }
}
