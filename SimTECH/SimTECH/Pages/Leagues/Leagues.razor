@page "/leagues"

@inject LeagueService LeagueService
@inject IDialogService DialogService

<PageTitle>Leagues</PageTitle>

<MudContainer>
    <MudPaper Class="d-flex align-center pa-2 mx-2 my-2">
        <MudText Typo="Typo.h4">Leagues</MudText>
        <MudButton Variant="Variant.Text" Color="Color.Success" OnClick="EditLeague">New</MudButton>
    </MudPaper>
    <MudDataGrid T="League" Items="@leagueData" ReadOnly="@_readOnly" EditMode="DataGridEditMode.Cell" CommittedItemChanges="ModifyLeague"
        Bordered="true" Dense="true" EditTrigger="DataGridEditTrigger.OnRowClick">
        <Columns>
            <Column T="League" Field="Name" />
            <Column T="League" Field="State" IsEditable="false" />
            @*<Column T="League" CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudButtonGroup>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
                    </MudButtonGroup>
                </CellTemplate>
            </Column>*@
        </Columns>
        <PagerContent>
            <MudDataGridPager T="League" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    private bool _readOnly = false;
    
    private List<League> leagueData = new();

    protected override async Task OnInitializedAsync()
    {
        leagueData = await LeagueService.GetLeagues();
    }

    // TODO: If you want this modify to work, then use the edit model to display values and output them too
    async Task ModifyLeague(League item)
    {
        await LeagueService.UpdateLeague(item);
    }

    async Task EditLeague()
    {
        var dialog = await DialogService.ShowAsync<LeagueEditor>("Create a new league");
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is League newLeague)
        {
            leagueData.Add(newLeague);
        }
    }
}
