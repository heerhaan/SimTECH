@page "/leagues"
@inject BreadcrumbProvider Bread
@inject LeagueService LeagueService
@inject IDialogService DialogService

<PageTitle>Leagues</PageTitle>

<MudContainer>
    <MudDataGrid T="League" Items="@LeagueData" Loading="_loading" LoadingProgressColor="Color.Info" Bordered="true" Class="my-2">
        <ToolBarContent>
            <MudText Typo="Typo.h4">Leagues</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" OnClick="AddLeague">New</MudButton>
        </ToolBarContent>
        <Columns>
            <HierarchyColumn T="League" />
            <PropertyColumn Property="e => e.Name" />
            <PropertyColumn Property="e => e.RaceLength" Title="Length (Km)" />
            <TemplateColumn Sortable="false" CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudButtonGroup Size="Size.Small">
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateLeague(context.Item))" />
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(async () => await DeleteLeague(context.Item))" />
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            <MudPaper Elevation="15" Class="pa-2">
                <MudText Typo="Typo.h5">League info</MudText>
                <MudDivider />

                <MudPaper Class="pa-2">
                    <MudText Typo="Typo.subtitle1">Options</MudText>
                    <MudText Typo="Typo.body2">
                        Penalties are @(context.Item.Options.HasFlag(LeagueOptions.EnablePenalty) ? "enabled" : "disabled")
                    </MudText>
                </MudPaper>

                @if (context.Item.DevelopmentRanges != null)
                {
                    <MudText Typo="Typo.h6">Development ranges</MudText>
                    <MudStack Spacing="2" Row="true" Justify="Justify.SpaceBetween">
                        @foreach (var rangeGroup in context.Item.DevelopmentRanges.GroupBy(e => e.Type))
                        {
                            <MudStack>
                                <MudText Typo="Typo.overline">@rangeGroup.Key</MudText>
                                <MudSimpleTable>
                                    <thead>
                                        <tr>
                                            <th>Less than</th>
                                            <th>Lower</th>
                                            <th>Upper</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var range in rangeGroup)
                                        {
                                            <tr>
                                                <td>@range.Comparer</td>
                                                <td>@range.Minimum</td>
                                                <td>@range.Maximum</td>
                                            </tr>
                                        }
                                    </tbody>
                                </MudSimpleTable>
                            </MudStack>
                        }
                    </MudStack>
                }
                else
                {
                    <MudText>There aren't any development ranges set at all!</MudText>
                }
            </MudPaper>
        </ChildRowContent>
    </MudDataGrid>
</MudContainer>

@code {
    DialogOptions dialogOptions = new() { MaxWidth = MaxWidth.ExtraLarge };
    List<League> LeagueData = new List<League>();

    bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        Bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
        });

        LeagueData = await LeagueService.GetLeagues();
        _loading = false;
    }

    async Task AddLeague() => await UpdateLeague(new League());

    async Task UpdateLeague(League item)
    {
        var parameters = new DialogParameters { ["League"] = (item) };

        var dialog = await DialogService.ShowAsync<LeagueEditor>("Modify League", parameters, dialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is League updatedLeague)
        {
            await LeagueService.UpdateLeague(updatedLeague);
            LeagueData = await LeagueService.GetLeagues();
        }
    }

    async Task DeleteLeague(League league)
    {
        await LeagueService.DeleteLeague(league);
        LeagueData.Remove(league);
    }
}
