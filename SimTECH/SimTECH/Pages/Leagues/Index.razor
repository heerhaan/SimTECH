@page "/leagues"

@using SimTECH.PageModels.Leagues;
@using SimTECH.Pages.Leagues.Dialogs;

@inject LeagueService _leagueService
@inject TyreService _tyreService
@inject BreadcrumbProvider _bread
@inject NavigationManager _nav
@inject IDialogService _dialogService
@inject IOptions<SimConfig> _config

<PageTitle>Leagues</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Elevation="15" Height="75px" Class="d-flex flex-row align-center pa-4">
        <MudText Typo="Typo.h3">Leagues</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" Size="Size.Small" OnClick="AddLeague"
                   StartIcon="@Icons.Material.Filled.Add" IconSize="Size.Small" IconColor="Color.Tertiary" Class="btn-md">
            New
        </MudButton>
    </MudPaper>
    <MudDataGrid T="LeagueListItem" Items="@LeagueList" Bordered="true">
        <Columns>
            <HierarchyColumn T="LeagueListItem" />
            <PropertyColumn Property="e => e.Name" />
            <PropertyColumn Property="e => e.RaceLength" Title="Length" Style="font-family: var(--mud-typography-caption-family)" />
            <TemplateColumn T="LeagueListItem" Sortable="false">
                <CellTemplate>
                    <MudButtonGroup Size="Size.Small">
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit"
                                       OnClick="@(async () => await UpdateLeague(context.Item.League))" />
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete"
                                       Color="Color.Error"
                                       OnClick="@(async () => await DeleteLeague(context.Item.League))" />
                        @if (context.Item.Options.HasFlag(LeagueOptions.AllowContracting))
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.AssignmentInd"
                                           Color="Color.Primary"
                                           OnClick="@(() => GoToManager(context.Item.Id))" />
                        }
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            <MudPaper Elevation="15" Class="pa-2">
                <MudText Typo="Typo.h5">@context.Item.Name</MudText>
                <MudDivider />

                <MudStack Row="true" Justify="Justify.SpaceBetween" Class="pa-0">
                    <MudPaper Elevation="15" Class="px-4 py-2">
                        <MudText Typo="Typo.h5">Options</MudText>
                        <MudDivider />

                        <MudStack Class="mt-2">
                                <MudSwitchM3 Value="@context.Item.Options.HasFlag(LeagueOptions.EnablePenalty)"
                                         ThumbIcon="@Icons.Material.Filled.Done"
                                         ThumbOffIcon="@Icons.Material.Filled.Close"
                                         Label="Penalties"
                                         ReadOnly="true"
                                         Color="Color.Secondary" />

                            <MudSwitchM3 Value="@context.Item.Options.HasFlag(LeagueOptions.EnableFatality)"
                                         ThumbIcon="@Icons.Material.Filled.Done"
                                         ThumbOffIcon="@Icons.Material.Filled.Close"
                                         Label="Fatalities"
                                         ReadOnly="true"
                                         Color="Color.Secondary" />

                                <MudSwitchM3 Value="@context.Item.Options.HasFlag(LeagueOptions.AllowContracting)"
                                         ThumbIcon="@Icons.Material.Filled.Done"
                                         ThumbOffIcon="@Icons.Material.Filled.Close"
                                         Label="Contracts"
                                         ReadOnly="true"
                                         Color="Color.Secondary" />

                                <MudSwitchM3 Value="@context.Item.Options.HasFlag(LeagueOptions.PersonalNumbers)"
                                         ThumbIcon="@Icons.Material.Filled.Done"
                                         ThumbOffIcon="@Icons.Material.Filled.Close"
                                         Label="Personal numbers"
                                         ReadOnly="true"
                                         Color="Color.Secondary" />
                        </MudStack>
                    </MudPaper>

                    <MudPaper Elevation="15" Class="px-4 py-2">
                        <MudText Typo="Typo.h5">Available tyres</MudText>
                        <MudDivider />

                        <MudSimpleTable>
                            <thead>
                                <tr>
                                    <th>Tyre</th>
                                    <th>LB</th>
                                    <th>Wear</th>
                                    <th>Length</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var tyre in context.Item.LeagueTyres)
                                {
                                    <tr>
                                        <td>
                                            <TyreElement Colour="@tyre.Colour">
                                                @tyre.Name.ElementAt(0)
                                            </TyreElement>
                                        </td>
                                        <td>@tyre.Pace</td>
                                        <td>
                                            <MudStack Row="true" Spacing="1" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                                <MudText Typo="Typo.caption">@tyre.WearMin</MudText>
                                                <MudIcon Size="Size.Small" Icon="@IconCollection.ArrowMoveHorizontal" />
                                                <MudText Typo="Typo.caption">@tyre.WearMax</MudText>
                                            </MudStack>
                                        </td>
                                        <td>@tyre.ExpectedLength(advanceDistance)km</td>
                                    </tr>
                                }
                            </tbody>
                        </MudSimpleTable>
                    </MudPaper>
                </MudStack>

                <MudPaper Elevation="15" Class="px-4 py-2">
                    <MudText Typo="Typo.h5">Development ranges</MudText>
                    <MudDivider />

                    @if (context.Item.DevelopmentRanges != null)
                    {
                        <MudStack Spacing="2" Row="true" Justify="Justify.SpaceBetween" Class="flex-wrap">
                            @foreach (var rangeGroup in context.Item.DevelopmentRanges.GroupBy(e => e.Type))
                            {
                                <MudStack Class="mt-2">
                                    <MudText Typo="Typo.subtitle1">@rangeGroup.Key</MudText>
                                    <MudDivider />

                                    <MudSimpleTable Striped="true">
                                        <thead>
                                            <tr>
                                                <th>&lt; LESS</th>
                                                <th>Lower</th>
                                                <th>Upper</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var range in rangeGroup.OrderBy(e => e.Comparer))
                                            {
                                                <tr>
                                                    <td>@range.Comparer</td>
                                                    <td>@range.Minimum</td>
                                                    <td>@range.Maximum</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </MudSimpleTable>
                                </MudStack>
                            }
                        </MudStack>
                    }
                    else
                    {
                        <MudText>There aren't any development ranges set at all!</MudText>
                    }
                </MudPaper>
            </MudPaper>
        </ChildRowContent>
    </MudDataGrid>
</MudContainer>

@code {
    private List<LeagueListItem> LeagueList { get; set; } = new();
    private List<League> Leagues { get; set; } = new();
    private List<Tyre> Tyres { get; set; } = new();

    private int advanceDistance;

    protected override async Task OnInitializedAsync()
    {
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Leagues", href: "leagues", disabled: true),
        });

        advanceDistance = _config.Value.CalculationDistance;

        Tyres = await _tyreService.GetTyres(StateFilter.Active);
        await LoadLeagueList();
    }

    private async Task LoadLeagueList()
    {
        Leagues = await _leagueService.GetLeagues();

        LeagueList = Leagues.Select(league =>
        {
            var listItem = league.ToListItem();
            var tyreIds = league.LeagueTyres?.Select(e => e.TyreId).ToList() ?? new();

            listItem.LeagueTyres = Tyres.Where(e => tyreIds.Contains(e.Id)).ToList();
            return listItem;
        }).ToList();
    }

    private async Task AddLeague() => await UpdateLeague(null);
    private async Task UpdateLeague(League? item)
    {
        var parameters = new DialogParameters { ["League"] = item, ["Tyres"] = Tyres };

        var dialog = await _dialogService.ShowAsync<LeagueEditor>(
            "Modify league",
            parameters,
            new DialogOptions { MaxWidth = MaxWidth.Large });
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is League updatedLeague)
        {
            await _leagueService.UpdateLeague(updatedLeague);
            await LoadLeagueList();
        }
    }

    private async Task DeleteLeague(League league)
    {
        await _leagueService.DeleteLeague(league);
        Leagues.Remove(league);
    }

    private void GoToManager(long leagueId) => _nav.NavigateTo($"contractmanager/{leagueId}");
}
