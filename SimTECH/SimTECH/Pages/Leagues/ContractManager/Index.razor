@page "/contractmanager/{LeagueId:long}"

@using SimTECH.Pages.Leagues.ContractManager.Components

@inject ContractService _contractService
@inject LeagueService _leagueService
@inject DriverService _driverService
@inject TeamService _teamService
@inject BreadcrumbProvider _bread
@inject NavigationManager _nav
@inject ISnackbar _snack

<PageTitle>Contract manager</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
    @if (League != null)
    {
        <MudPaper MaxHeight="150px" Class="text-center">
            <MudText Typo="Typo.h3" Class="mx-auto">Manage contracts for @League.Name</MudText>

            @* <ManagerSettings @bind-OnlyActiveTeams="onlyTeams" @bind-OnlyActiveDrivers="onlyDrivers">
                <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small">
                    <MudButton Color="Color.Primary" OnClick="HandleSettingLoad">Load</MudButton>
                    <MudButton Color="Color.Success" Disabled="@(!isLoaded)" OnClick="SaveContracts">Save</MudButton>
                </MudButtonGroup>
            </ManagerSettings> *@

            <MudStack Row="true" Spacing="5" Justify="Justify.Center" AlignItems="AlignItems.Center">
                <ManagerSettings @bind-OnlyActiveTeams="onlyTeams" @bind-OnlyActiveDrivers="onlyDrivers" />
                <MudButton Variant="Variant.Outlined" Size="Size.Medium" Color="Color.Info" OnClick="HandleSettingLoad">Reload</MudButton>
                <MudSpacer />
                <MudButton Variant="Variant.Outlined" Size="Size.Medium" Color="Color.Success" Disabled="@(!isLoaded)" OnClick="SaveContracts">Save</MudButton>
            </MudStack>
        </MudPaper>

        @if (isLoaded && EditableContracts.Any())
        {
            <MudPaper Elevation="10">
                <ManagerDropper @bind-EditableContracts="EditableContracts" Teams="@Teams" />
            </MudPaper>
        }
    }
</MudContainer>

@code {
    [Parameter] public long LeagueId { get; set; }

    public League? League { get; set; }
    public List<Contract> Contracts { get; set; } = new();
    public List<Team> Teams { get; set; } = new();
    public List<EditContract> EditableContracts { get; set; } = new();

    private bool onlyTeams = true;
    private bool onlyDrivers = true;
    private bool isLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        League = await _leagueService.GetLeagueById(LeagueId);
        Contracts = await _contractService.GetLeagueContracts(League.Id);

        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: "/"),
            new BreadcrumbItem("Leagues", href: "leagues"),
            new BreadcrumbItem("Contract manager", href: "contractmanager", disabled: true),
        });

        await HandleSettingLoad();
    }

    private async Task HandleSettingLoad()
    {
        if (League == null)
            return;

        List<Team> teams;
        if (onlyTeams)
            teams = await _teamService.GetLeagueTeams(League.Id);
        else
            teams = await _teamService.GetTeams();

        List<Driver> drivers;
        if (onlyDrivers)
            drivers = await _driverService.GetDriversFromLeague(League.Id);
        else
            drivers = await _driverService.GetDrivers();

        var editableContracts = Contracts.Select(e => new EditContract(e)).ToList();
        foreach (var editable in editableContracts)
        {
            editable.Team = teams.Find(e => e.Id == editable.TeamId);
            editable.Driver = drivers.Find(e => e.Id == editable.DriverId);
        }

        foreach (var freeAgent in drivers.Where(e => !editableContracts.Select(c => c.DriverId).Contains(e.Id)))
        {
            var agentContract = new EditContract(null);
            agentContract.DriverId = freeAgent.Id;
            agentContract.Driver = freeAgent;
            agentContract.LeagueId = League.Id;
            agentContract.Duration = 1;

            editableContracts.Add(agentContract);
        }

        Teams = teams;
        EditableContracts = editableContracts
            .Where(e => e.Driver != null)
            .OrderBy(e => e.Driver!.FirstName)
            .ToList();

        isLoaded = true;
    }

    private async Task SaveContracts()
    {
        var saveableContracts = EditableContracts
                .Where(e => e.TeamId != 0 && e.Team is not null)
                .ToList();

        if (saveableContracts.Any(e => e.Duration == 0))
        {
            _snack.Add("Not all assigned contracts have an actual duration, is meaningless without ya?", Severity.Warning);
            return;
        }

        if (saveableContracts.Any(e => e.LeagueId == 0 || e.DriverId == 0))
        {
            _snack.Add("Somehow the new contracts have some invalid data, dunno man. Weird shit.", Severity.Error);
            return;
        }

        var addedContracts = saveableContracts.Select(e => e.Record).ToList();
        await _contractService.AddContracts(addedContracts);

        Contracts = await _contractService.GetLeagueContracts(LeagueId);

        await HandleSettingLoad();

        _snack.Add($"Updated {League?.Name} contracts", Severity.Success);
    }
}
