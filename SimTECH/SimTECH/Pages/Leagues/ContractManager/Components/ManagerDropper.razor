<MudDropContainer T="EditContract"
                  @ref="@dropzone"
                  Items="@_editableContracts"
                  ItemDisabled="@((contract) => contract.Id != 0)"
                  ItemsSelector="@((item, dropzone) => $"{item.TeamId}" == dropzone)"
                  ItemDropped="DriverDropped"
                  ApplyDropClassesOnDragStarted="true"
                  CanDropClass="mud-border-success">
    <ChildContent>
        <MudStack Row="true" Style="max-height: 1100px">
            <MudPaper MaxHeight="100%" Width="400px">
                <MudDropZone T="EditContract"
                             Identifier="0"
                             Class="mud-width-full mud-height-full rounded-lg border-2 border-solid mud-border-lines-default pa-4"
                             Style="overflow-y:scroll">
                    <MudText Typo="Typo.subtitle1">Free agents</MudText>
                </MudDropZone>
            </MudPaper>
            <MudPaper MaxHeight="100%" MaxWidth="100%">
                <MudStack Row="true" Class="pa-0 flex-wrap" Style="max-height:100%; overflow-y:scroll">
                    @foreach (var team in Teams.OrderBy(e => e.Name))
                    {
                        <MudPaper MinHeight="300px" Width="400px" Class="ma-2">
                            <MudDropZone T="EditContract"
                                         Identifier="@($"{team.Id}")"
                                         Class="mud-width-full mud-height-full rounded-lg border-2 border-solid mud-border-lines-default pa-4">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-0">
                                    <MudText Class="overflow-hider">@team.Name</MudText>
                                    <MudSpacer />
                                    <CountryFlag Code="@team.Country" Size="ElementSize.Small" />
                                </MudStack>
                            </MudDropZone>
                        </MudPaper>
                    }
                </MudStack>
            </MudPaper>
        </MudStack>
    </ChildContent>
    <ItemRenderer>
        <MudPaper Class="mud-width-full border-2 border-dashed mud-border-tertiary pa-1 my-2" Style="@context.DropperStyle">
            <div class="d-flex flex-column">
                <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-0 mx-1">
                    <MudText Class="overflow-hider">@context.Driver?.FullName</MudText>
                    <MudSpacer />
                    <CountryFlag Code="@context.Driver?.Country" Size="ElementSize.Small" />
                </MudStack>
                @if (context.TeamId != default)
                {
                    <MudStack Row="true"
                              Justify="Justify.SpaceBetween"
                              AlignItems="AlignItems.Center"
                              Class="pa-0 mx-1"
                              Style="pointer-events: auto !important;">
                        <MudNumericField @bind-Value="context.Duration"
                                         Min="1"
                                         Disabled="@(!context.Editing)"
                                         Class="dense-field" />
                        <MudToggleIconButton @bind-Toggled="context.Editing"
                                             Size="Size.Small"
                                             Icon="@Icons.Material.Filled.Edit"
                                             Title="Edit"
                                             ToggledSize="Size.Small"
                                             ToggledIcon="@Icons.Material.Filled.Save"
                                             ToggledTitle="Save"
                                             Class="@ToggleButtonClass(context)">
                        </MudToggleIconButton>
                    </MudStack>
                }
            </div>
        </MudPaper>
    </ItemRenderer>
</MudDropContainer>

@code {
    private List<EditContract> _editableContracts
    {
        get => EditableContracts;
        set => EditableContractsChanged.InvokeAsync(value);
    }

    [Parameter] public IEnumerable<Team> Teams { get; set; } = Enumerable.Empty<Team>();
    [Parameter] public List<EditContract> EditableContracts { get; set; } = new List<EditContract>();
    [Parameter] public EventCallback<List<EditContract>> EditableContractsChanged { get; set; }

    private MudDropContainer<EditContract> dropzone;

    private void DriverDropped(MudItemDropInfo<EditContract> dropItem)
    {
        if (dropItem.Item != null)
        {
            var teamId = long.Parse(dropItem.DropzoneIdentifier);
            dropItem.Item.TeamId = teamId;
            dropItem.Item.Team = Teams.FirstOrDefault(e => e.Id == teamId);
        }
    }

    private string ToggleButtonClass(EditContract contract)
        => contract.Editing ? "inline-edit-toggle-btn active" : "inline-edit-toggle-btn";
}
