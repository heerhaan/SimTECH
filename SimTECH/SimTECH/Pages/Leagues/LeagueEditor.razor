<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h3">Modify league</MudText>
        <MudText Typo="Typo.body2">
            For the development ranges: the range which will be used is the first comparer ('less than') which is equal or less than
            the corresponding value. (For a skill of 31, it would take the first comparer which is equal or less than 31.)
            <br />
            Keep in mind that race length is used to determine the amount of calcuations each race,
            which is why we round to 10 since every ten decimals amounts to one additional calculation.
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@Model">
            <MudGrid>
                <MudItem xs="4">
                    <MudText Typo="Typo.subtitle1">League settings</MudText>
                    <MudDivider />
                    <MudTextField T="string" @bind-Value="Model.Name" Label="Name" Class="field-md" />
                    <MudNumericField T="int"
                                     @bind-Value="Model.RaceLength"
                                     Min="0"
                                     Step="10"
                                     Label="Length (km)"
                                     HelperText="Should round to nearest ten"
                                     Validation="@(new Func<int, string?>(LengthValidator))"
                                     Class="field-md" />
                </MudItem>
                <MudItem xs="4">
                    <MudText Typo="Typo.subtitle1">Weighted development ranges</MudText>
                    <MudDivider />
                    @if (!loading)
                    {
                        <MudChipSet @bind-SelectedValues="selectedAspects" MultiSelection="true" Filter="true">
                            @foreach (var aspect in rangeables)
                            {
                                <MudChip Text="@aspect.ReadableAspect()" Value="@aspect" Color="Color.Primary" />
                            }
                        </MudChipSet>
                    }
                </MudItem>
                <MudItem xs="4">
                    <MudText Typo="Typo.subtitle1">Options</MudText>
                    <MudDivider />
                    <MudStack>
                        <MudSwitchM3 @bind-Checked="Model.UsePenalty"
                                     ThumbIcon="@Icons.Material.Filled.Done"
                                     ThumbOffIcon="@Icons.Material.Filled.Close"
                                     Label="Enable Penalties"
                                     Color="Color.Secondary" />

                        <MudSwitchM3 @bind-Checked="Model.EnableFatality"
                                     ThumbIcon="@Icons.Material.Filled.Done"
                                     ThumbOffIcon="@Icons.Material.Filled.Close"
                                     Label="Enable Fatalities"
                                     Color="Color.Secondary" />

                        <MudSwitchM3 @bind-Checked="Model.AllowContracting"
                                     ThumbIcon="@Icons.Material.Filled.Done"
                                     ThumbOffIcon="@Icons.Material.Filled.Close"
                                     Label="Enable Contracts"
                                     Color="Color.Secondary" />
                    </MudStack>
                    @if (errorValidations.Any())
                    {
                        <MudList>
                            <MudListSubheader>Error messages</MudListSubheader>
                            @foreach (var error in errorValidations)
                            {
                                <MudListItem>
                                    <MudText Color="Color.Error">@error</MudText>
                                </MudListItem>
                            }
                        </MudList>
                    }
                </MudItem>
            </MudGrid>
            <MudStack Row="true" Justify="Justify.SpaceEvenly" Class="flex-wrap ">
                @if (selectedAspects != null)
                {
                    @foreach (var aspectRange in selectedAspects.Cast<Aspect>())
                    {
                        <MudPaper Elevation="5" Width="500px">
                            <RangeInput Items="@(weightedAspects[aspectRange])" RangeType="@aspectRange" />
                        </MudPaper>
                    }
                }
            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? LeagueDialog { get; set; }

    [Parameter] public League? League { get; set; }

    private EditLeagueModel Model;
    private bool loading = true;

    private Dictionary<Aspect, List<EditRangeModel>> weightedAspects = new();

    private static readonly Aspect[] rangeables = EnumHelper.RangeableAspects;
    private ICollection<object>? selectedAspects { get; set; }
    private List<string> errorValidations = new();

    protected override void OnInitialized()
    {
        Model = new EditLeagueModel(League);

        foreach (var range in rangeables)
            weightedAspects.Add(range, new());

        if (League != null)
        {
            foreach (var developGroup in Model.DevelopmentRanges.OrderBy(e => (int)e.Type).GroupBy(e => e.Type))
                weightedAspects[developGroup.Key].AddRange(developGroup);

            selectedAspects = Model.DevelopmentRanges.Select(e => e.Type).Distinct().Cast<object>().ToList();
        }

        loading = false;
    }

    private string? LengthValidator(int length)
    {
        if ((length % 10) != 0)
            return "Race length should be a factor of 10";

        return null;
    }

    private bool RunValidations()
    {
        var isValid = true;

        if ((Model.RaceLength % 10) != 0)
        {
            errorValidations.Add("Race length should be a factor of 10");
            isValid = false;
        }

        return isValid;
    }

    private void Submit()
    {
        if (!RunValidations())
            return;

        var activeAspects = selectedAspects?.Cast<Aspect>().ToList() ?? new();
        Model.DevelopmentRanges = weightedAspects.Where(e => activeAspects.Contains(e.Key)).SelectMany(e => e.Value).ToList();

        if (Model.IsDirty)
        {
            var modLeague = Model.Record;
            LeagueDialog?.Close(DialogResult.Ok(modLeague));
        }
    }

    private void Cancel() => LeagueDialog?.Cancel();
}
