<MudDialog>
    <TitleContent>
        <MudText>Modify league</MudText>
        <MudText>Keep in mind that race length is used to determine the amount of calcuations each race,
            which is why we round to 10 since every ten decimals amounts to one additional calculation.
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@model" @ref="form">
            <MudGrid>
                <MudItem xs="9">
                    <MudTextField T="string" @bind-Value="model.Name" Label="Name" Class="field-md" />
                    <MudNumericField T="int" @bind-Value="model.RaceLength" Step="10" Label="RaceLength" HelperText="Should round to nearest ten" Validation="@(new Func<int, string>(LengthValidator))" Class="field-md" />
                </MudItem>

                <MudItem xs="3">
                    @if (errorValidations.Any())
                    {
                        <MudList>
                            <MudListSubheader>Error messages</MudListSubheader>
                            @foreach (var error in errorValidations)
                            {
                                <MudListItem>
                                    <MudText Color="Color.Error">@error</MudText>
                                </MudListItem>
                            }
                        </MudList>
                    }
                </MudItem>

                <MudItem xs="6">
                    <MudPaper Elevation="5">
                        <RangeInput Items="_skillRanges" RangeType="RangeType.Skill">
                            <MudText Typo="Typo.h6">Skill</MudText>
                        </RangeInput>
                    </MudPaper>
                </MudItem>

                <MudItem xs="6">
                    <MudPaper Elevation="5">
                        <RangeInput Items="_ageRanges" RangeType="RangeType.Age">
                            <MudText Typo="Typo.h6">Age</MudText>
                        </RangeInput>
                    </MudPaper>
                </MudItem>

                <MudItem xs="6">
                    <MudPaper Elevation="5">
                        <RangeInput Items="_teamRanges" RangeType="RangeType.Team">
                            <MudText Typo="Typo.h6">Team</MudText>
                        </RangeInput>
                    </MudPaper>
                </MudItem>

                <MudItem xs="6">
                    <MudPaper Elevation="5">
                        <RangeInput Items="_engineRanges" RangeType="RangeType.Engine">
                            <MudText Typo="Typo.h6">Engine</MudText>
                        </RangeInput>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? LeagueDialog { get; set; }

    [Parameter] public League? League { get; set; }

    private MudForm? form;

    private EditLeagueModel model = new();
    private List<EditRangeModel> _skillRanges = new();
    private List<EditRangeModel> _ageRanges = new();
    private List<EditRangeModel> _teamRanges = new();
    private List<EditRangeModel> _engineRanges = new();

    private List<string> errorValidations = new();

    protected override void OnInitialized()
    {
        if (League != null)
        {
            model = new EditLeagueModel(League);
            _skillRanges = model.DevelopmentRanges.Where(e => e.Type == RangeType.Skill).ToList();
            _ageRanges = model.DevelopmentRanges.Where(e => e.Type == RangeType.Age).ToList();
            _teamRanges = model.DevelopmentRanges.Where(e => e.Type == RangeType.Team).ToList();
            _engineRanges = model.DevelopmentRanges.Where(e => e.Type == RangeType.Engine).ToList();
        }
    }

    private string? LengthValidator(int length)
    {
        if ((length % 10) != 0)
            return "Race length should be a factor of 10";

        return null;
    }

    private bool RunValidations()
    {
        var isValid = true;

        if ((model.RaceLength % 10) != 0)
        {
            errorValidations.Add("Race length should be a factor of 10");
            isValid = false;
        }

        return isValid;
    }

    private void Submit()
    {
        if (!RunValidations())
            return;

        var allRanges = new List<EditRangeModel>();
        allRanges.AddRange(_skillRanges);
        allRanges.AddRange(_ageRanges);
        allRanges.AddRange(_teamRanges);
        allRanges.AddRange(_engineRanges);

        model.DevelopmentRanges = allRanges;

        if (model.IsDirty)
        {
            var modLeague = model.Record;
            LeagueDialog?.Close(DialogResult.Ok(modLeague));
        }
    }

    private void Cancel() => LeagueDialog?.Cancel();
}
