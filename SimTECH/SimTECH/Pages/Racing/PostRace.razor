@page "/postrace/{RaceId:long}"
@inject BreadcrumbProvider _bread
@inject NavigationManager _nav
@inject RaceService _raceService
@inject SeasonService _seasonService

<PageTitle>Post Race</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
    @if (!loading)
    {
        <MudGrid>
            <MudItem xs=12>
                <MudPaper Elevation="15" Height="200px" Class="pa-4">
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText>E</MudText>

                        <MudSpacer />

                        <MudStack>
                            <MudText Typo="Typo.h3">Post race</MudText>
                            <MudText Color="Color.Warning">This page is quite unfinished</MudText>
                        </MudStack>

                        <MudSpacer />

                        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="GoToStandings">Standings</MudButton>
                    </MudStack>
                </MudPaper>
            </MudItem>
            <MudItem xs="4">
                <MudPaper Class="mud-height-full">
                    
                </MudPaper>
            </MudItem>
            <MudItem xs="4">
                <MudPaper Class="mud-height-full">
                    <MudText Typo="Typo.h5">Final standings</MudText>
                    <MudTable T="Result" Items="@Results.OrderBy(e => e.Position)" Dense="true" Class="extra-dense">
                        <HeaderContent>
                            <MudTh>#</MudTh>
                            <MudTh>Name</MudTh>
                            <MudTh>Points</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>
                                @if (context.Status == RaceStatus.Racing)
                                {
                                    <DriverPosition Number="@context.Position" />
                                }
                                else
                                {
                                    <MudText Typo="Typo.button">@(context.Status)</MudText>
                                }
                            </MudTd>
                            <MudTd>
                                <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                                    <MudText>@(context.SeasonDriver.Driver.FullName)</MudText>
                                    @if (context.Grid == 1)
                                    {
                                        <sup style="font-size: 0.7rem">P</sup>
                                    }
                                    @if (context.Id == resultWithFastest)
                                    {
                                        <sup style="font-size: 0.7rem">F</sup>
                                    }
                                </MudStack>
                            </MudTd>
                            <MudTd>
                                <MudText Typo="Typo.caption">@(ReadScoredResult(context))</MudText>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
            <MudItem xs="4">
                <MudStack Class="mud-height-full">
                    <MudPaper Height="50%">
                        <MudText Typo="Typo.h5">Race incidents</MudText>
                        <MudSimpleTable>
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Incident</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var result in Results.Where(e => e.Incident != null))
                                {
                                    <tr>
                                        <td>@(result.SeasonDriver.Driver.FullName)</td>
                                        <td>@(result.Incident?.Name)</td>
                                        <td>@(result.Status)</td>
                                    </tr>
                                }
                            </tbody>
                        </MudSimpleTable>
                    </MudPaper>
                    <MudPaper Height="50%">
                        <MudText Typo="Typo.h5">Upcoming penalties</MudText>
                        <MudTable T="DriverPenalty" Items="@DriverPenalties" Dense="true" Class="extra-dense">
                            <HeaderContent>
                                <MudTh>Name</MudTh>
                                <MudTh>Reason</MudTh>
                                <MudTh>Grid loss</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>
                                    <MudText>@(context.Name)</MudText>
                                </MudTd>
                                <MudTd>
                                    <MudText>@(context.Reason)</MudText>
                                </MudTd>
                                <MudTd>
                                    <MudText Typo="Typo.caption">@(context.Punishment)</MudText>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudPaper>

                </MudStack>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    [Parameter]
    public long RaceId { get; set; }

    SimTECH.Data.Models.Race Race;
    Season Season;
    List<Result> Results;
    List<GivenPenalty> Penalties;

    Dictionary<int, int> allotments;

    List<DriverPenalty> DriverPenalties = new();

    bool loading;
    long resultWithFastest;

    protected override async Task OnInitializedAsync()
    {
        loading = true;

        Race = await _raceService.GetRaceById(RaceId);
        Results = await _raceService.GetResultsOfRace(RaceId);
        Season = await _seasonService.GetSeasonById(Race.SeasonId);
        Penalties = await _raceService.GetUnconsumedPenalties();

        allotments = Season.PointAllotments?.ToDictionary(e => e.Position, e => e.Points) ?? new();

        resultWithFastest = Results.SelectMany(e => e.LapScores).MaxBy(e => e.Score)?.ResultId ?? 0;

        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Seasons", href: "seasons"),
            new BreadcrumbItem("Overview", href: $"overview/{Season.Id}"),
            new BreadcrumbItem("Raceweek", href: $"raceweek/{RaceId}"),
            new BreadcrumbItem("Race", href: $"race/{RaceId}"),
            new BreadcrumbItem("Post race", href: $"postrace/{RaceId}", disabled: true),
        });

        loading = false;
    }

    private int ReadScoredResult(Result result)
    {
        var points = 0;

        if (result.Grid == 1)
            points += Season.PointsPole;

        if (result.Id == resultWithFastest)
            points += Season.PointsFastestLap;

        if (result.Status != RaceStatus.Racing)
            return points;

        if (allotments.TryGetValue(result.Position, out int allotedPoints))
            points += allotedPoints;

        return points;
    }

    // NOTE: Not a definitive solution probably as it could be done much better
    void BuildDriverPenalties()
    {
        foreach (var penalty in Penalties)
        {
            var driverResult = Results.Find(e => e.SeasonDriverId == penalty.SeasonDriverId);
            if (driverResult != null)
            {
                DriverPenalties.Add(new DriverPenalty
                    {
                        Name = driverResult.SeasonDriver.Driver.FullName,
                        Reason = penalty.Incident.Name,
                        Punishment = penalty.Incident.Punishment,
                    });
            }
        }
    }

    void GoToStandings() => _nav.NavigateTo($"/overview/{Race.SeasonId}/2");

    internal class DriverPenalty
    {
        public string Name { get; set; } = string.Empty;
        public string Reason { get; set; } = string.Empty;
        public int Punishment { get; set; }
    }
}
