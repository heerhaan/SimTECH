<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">Position change chart</MudText>
    </TitleContent>
    <DialogContent>
        <MudPaper MinWidth="900px" MinHeight="600px" Class="pa-4">
            @if (!loading)
            {
                <ApexCharts.ApexChart TItem="DataPoint" Title="Position progression" Options="@options" Height="500">
                    @foreach (var driver in dataSets)
                    {
                        <ApexCharts.ApexPointSeries TItem="DataPoint"
                                                    Items="@driver.DataPoints"
                                                    Name="@driver.Label"
                                                    SeriesType="ApexCharts.SeriesType.Line"
                                                    XValue="(e => e.XData)"
                                                    YValue="(e => e.YData)"
                                                    OrderBy="(e => e.X)"
                                                    Stroke="@driver.Stroke" />
                    }

                    <ApexCharts.ApexPointSeries TItem="DataPoint"
                                                Items="@retiredSet.DataPoints"
                                                Name="@retiredSet.Label"
                                                SeriesType="ApexCharts.SeriesType.Area"
                                                XValue="(e => e.XData)"
                                                YValue="(e => e.YData)"
                                                OrderBy="(e => e.X)"
                                                Stroke="@retiredSet.Stroke" />
                </ApexCharts.ApexChart>
            }
        </MudPaper>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? ChartDialog { get; set; }
    [Parameter, EditorRequired] public List<RaceDriver> Drivers { get; set; }

    ApexCharts.ApexChartOptions<DataPoint> options = Constants.ChartOptionsDefault;
    ApexCharts.ApexChartOptions<DataPoint> moreOptions = Constants.ChartOptionsDefault;

    List<DataSet> dataSets = new();
    DataSet retiredSet = new()
        {
            Label = "Retirements",
            Stroke = new ApexCharts.SeriesStroke
            {
                Color = "#D11D3E44", // trans-red: #FF4D4D77
                Width = 1,
            },
        };

    bool loading = true;
    int driverCount;

    protected override void OnInitialized()
    {
        driverCount = Drivers.Count;

        options.Yaxis = new();
        options.Yaxis.Add(new ApexCharts.YAxis { Reversed = true, Min = 1 });

        var positionData = DetermineLapPositions();

        var seenTeamIdentifiers = new List<long>(Drivers.Count);

        foreach (var driver in Drivers)
        {
            var dataSet = new DataSet { Label = driver.FullName };

            foreach (var driverPosition in positionData.Where(e => e.ResultId == driver.ResultId))
            {
                dataSet.DataPoints.Add(new DataPoint(driverPosition.Order, driverPosition.Position));
            }

            var sameSeenTeams = seenTeamIdentifiers.Count(e => e == driver.SeasonTeamId);

            dataSet.Stroke = new ApexCharts.SeriesStroke { Color = driver.Colour, DashSpace = (2 * sameSeenTeams), Width = 5 };

            seenTeamIdentifiers.Add(driver.SeasonTeamId);
            dataSets.Add(dataSet);
        }

        loading = false;
    }

    public void TestActionMutate(ApexCharts.DataPoint<DataPoint> dataPoint)
    {
        var originalValue = dataPoint.Y;
    }

    private List<DriverLapPosition> DetermineLapPositions()
    {
        var positionData = new List<DriverLapPosition>();

        foreach (var driver in Drivers)
        {
            int total = 0;
            foreach (var lap in driver.LapScores.OrderBy(e => e.Order))
            {
                total += lap.Score;
                positionData.Add(new DriverLapPosition
                    {
                        ResultId = driver.ResultId,
                        Order = lap.Order,
                        TotalScore = total,
                        DidNotFinish = lap.HasDnfed(),
                    });
            }
        }

        //int retirementsSum = 0;
        foreach (var lapData in positionData.GroupBy(e => e.Order))
        {
            int indexer = 0;
            foreach (var driverLap in lapData.OrderBy(e => e.DidNotFinish).ThenByDescending(e => e.TotalScore))
            {
                driverLap.Position = ++indexer;
            }

            //retirementsSum += lapData.Count(e => e.DidNotFinish);
            retiredSet.DataPoints.Add(new DataPoint(lapData.Key, lapData.Count(e => !e.DidNotFinish)));
        }

        return positionData;
    }

    internal class DriverLapPosition
    {
        public long ResultId { get; set; }
        public int Order { get; set; }
        public int TotalScore { get; set; }
        public int Position { get; set; }
        public bool DidNotFinish { get; set; }
    }
}
