<MudDialog>
    <DialogContent>
        <MudPaper MinWidth="1500px" MinHeight="950px" Class="px-4 py-2" id="position-chart-container">
            <MudStack Row="true" AlignItems="AlignItems.Center" Class="px-0 pb-2">
                <MudIcon Icon="@Icons.Material.Filled.SsidChart" Class="mr-3 mb-n1" />
                <MudText Typo="Typo.h5">Position evolution & retirements</MudText>
                <MudSpacer />
                <MudButtonGroup Variant="Variant.Text" Color="Color.Secondary">
                    <ScreenshotIconButton TargetId="position-chart-container" />
                    <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="Close" />
                </MudButtonGroup>
            </MudStack>
            <MudContainer MaxWidth="MaxWidth.False">
                @if (!loading)
                {
                    <ApexCharts.ApexChart TItem="DataPoint" Options="@options" Width="1400" Height="900">
                        @foreach (var driver in dataSets)
                        {
                            <ApexCharts.ApexPointSeries TItem="DataPoint"
                                                        Items="@driver.DataPoints"
                                                        Name="@driver.Label"
                                                        SeriesType="ApexCharts.SeriesType.Line"
                                                        XValue="(e => e.XData)"
                                                        YValue="(e => e.YData)"
                                                        OrderBy="(e => e.X)"
                                                        Stroke="@driver.Stroke" />
                        }

                        <ApexCharts.ApexPointSeries TItem="DataPoint"
                                                    Items="@retiredSet.DataPoints"
                                                    Name="@retiredSet.Label"
                                                    SeriesType="ApexCharts.SeriesType.Area"
                                                    XValue="(e => e.XData)"
                                                    YValue="(e => e.YData)"
                                                    OrderBy="(e => e.X)"
                                                    Stroke="@retiredSet.Stroke" />
                    </ApexCharts.ApexChart>
                }
            </MudContainer>
        </MudPaper>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? ChartDialog { get; set; }
    [Parameter, EditorRequired] public List<RaceDriver> Drivers { get; set; }

    ApexCharts.ApexChartOptions<DataPoint> options;

    List<DataSet> dataSets = new();
    DataSet retiredSet = new()
        {
            Label = "Retirements",
            Stroke = new ApexCharts.SeriesStroke
            {
                Color = "#E0284A7F",
                Width = 3,
            },
        };

    bool loading = true;
    int driverCount;

    protected override void OnInitialized()
    {
        options = Constants.ChartOptionsDefault;

        driverCount = Drivers.Count;

        options.Yaxis = new();

        var positionData = DetermineLapPositions();

        var seenTeamIdentifiers = new List<long>(Drivers.Count);
        bool isFirst = true;

        foreach (var driver in Drivers)
        {
            var dataSet = new DataSet { Label = driver.FullName };
            options.Yaxis.Add(new ApexCharts.YAxis { Reversed = true, Min = 1, Max = driverCount, SeriesName = driver.FullName, Show = isFirst });

            foreach (var driverPosition in positionData.Where(e => e.ResultId == driver.ResultId))
            {
                dataSet.DataPoints.Add(new DataPoint(driverPosition.Order, driverPosition.Position));
            }

            var sameSeenTeams = seenTeamIdentifiers.Count(e => e == driver.SeasonTeamId);

            dataSet.Stroke = new ApexCharts.SeriesStroke { Color = driver.Colour, DashSpace = (2 * sameSeenTeams), Width = 4 };

            seenTeamIdentifiers.Add(driver.SeasonTeamId);
            dataSets.Add(dataSet);
            isFirst = false;
        }

        options.Yaxis.Add(new ApexCharts.YAxis { SeriesName = "Retirements", Min = 1, Max = driverCount, Show = false });

        loading = false;
    }

    private List<DriverLapPosition> DetermineLapPositions()
    {
        var positionData = new List<DriverLapPosition>();

        foreach (var driver in Drivers)
        {
            int total = 0;
            foreach (var lap in driver.LapScores.OrderBy(e => e.Order))
            {
                total += lap.Score;
                positionData.Add(new DriverLapPosition
                    {
                        ResultId = driver.ResultId,
                        Order = lap.Order,
                        TotalScore = total,
                        DidNotFinish = lap.HasDnfed(),
                    });
            }
        }

        int retirementsSum = 0;
        foreach (var lapData in positionData.GroupBy(e => e.Order))
        {
            int indexer = 0;
            foreach (var driverLap in lapData.OrderBy(e => e.DidNotFinish).ThenByDescending(e => e.TotalScore))
            {
                driverLap.Position = ++indexer;
            }

            retirementsSum += lapData.Count(e => e.DidNotFinish);
            retiredSet.DataPoints.Add(new DataPoint(lapData.Key, retirementsSum));
        }

        return positionData;
    }

    private void Close() => ChartDialog?.Close();

    internal class DriverLapPosition
    {
        public long ResultId { get; set; }
        public int Order { get; set; }
        public int TotalScore { get; set; }
        public int Position { get; set; }
        public bool DidNotFinish { get; set; }
    }
}
