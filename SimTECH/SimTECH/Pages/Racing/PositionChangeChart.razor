<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            Position change chart
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Class="pa-4" Style="min-width: 800px">
            @if (!loading)
            {
                <ApexCharts.ApexChart TItem="DataPoint" Title="Position progression" Options="@options" Height="500">
                    @foreach (var driver in DataSets)
                    {
                        <ApexCharts.ApexPointSeries TItem="DataPoint"
                                            Items="@driver.DataPoints"
                                            Name="@driver.Label"
                                            SeriesType="ApexCharts.SeriesType.Line"
                                            XValue="@(e => e.XData)"
                                            YValue="@(e => e.YData)"
                                            OrderBy="(e => e.X)"
                                            Stroke="@driver.Stroke" />
                    }

                    @*<ApexCharts.ApexPointSeries TItem="DataPoint"
                                                Items="@DnfSet.DataPoints"
                                                Name="@DnfSet.Label"
                                                SeriesType="ApexCharts.SeriesType.Area"
                                                XValue="@(e => e.XData)"
                                                YValue="@(e => e.YData)"
                                                OrderBy="(e => e.X)"
                                                Stroke="@DnfSet.Stroke" />*@
                </ApexCharts.ApexChart>

                <ApexCharts.ApexChart TItem="DataPoint" Title="Other" Options="@moreOptions" Height="300">
                    <ApexCharts.ApexPointSeries TItem="DataPoint"
                                                Items="@DnfSet.DataPoints"
                                                Name="@DnfSet.Label"
                                                SeriesType="ApexCharts.SeriesType.Area"
                                                XValue="@(e => e.XData)"
                                                YValue="@(e => e.YData)"
                                                OrderBy="(e => e.X)"
                                                Stroke="@DnfSet.Stroke" />
                </ApexCharts.ApexChart>
            }
        </MudContainer>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    protected MudDialogInstance? ChartDialog { get; set; }
    [Parameter, EditorRequired]
    public List<RaceDriver> Drivers { get; set; }

    ApexCharts.ApexChartOptions<DataPoint> options;
    ApexCharts.ApexChartOptions<DataPoint> moreOptions;

    List<DataSet> DataSets = new();
    DataSet DnfSet = new()
        {
            Label = "DidNotFinish",
            Stroke = new ApexCharts.SeriesStroke
            {
                Color = "#ff4d4d",
                Width = 1,
            },
        };

    bool loading = true;
    int driverCount;

    protected override void OnInitialized()
    {
        SetOptions();

        driverCount = Drivers.Count;

        var positionData = DetermineLapPositions();

        var seenTeamIdentifiers = new List<long>(Drivers.Count);

        foreach (var driver in Drivers)
        {
            var dataSet = new DataSet { Label = driver.FullName };

            foreach (var driverPosition in positionData.Where(e => e.ResultId == driver.ResultId))
            {
                dataSet.DataPoints.Add(new DataPoint(driverPosition.Order, driverPosition.Position));
            }

            var sameSeenTeams = seenTeamIdentifiers.Count(e => e == driver.SeasonTeamId);

            dataSet.Stroke = new ApexCharts.SeriesStroke { Color = driver.Colour, DashSpace = (2 * sameSeenTeams), Width = 3 };

            seenTeamIdentifiers.Add(driver.SeasonTeamId);
            DataSets.Add(dataSet);
        }

        loading = false;
    }

    public void TestActionMutate(ApexCharts.DataPoint<DataPoint> dataPoint)
    {
        var originalValue = dataPoint.Y;
    }

    private void SetOptions()
    {
        options = new ApexCharts.ApexChartOptions<DataPoint>
            {
                Chart = new ApexCharts.Chart
                {
                    Animations = new ApexCharts.Animations
                    {
                        Enabled = false,
                    },
                },
                Theme = new ApexCharts.Theme
                {
                    Mode = ApexCharts.Mode.Dark,
                },
                Yaxis = new()
                {
                    new ApexCharts.YAxis
                    {
                        Reversed = true,
                    },
                }
            };

        moreOptions = new ApexCharts.ApexChartOptions<DataPoint>
            {
                Chart = new ApexCharts.Chart
                {
                    Animations = new ApexCharts.Animations
                    {
                        Enabled = false,
                    },
                },
                Theme = new ApexCharts.Theme
                {
                    Mode = ApexCharts.Mode.Dark,
                },
            };
    }

    private List<DriverLapPosition> DetermineLapPositions()
    {
        var positionData = new List<DriverLapPosition>();

        foreach (var driver in Drivers)
        {
            int total = 0;
            foreach (var lap in driver.LapScores.OrderBy(e => e.Order))
            {
                total += lap.Score;
                positionData.Add(new DriverLapPosition
                    {
                        ResultId = driver.ResultId,
                        Order = lap.Order,
                        TotalScore = total,
                        DidNotFinish = lap.HasDnfed(),
                    });
            }
        }

        int dnfSum = 0;
        foreach (var lapData in positionData.GroupBy(e => e.Order))
        {
            int indexer = 0;
            foreach (var driverLap in lapData.OrderBy(e => e.DidNotFinish).ThenByDescending(e => e.TotalScore))
                driverLap.Position = ++indexer;

            dnfSum += lapData.Count(e => e.DidNotFinish);
            DnfSet.DataPoints.Add(new DataPoint(lapData.Key, dnfSum));
        }

        return positionData;
    }

    internal class DriverLapPosition
    {
        public long ResultId { get; set; }
        public int Order { get; set; }
        public int TotalScore { get; set; }
        public int Position { get; set; }
        public bool DidNotFinish { get; set; }
    }
}
