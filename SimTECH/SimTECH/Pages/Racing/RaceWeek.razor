@page "/raceweek/{RaceId:long}"
@inject ClimateService _climateService
@inject IncidentService _incidentService
@inject ManufacturerService _manufacturerService
@inject RaceService _raceService
@inject SeasonService _seasonService
@inject SeasonEntrantService _entrantService
@inject TraitService _traitService
@inject TyreService _tyreService
@inject BreadcrumbProvider _bread
@inject NavigationManager _nav
@inject IDialogService _dialog
@inject ISnackbar _snack
@inject IOptions<SimConfig> _config

<PageTitle>Raweceek</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudPaper Elevation="100">
        @if (!loading)
        {
            <CascadingValue Value="@RaweCeek">
                <MudTabs @ref="_tabs" Centered="true" Outlined="true">
                    <MudTabPanel Text="Raceweek">
                        <Landing TrackTraits="@trackTraits"
                                 OnOpenTyrePicker="PickRaceTyre" />
                    </MudTabPanel>
                    <MudTabPanel Text="Practice">
                        <MudTabs Centered="true" Outlined="true">
                            @foreach (var session in practiceSessions.OrderBy(e => e.SessionIndex))
                            {
                                <MudTabPanel Text="@($"FP{session.SessionIndex}")" ID="@($"fp_{session.SessionIndex}")">
                                    <Practice PracticeSession="@session"
                                              Config="@config"
                                              OnFinish="PersistPractice" />
                                </MudTabPanel>
                            }
                        </MudTabs>
                    </MudTabPanel>
                    <MudTabPanel Text="Qualifying">
                        <MudTabs @ref="_qualyTabs" Centered="true" Outlined="true" KeepPanelsAlive="true">
                            @foreach (var session in qualySessions)
                            {
                                <MudTabPanel Text="@($"Q{session.SessionIndex}")" Icon="@Icons.Material.Filled.AccessTime">
                                    <Qualifying QualySession="@session"
                                                Config="@config"
                                                OnFinish="PersistQualifying" />
                                </MudTabPanel>
                            }
                        </MudTabs>
                    </MudTabPanel>
                    <MudTabPanel Text="Race" Disabled="@raceDisabled">
                        <Race LapScores="@lapScores"
                              Occurrences="@occurrences"
                              Incidents="@incidents"
                              Tyres="@tyres"
                              Config="@config"
                              OnFinish="PersistRace" />
                    </MudTabPanel>
                    <MudTabPanel Text="Post race" Disabled="@postraceDisabled">
                        <PostRace UpcomingPenalties="@upcomingPenalties"
                                  OnNavigate="GoToCommon" />
                    </MudTabPanel>
                </MudTabs>
            </CascadingValue>
        }
    </MudPaper>
</MudContainer>

@code {
    [Parameter] public long RaceId { get; set; }

    public RaweCeekModel RaweCeek { get; set; } = new();

    //private List<Climate> climates;
    private List<Incident> incidents;
    private List<Trait> trackTraits = new();
    private List<Tyre> tyres;

    private List<PracticeScore> practiceScores = new();//delet
    private List<QualifyingScore> qualyScores = new();//delet
    private List<PracticeSession> practiceSessions = new();
    private List<QualifyingSession> qualySessions = new();

    private List<LapScore> lapScores = new();
    private List<RaceOccurrence> occurrences = new();
    private List<GivenPenalty> upcomingPenalties = new();

    private SimConfig config;

    MudTabs _tabs;
    MudTabs? _qualyTabs;

    bool loading = true;

    bool raceDisabled => RaweCeek.Race.State != State.Advanced && RaweCeek.Race.State != State.Closed;
    bool postraceDisabled => RaweCeek.Race.State != State.Closed;

    protected override async Task OnInitializedAsync()
    {
        //climates = await _climateService.GetClimates(StateFilter.All);
        incidents = await _incidentService.GetIncidents(StateFilter.All);
        tyres = await _tyreService.GetTyres(StateFilter.All);

        practiceScores = await _raceService.GetPracticeScores(RaceId);
        qualyScores = await _raceService.GetQualifyingScores(RaceId);
        lapScores = await _raceService.GetLapScores(RaceId);
        occurrences = await _raceService.GetRaceOccurrences(RaceId);
        config = _config.Value;

        var race = await _raceService.GetRaceById(RaceId);
        if (race.State == State.Concept)
        {
            var idNextRace = await _raceService.GetNextRaceIdOfSeason(race.SeasonId);
            if (idNextRace.GetValueOrDefault() != race.Id)
                throw new InvalidOperationException("Somehow you landed inside a raceweek which is not valid for activation, dumbass");

            await _raceService.ActivateRace(race.Id);
            race.State = State.Active;
        }
        else if (race.State == State.Closed)
        {
            var nextRaceId = await _raceService.GetRaceIdByRound(race.SeasonId, (1 + race.Round));
            if (nextRaceId.HasValue)
            {
                var nextRacePenalties = await _raceService.GetRacePenalties(nextRaceId.Value);
                if (nextRacePenalties?.Any() ?? false)
                    upcomingPenalties.AddRange(nextRacePenalties);
            }
        }

        RaweCeek.Race = race;
        RaweCeek.Season = await _seasonService.GetSeasonById(race.SeasonId);
        RaweCeek.Climate = await _climateService.GetClimateById(race.ClimateId);

        // Practice loading
        foreach (var groupedPracticeScores in practiceScores.GroupBy(e => e.Index))
        {
            practiceSessions.Add(new PracticeSession
            {
                SessionIndex = groupedPracticeScores.Key,
                IsFinished = true,
                SessionScores = groupedPracticeScores.ToList(),
            });
        }

        if (race.State != State.Advanced && race.State != State.Closed)
            AddNewPracticeSession();

        // Qualifying loading
        var qSessionCount = RaweCeek.Season.QualifyingFormat.SessionCount();
        for (int i = 1; i <= qSessionCount; i++)
        {
            var currentScores = qualyScores.Where(e => e.Index == i).ToList();
            var qSession = new QualifyingSession
                {
                    SessionIndex = i,
                    IsFinished = currentScores.Any(),
                    SessionScores = currentScores,
                };

            // REFACTOR: Er is hier vast een betere oplossing voor
            if (qSession.SessionIndex == 1)
            {
                qSession.ProgressionCutoff = RaweCeek.Season.QualifyingAmountQ2;
            }
            else if (qSession.SessionIndex == 2)
            {
                qSession.AllowedEntries = RaweCeek.Season.QualifyingAmountQ2;
                qSession.ProgressionCutoff = RaweCeek.Season.QualifyingAmountQ3;
            }
            else if (qSession.SessionIndex == 3)
            {
                qSession.AllowedEntries = RaweCeek.Season.QualifyingAmountQ3;
            }

            qualySessions.Add(qSession);
        }

        await LoadDrivers();

        _bread.Reset();
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Seasons", href: "seasons"),
            new BreadcrumbItem("Overview", href: $"overview/{RaweCeek.Season.Id}"),
            new BreadcrumbItem("Raceweek", href: $"raceweek/{RaceId}", disabled: true),
        });

        loading = false;
    }

    private async Task LoadDrivers()
    {
        var race = RaweCeek.Race;
        var climate = RaweCeek.Climate;

        var seasonDrivers = await _entrantService.GetSeasonDrivers(race.SeasonId);
        var seasonTeams = await _entrantService.GetSeasonTeams(race.SeasonId);
        var seasonEngines = await _entrantService.GetSeasonEngines(race.SeasonId);
        var manufacturers = await _manufacturerService.GetManufacturers(StateFilter.All);
        var raceResults = await _raceService.GetResultsOfRace(RaceId);
        var allTraits = await _traitService.GetTraits();

        var traits = allTraits.Where(e => !e.ForWetConditions || e.ForWetConditions == climate.IsWet).ToList();

        var trackTraitIds = race.Track.TrackTraits?.Select(e => e.TraitId).ToList() ?? new();
        trackTraits = traits.Where(e => trackTraitIds.Contains(e.Id)).ToList();

        var raweceekDrivers = new List<RaweCeekDriver>();
        foreach (var result in raceResults)
        {
            var driverTraits = new List<Trait>(trackTraits);

            var driver = seasonDrivers.First(e => e.Id == result.SeasonDriverId);
            var team = seasonTeams.First(e => e.Id == result.SeasonTeamId);

            var engine = seasonEngines.First(e => e.Id == team.SeasonEngineId);
            var manufacturer = manufacturers.First(e => e.Id == team.ManufacturerId);

            if (driver.Driver.DriverTraits?.Any() == true)
                driverTraits.AddRange(traits.Where(e => driver.Driver.DriverTraits.Select(dt => dt.TraitId).Contains(e.Id)));
            if (team.Team.TeamTraits?.Any() == true)
                driverTraits.AddRange(traits.Where(e => team.Team.TeamTraits.Select(dt => dt.TraitId).Contains(e.Id)));

            double teamModifiers = (team.Aero * race.Track?.AeroMod ?? 1)
                    + (team.Chassis * race.Track?.ChassisMod ?? 1)
                    + (team.Powertrain * race.Track?.PowerMod ?? 1);

            var driverPower = driver.Skill + driver.RetrieveStatusBonus(5);
            var carPower = team.BaseValue + teamModifiers.RoundDouble();
            var enginePower = (engine.Power * climate.EngineMultiplier).RoundDouble();
            var totalPower = driverPower + carPower + enginePower;

            var actualDefense = ((driver.Defense + driverTraits.Sum(e => e.Defense)) * race.Track?.DefenseMod ?? 1.0).RoundDouble();

            var raweDriver = new RaweCeekDriver
                {
                    SeasonDriverId = driver.Id,
                    FirstName = driver.Driver.FirstName,
                    LastName = driver.Driver.LastName,
                    Nationality = driver.Driver.Country,
                    Number = driver.Number,
                    Role = driver.TeamRole,

                    SeasonTeamId = team.Id,
                    TeamName = team.Name,
                    Colour = team.Colour,
                    Accent = team.Accent,

                    ManufacturerId = manufacturer.Id,
                    ManufacturerName = manufacturer.Name,
                    ManufacturerColour = manufacturer.Colour,
                    ManufacturerAccent = manufacturer.Accent,

                    QualyPower = totalPower + driverTraits.Sum(e => e.QualifyingPace),
                    RacePower = totalPower + driverTraits.Sum(e => e.RacePace),
                    Attack = driver.Attack + driverTraits.Sum(e => e.Attack),
                    Defense = actualDefense,
                    DriverReliability = driver.Reliability + driverTraits.Sum(e => e.DriverReliability) + climate.ReliablityModifier,
                    CarReliability = team.Reliability + driverTraits.Sum(e => e.CarReliability),
                    EngineReliability = engine.Reliability + driverTraits.Sum(e => e.EngineReliability),
                    WearMinMod = driverTraits.Sum(e => e.WearMin),
                    WearMaxMod = driverTraits.Sum(e => e.WearMax),
                    RngMinMod = driverTraits.Sum(e => e.RngMin) - climate.RngModifier,
                    RngMaxMod = driverTraits.Sum(e => e.RngMax) + climate.RngModifier,

                    ResultId = result.Id,
                    Grid = result.Grid,
                    Position = result.Position,
                    Status = result.Status,
                    TyreLife = result.TyreLife,
                    FastestLap = result.FastestLap,
                    Overtaken = result.Overtaken,
                    Defended = result.Defended,

                    Incident = result.IncidentId.HasValue 
                        ? incidents.FirstOrDefault(e => e.Id == result.IncidentId) 
                        : null,
                    Tyre = tyres.First(e => e.Id == result.TyreId)
                };

            if (!climate.IsWet)
            {
                // Adds on to the existing tyre, should probably be added when activating instead
                raweDriver.TyreLife += manufacturer.Pace;

                raweDriver.LifeBonus = manufacturer.Pace;
                raweDriver.WearMinMod += manufacturer.WearMin;
                raweDriver.WearMaxMod += manufacturer.WearMax;
            }

            raweceekDrivers.Add(raweDriver);
        }

        var penalties = await _raceService.GetRacePenalties(RaceId);

        foreach (var penalty in penalties.GroupBy(e => e.SeasonDriverId))
        {
            var matchingDriver = raweceekDrivers.FirstOrDefault(e => e.SeasonDriverId == penalty.Key);
            if (matchingDriver != null)
            {
                matchingDriver.Penalty = penalty.Sum(e => e.Incident.Punishment);
                matchingDriver.Reasons = string.Join(", ", penalty.Select(e => e.Incident.Name));

                RaweCeek.ConsumablePenalties.AddRange(penalty.Select(e => e.Id));
            }
        }

        RaweCeek.RaweCeekDrivers = raweceekDrivers;
    }

    private async Task PickRaceTyre(long resultId)
    {
        var parameters = new DialogParameters 
            {
                ["ResultId"] = resultId,
                ["Tyres"] = tyres.Where(e => e.State == State.Active).ToList(),
            };

        var dialog = await _dialog.ShowAsync<TyrePicker>("Set tyre", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Tyre pickedTyre)
        {
            await _raceService.PickTyre(resultId, pickedTyre);

            // Assign the picked tyre and ofc dont forget the life bonus
            var driver = RaweCeek.RaweCeekDrivers.First(e => e.ResultId == resultId);
            driver.Tyre = pickedTyre;
            driver.TyreLife = pickedTyre.Pace + driver.LifeBonus;
        }
    }

    private void AddNewPracticeSession()
    {
        var nextSession = practiceSessions.Count() + 1;
        practiceSessions.Add(new PracticeSession
            {
                SessionIndex = nextSession,
                IsFinished = false,
                SessionScores = new(),
            });
    }

    private async Task PersistPractice(int practiceIndex)
    {
        var practiceResult = practiceScores.Where(e => e.Index == practiceIndex).ToList();
        var gridResults = practiceResult.ToDictionary(e => e.ResultId, e => e.Position);

        await _raceService.PersistPracticeResults(gridResults);
        await _raceService.PersistPracticeScores(practiceResult);

        // Update the new grid and position
        foreach (var res in gridResults)
        {
            var matchingDriver = RaweCeek.RaweCeekDrivers.First(e => e.ResultId == res.Key);
            matchingDriver.Grid = res.Value;
            matchingDriver.Position = res.Value;
        }

        AddNewPracticeSession();
    }

    private async Task PersistQualifying(int qualyIndex)
    {
        var persistedQualyScores = qualyScores.Where(e => e.Index == qualyIndex).ToList();

        await _raceService.PersistQualifyingScores(persistedQualyScores);

        if (qualySessions == qualyIndex)
        {
            int positionIndexer = 0;
            var gridResults = qualyScores
                .GroupBy(e => e.ResultId)
                .Select(e => e.MaxBy(r => r.Index))
                .OrderBy(e => e!.PenaltyPosition())
                .ToDictionary(e => e!.ResultId, e => ++positionIndexer);

            await _raceService.PersistQualifyingResults(gridResults, RaceId, RaweCeek.Season.MaximumDriversInRace);

            if (RaweCeek.ConsumablePenalties.Any())
                await _raceService.ConsumePenalties(RaweCeek.ConsumablePenalties, RaceId);

            // Update the new grid, position and status
            foreach (var res in gridResults)
            {
                var matchingDriver = RaweCeek.RaweCeekDrivers.First(e => e.ResultId == res.Key);
                matchingDriver.Grid = res.Value;
                matchingDriver.Position = res.Value;
                matchingDriver.Status = res.Value > RaweCeek.Season.MaximumDriversInRace ? RaceStatus.Dnq : RaceStatus.Racing;
            }

            RaweCeek.Race.State = State.Advanced;
        }
        else
        {
            // Update the new grid and position
            foreach (var res in persistedQualyScores)
            {
                var matchingDriver = RaweCeek.RaweCeekDrivers.First(e => e.ResultId == res.ResultId);
                matchingDriver.Grid = res.Position;
                matchingDriver.Position = res.Position;
            }

            var nextQ = 1 + qualyIndex;

            // Navigate to the next qualifying session
            //if (qualySessions > 1 && _qualyTabs != null)
            //    _qualyTabs.ActivatePanel($"q_{nextQ}");
        }
    }

    private async Task PersistRace()
    {
        if (!lapScores.Any() || !occurrences.Any())
        {
            _snack.Add("good god, saving a race for which we have NO data. How wrong!", Severity.Error);
            return;
        }

        var allotments = RaweCeek.Season.PointAllotments?.ToDictionary(e => e.Position, e => e.Points) ?? new();
        var finalResults = RaweCeek.RaweCeekDrivers
            .Select(e => e.MapToResult(RaceId))
            .ToList();
        var scoredPoints = RaweCeek.RaweCeekDrivers
            .Select(e => e.MapToScoredPoints(allotments, RaweCeek.Season.PointsPole, RaweCeek.Season.PointsFastestLap))
            .ToList();

        await _raceService.PersistLapScores(lapScores);
        await _raceService.PersistOccurrences(occurrences);
        await _raceService.FinishRace(RaceId, finalResults, scoredPoints);

        if (RaweCeek.LeagueOptions.HasFlag(LeagueOptions.EnablePenalty))
        {
            await _seasonService.CheckPenalties(finalResults);

            var nextRaceId = await _raceService.GetRaceIdByRound(RaweCeek.Season.Id, (1 + RaweCeek.Race.Round));
            if (nextRaceId.HasValue)
            {
                var nextRacePenalties = await _raceService.GetRacePenalties(nextRaceId.Value);
                if (nextRacePenalties?.Any() ?? false)
                    upcomingPenalties.AddRange(nextRacePenalties);
            }
        }

        RaweCeek.Race.State = State.Closed;
    }

    private void GoToCommon(string path) => _nav.NavigateTo(path);
}
