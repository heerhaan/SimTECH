@page "/raceweek/{RaceId:long}"

@inject RaceService RaceService
@inject BreadcrumbProvider _bread
@inject NavigationManager _nav
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (loading)
{
    <MudPaper Class="pa-4">
        <MudStack Row="true">
            <MudProgressCircular Color="Color.Secondary" Size="Size.Large" Indeterminate="true" />
            <MudText>... retrieving rawe ceek data</MudText>
        </MudStack>
    </MudPaper>
}
else
{
    <MudGrid>
        <MudItem xs="3">
            <MudPaper Class="pa-4 mud-height-full">
                <MudStack AlignItems="AlignItems.Center" Class="mud-height-full">
                    <MudText Typo="Typo.h4">@Model.Race.Name</MudText>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Model.Race.Climate.Icon" />
                        <MudText>@Model.Race.Climate.Terminology</MudText>
                    </MudStack>

                    @if (Model.TrackTraits?.Any() == true)
                    {
                        <MudList>
                            <MudListSubheader>Traits of this circuit</MudListSubheader>
                            @foreach (var trait in Model.TrackTraits)
                            {
                                <MudListItem>
                                    @trait.Name - @trait.Description
                                </MudListItem>
                            }
                        </MudList>
                    }

                    <MudButtonGroup Color="Color.Secondary" Variant="Variant.Filled" VerticalAlign="true" Class="mt-2 mud-width-full">
                        @if (Model.Race.State == State.Active)
                        {
                            <MudButton FullWidth="true" OnClick="GoToPractice">Practice</MudButton>
                            <MudButton FullWidth="true" OnClick="GoToQualifying">Qualifying</MudButton>
                        }
                        else if (Model.Race.State != State.Concept)
                        {
                            <MudButton FullWidth="true" OnClick="GoToRace">Race</MudButton>
                        }
                    </MudButtonGroup>
                </MudStack>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper Class="pa-4 mud-height-full">
                <MudTable Items="@Model.RaceWeekDrivers.OrderBy(e => e.Grid)" Dense="true" id="race-week-grid">
                    <ToolBarContent>
                        <MudText>Grid</MudText>
                        <MudSpacer />
                        <ScreenshotButton TargetId="race-week-grid" />
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Grid</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Team</MudTh>
                        <MudTh Class="number-col">Tyre</MudTh>
                        <MudTh>PEN.</MudTh>
                        <MudTh>Strategy</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            @if (context.Grid > Model.MaximumInRace)
                            {
                                <MudText Typo="Typo.caption">DNQ</MudText>
                            }
                            else
                            {
                                <MudText Typo="Typo.h6" Style="@(ViewHelper.SetTextNumberStyle(context.Colour, context.Accent))">@context.Grid</MudText>
                            }
                        </MudTd>
                        <MudTd>
                            <MudText>@context.FullName</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText>@context.TeamName</MudText>
                        </MudTd>
                        <MudTd Class="number-col" Style="@ViewHelper.SetFullColourstyle(context.ManufacturerColour, context.ManufacturerAccent)">
                            <MudText Typo="Typo.caption">@context.ManufacturerName.ElementAt(0)</MudText>
                        </MudTd>
                        <MudTd>
                            @if (context.Penalty.HasValue)
                            {
                                <MudText>+@(context.Penalty.Value)</MudText>
                            }
                        </MudTd>
                        <MudTd>
                            <MudLink OnClick="@(async () => await PickStrategy(context.ResultId))">
                                <MudStack Row="true" Spacing="2">
                                    @foreach (var tyreElem in context.Strategy.StrategyTyres)
                                    {
                                        <TyreElement Colour="@tyreElem.Tyre.Colour">@tyreElem.Tyre.Name.ElementAt(0)</TyreElement>
                                    }
                                </MudStack>
                            </MudLink>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
        <MudItem xs="3">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.h5">Track information</MudText>
                <MudText Typo="Typo.body2" Color="Color.Error">This section is pretty ugly, mate</MudText>
                <MudList>
                    <MudListItem>
                        Country:
                        <CountryNamedFlag Code="@Model.Race.Track.Country" Size="FlagSize.Normal" />
                    </MudListItem>
                    <MudListItem>
                        Length: @(Model.Race.Track.Length)Km
                    </MudListItem>
                    <MudListItem>
                        Laps: @(NumberHelper.CalcLapCount(Model.Race.RaceLength, Model.Race.Track.Length))
                    </MudListItem>
                    <MudListItem>
                        <MudText>Aero modifier: @Model.Race.Track.AeroMod</MudText>
                    </MudListItem>
                    <MudListItem>
                        Chassis modifier: @Model.Race.Track.ChassisMod
                    </MudListItem>
                    <MudListItem>
                        Powertrain modifier: @Model.Race.Track.PowerMod
                    </MudListItem>
                    <MudListItem>
                        Qualifying modifier: @Model.Race.Track.QualifyingMod
                    </MudListItem>
                    <MudListItem>
                        Defense modifier: @Model.Race.Track.DefenseMod
                    </MudListItem>
                    <MudListItem>
                        Weather: @Model.Race.Climate.Terminology
                    </MudListItem>
                </MudList>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter] public long RaceId { get; set; }

    RaceWeekModel Model { get; set; }

    bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        Model = await RaceService.GetRaceWeekModel(RaceId);

        _bread.Reset();
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Seasons", href: "seasons"),
            new BreadcrumbItem("Overview", href: $"overview/{Model.Race.SeasonId}"),
            new BreadcrumbItem("Raceweek", href: $"raceweek/{RaceId}"),
        });

        loading = false;
    }

    async Task PickStrategy(long resultId)
    {
        var parameters = new DialogParameters 
            {
                ["ResultId"] = resultId,
                ["Strategies"] = Model.AvailableStrategies,
            };

        var dialog = await DialogService.ShowAsync<StrategyPicker>("Set strategy", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Strategy newStrategy)
        {
            await RaceService.PickStrategy(resultId, newStrategy.Id, newStrategy.StrategyTyres[0].Tyre.Pace);

            Model.RaceWeekDrivers.Single(e => e.ResultId == resultId).Strategy = newStrategy;
        }
    }

    // Navigation links
    private void GoToPractice() => _nav.NavigateTo($"/practice/{RaceId}");
    private void GoToQualifying() => _nav.NavigateTo($"/qualifying/{RaceId}");
    private void GoToRace() => _nav.NavigateTo($"/race/{RaceId}");
}
