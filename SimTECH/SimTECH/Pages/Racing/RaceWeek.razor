@page "/raceweek/{RaceId:long}"

@inject RaceService RaceService
@inject BreadcrumbProvider _bread
@inject NavigationManager Nav
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (loading)
{
    <MudPaper Class="pa-4">
        <MudStack Row="true">
            <MudProgressCircular Color="Color.Secondary" Size="Size.Large" Indeterminate="true" />
            <MudText>... retrieving rawe ceek data</MudText>
        </MudStack>
    </MudPaper>
}
else
{
    <MudGrid>
        <MudItem xs="3">
            <MudPaper Class="pa-4 mud-height-full">
                <MudTable Items="@Model.RaceWeekDrivers.OrderBy(e => e.Grid)" Dense="true" id="race-week-grid">
                    <ToolBarContent>
                        <MudText>Grid</MudText>
                        <MudSpacer />
                        <ScreenshotButton TargetId="race-week-grid" />
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Grid</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Strategy</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd Style="@(ViewHelper.SetGradientTriangleStyle(context.Colour, context.Accent))">
                            @if (context.Grid > Model.MaximumInRace)
                            {
                                <MudText Typo="Typo.caption">DNQ</MudText>
                            }
                            else
                            {
                                <MudText Typo="Typo.caption">@context.Grid</MudText>
                            }
                        </MudTd>
                        <MudTd>@context.FullName</MudTd>
                        <MudTd>
                            <MudLink OnClick="@(async () => await PickStrategy(context.ResultId))">
                                @if (context.Strategy is null)
                                {
                                    <MudText>ferrari (no strategy)</MudText>
                                }
                                else
                                {
                                    <MudStack Spacing="1" Row="true">
                                        @foreach (var tyreElem in context.Strategy.StrategyTyres)
                                        {
                                            <span class="tyre" style="border-color:@(tyreElem.Tyre.Colour)">
                                                @tyreElem.Tyre.Name.ElementAt(0)
                                            </span>
                                        }
                                    </MudStack>
                                }
                            </MudLink>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>

        <MudItem xs="9">
            <MudGrid>
                <MudItem xs="6">
                    <MudPaper Class="pa-4">
                        <MudText Typo="Typo.h4">
                            <CountryFlag Code="@Model.Race.Track.Country" Size="FlagSize.Normal" />
                            @Model.Race.Name
                        </MudText>
                        @if (Model.TrackTraits?.Any() == true)
                        {
                            <MudList>
                                <MudListSubheader>Traits of this circuit</MudListSubheader>
                                @foreach (var trait in Model.TrackTraits)
                                {
                                    <MudListItem>
                                        @trait.Name - @trait.Description
                                    </MudListItem>
                                }
                            </MudList>
                        }
                    </MudPaper>
                </MudItem>
                <MudItem xs="6">
                    <MudPaper Class="pa-4">
                        <MudText Typo="Typo.h5">Track information</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Error">This section is pretty ugly, innit?</MudText>
                        <MudList>
                            <MudListItem>Length: @(Model.Race.Track.Length)km</MudListItem>
                            <MudListItem>Laps: @(NumberHelper.CalcLapCount(Model.Race.RaceLength, Model.Race.Track.Length))</MudListItem>
                            <MudListItem>Aero mod: @Model.Race.Track.AeroMod</MudListItem>
                            <MudListItem>Chassis mod: @Model.Race.Track.ChassisMod</MudListItem>
                            <MudListItem>Power mod: @Model.Race.Track.PowerMod</MudListItem>
                            <MudListItem>Qualy mod: @Model.Race.Track.QualifyingMod</MudListItem>
                            <MudListItem>Weather: @Model.Race.Weather</MudListItem>
                        </MudList>
                    </MudPaper>
                </MudItem>
                <MudItem xs="6">
                    <MudPaper Class="pa-4">
                        <MudText Typo="Typo.h5">Penalties</MudText>
                        @if (Model.AnyPenalties)
                        {
                            <MudSimpleTable Dense="true">
                                <thead>
                                    <tr>
                                        <th>Driver</th>
                                        <th>Reason</th>
                                        <th>Penalty</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var penalizedDriver in Model.RaceWeekDrivers.Where(e => e.Penalty.HasValue))
                                    {
                                        <tr>
                                            <td>@penalizedDriver.FullName</td>
                                            <td>@penalizedDriver.Reason</td>
                                            <td>+@(penalizedDriver.Penalty)</td>
                                        </tr>
                                    }
                                </tbody>
                            </MudSimpleTable>
                        }
                        else
                        {
                            <MudText>No penalties for this race</MudText>
                        }
                    </MudPaper>
                </MudItem>
                <MudItem xs="6">
                    <MudPaper Class="pa-4">
                        <MudButtonGroup Color="Color.Secondary" Variant="Variant.Outlined" VerticalAlign="true">
                            @if (Model.Race.State == State.Active)
                            {
                                <MudButton OnClick="GoToPractice">Practice</MudButton>
                                <MudButton OnClick="GoToQualifying">Qualifying</MudButton>
                            }
                            else if (Model.Race.State != State.Concept)
                            {
                                <MudButton OnClick="GoToRace">Race</MudButton>
                            }
                        </MudButtonGroup>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter] public long RaceId { get; set; }

    RaceWeekModel Model { get; set; }

    bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        Model = await RaceService.GetRaceWeekModel(RaceId);

        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Seasons", href: "seasons"),
            new BreadcrumbItem("Overview", href: $"overview/{Model.Race.SeasonId}"),
            new BreadcrumbItem("Raceweek", href: $"raceweek/{RaceId}"),
        });

        loading = false;
    }

    private void GoToPractice() => Nav.NavigateTo($"/practice/{RaceId}");
    private void GoToQualifying() => Nav.NavigateTo($"/qualifying/{RaceId}");
    private void GoToRace() => Nav.NavigateTo($"/race/{RaceId}");

    async Task PickStrategy(long resultId)
    {
        var parameters = new DialogParameters 
            {
                ["ResultId"] = resultId,
                ["Strategies"] = Model.AvailableStrategies,
            };

        var dialog = await DialogService.ShowAsync<StrategyPicker>("Set strategy", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Strategy newStrategy)
        {
            await RaceService.PickStrategy(resultId, newStrategy.Id, newStrategy.StrategyTyres[0].Tyre.Pace);

            Model.RaceWeekDrivers.Single(e => e.ResultId == resultId).Strategy = newStrategy;
        }
    }
}
