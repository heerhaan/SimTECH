@page "/raceweek/{RaceId:long}"
@inject ClimateService _climateService
@inject IncidentService _incidentService
@inject ManufacturerService _manufacturerService
@inject RaceService _raceService
@inject SeasonService _seasonService
@inject SeasonEntrantService _entrantService
@inject TraitService _traitService
@inject TyreService _tyreService
@inject BreadcrumbProvider _bread
@inject NavigationManager _nav
@inject IDialogService _dialogService
@inject ISnackbar _snack
@using EntityRace = SimTECH.Data.Models.Race;

<PageTitle>Raweceek</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    @if (!loading)
    {
        <CascadingValue Value="@Model">
            <MudTabs Centered="true">
                <MudTabPanel Text="Raweceek">

                </MudTabPanel>
                @for (int i = 1; i <= practiceCompleted; i++)
                {
                    var j = i;
                    <MudTabPanel Text="@($"FP{j}-{i}")">

                    </MudTabPanel>
                }
                <MudTabPanel Text="Qualifying">

                </MudTabPanel>
                <MudTabPanel Text="Race" Disabled="@raceDisabled">

                </MudTabPanel>
                <MudTabPanel Text="Post race" Disabled="@postraceDisabled">

                </MudTabPanel>
            </MudTabs>
        </CascadingValue>
    }
</MudContainer>

@code {
    [Parameter] public long RaceId { get; set; }

    public RaceWeekModel Model { get; set; }

    RaweCeekModel raweCeek;

    private List<SeasonDriver> seasonDrivers;
    private List<SeasonTeam> seasonTeams;
    private List<SeasonEngine> seasonEngines;
    private List<Result> raceResults;
    private List<Climate> climates;
    private List<Incident> incidents;
    private List<Manufacturer> manufacturers;
    private List<Tyre> tyres;
    private List<GivenPenalty> penalties;

    bool loading = true;
    bool raceDisabled = true;
    bool postraceDisabled = true;
    string nextSession = "None";
    int practiceCompleted;
    int nextPractice = 1;

    protected override async Task OnInitializedAsync()
    {
        Model = await _raceService.GetRaceWeekModel(RaceId);

        var race = await _raceService.GetRaceById(RaceId);
        var season = await _seasonService.GetSeasonById(race.SeasonId);
        var climate = climates.First(e => e.Id == race.ClimateId);

        seasonDrivers = await _entrantService.GetSeasonDrivers(race.SeasonId);
        seasonTeams = await _entrantService.GetSeasonTeams(race.SeasonId);
        seasonEngines = await _entrantService.GetSeasonEngines(race.SeasonId);
        raceResults = await _raceService.GetResultsOfRace(RaceId);
        climates = await _climateService.GetClimates(StateFilter.All);
        incidents = await _incidentService.GetIncidents(StateFilter.All);
        manufacturers = await _manufacturerService.GetManufacturers(StateFilter.All);
        tyres = await _tyreService.GetTyres();
        penalties = await _raceService.GetRacePenalties(RaceId);
        practiceCompleted = await _raceService.PracticeSessionsCompleted(RaceId);

        nextPractice = 1 + practiceCompleted;

        raweCeek = new RaweCeekModel
        {
            Race = race,
            Climate = climate,
            Season = season,
        };

        _bread.Reset();
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Seasons", href: "seasons"),
            new BreadcrumbItem("Overview", href: $"overview/{Model.Race.SeasonId}"),
            new BreadcrumbItem("Raceweek", href: $"raceweek/{RaceId}", disabled: true),
        });

        loading = false;
    }

    private async Task LoadDrivers(EntityRace race, Climate climate)
    {
        var allTraits = await _traitService.GetTraits();
        var traits = allTraits.Where(e => !e.ForWetConditions || e.ForWetConditions == climate.IsWet).ToList();

        var trackTraitIds = race.Track.TrackTraits?.Select(e => e.TraitId).ToList() ?? new();
        var trackTraits = traits.Where(e => trackTraitIds.Contains(e.Id)).ToList();

        var rawecekDrivers = new List<RaweCeekDriver>();
        foreach (var result in raceResults)
        {
            var driverTraits = new List<Trait>(trackTraits);

            var driver = seasonDrivers.First(e => e.Id == result.SeasonDriverId);
            var team = seasonTeams.First(e => e.Id == result.SeasonTeamId);

            var engine = seasonEngines.First(e => e.Id == team.SeasonEngineId);
            var manufacturer = manufacturers.First(e => e.Id == team.ManufacturerId);

            if (driver.Driver.DriverTraits?.Any() == true)
                driverTraits.AddRange(traits.Where(e => driver.Driver.DriverTraits.Select(dt => dt.TraitId).Contains(e.Id)));
            if (team.Team.TeamTraits?.Any() == true)
                driverTraits.AddRange(traits.Where(e => team.Team.TeamTraits.Select(dt => dt.TraitId).Contains(e.Id)));

            double teamModifiers = (team.Aero * race.Track?.AeroMod ?? 1)
                    + (team.Chassis * race.Track?.ChassisMod ?? 1)
                    + (team.Powertrain * race.Track?.PowerMod ?? 1);

            var driverPower = driver.Skill + driver.RetrieveStatusBonus(5);
            var carPower = team.BaseValue + teamModifiers.RoundDouble();
            var enginePower = (engine.Power * climate.EngineMultiplier).RoundDouble();
            var totalPower = driverPower + carPower + enginePower;

            var actualDefense = ((driver.Defense + driverTraits.Sum(e => e.Defense)) * race.Track?.DefenseMod ?? 1.0).RoundDouble();

            var raweDriver = new RaweCeekDriver
                {
                    SeasonDriverId = driver.Id,
                    FirstName = driver.Driver.FirstName,
                    LastName = driver.Driver.LastName,
                    Nationality = driver.Driver.Country,
                    Number = driver.Number,
                    Role = driver.TeamRole,

                    SeasonTeamId = team.Id,
                    TeamName = team.Name,
                    Colour = team.Colour,
                    Accent = team.Accent,

                    ManufacturerId = manufacturer.Id,
                    ManufacturerName = manufacturer.Name,
                    ManufacturerColour = manufacturer.Colour,
                    ManufacturerAccent = manufacturer.Accent,

                    QualyPower = totalPower + driverTraits.Sum(e => e.QualifyingPace),
                    RacePower = totalPower + driverTraits.Sum(e => e.RacePace),
                    Attack = driver.Attack + driverTraits.Sum(e => e.Attack),
                    Defense = actualDefense,
                    DriverReliability = driver.Reliability + driverTraits.Sum(e => e.DriverReliability) + climate.ReliablityModifier,
                    CarReliability = team.Reliability + driverTraits.Sum(e => e.CarReliability),
                    EngineReliability = engine.Reliability + driverTraits.Sum(e => e.EngineReliability),
                    WearMinMod = driverTraits.Sum(e => e.WearMin),
                    WearMaxMod = driverTraits.Sum(e => e.WearMax),
                    RngMinMod = driverTraits.Sum(e => e.RngMin) - climate.RngModifier,
                    RngMaxMod = driverTraits.Sum(e => e.RngMax) + climate.RngModifier,

                    LapScores = result.LapScores?.ToList() ?? new()
                };

            if (!climate.IsWet)
            {
                raweDriver.LifeBonus = manufacturer.Pace;
                raweDriver.WearMinMod += manufacturer.WearMin;
                raweDriver.WearMaxMod += manufacturer.WearMax;
            }

            rawecekDrivers.Add(raweDriver);
        }
    }

    private async Task PickStrategy(long resultId)
    {
        var parameters = new DialogParameters 
            {
                ["ResultId"] = resultId,
                ["Tyres"] = tyres,
            };

        var dialog = await _dialogService.ShowAsync<TyrePicker>("Set tyre", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Tyre pickedTyre)
        {
            await _raceService.PickTyre(resultId, pickedTyre);
            Model.RaceWeekDrivers.First(e => e.ResultId == resultId).Tyre = pickedTyre;
        }
    }

    private void GoToPractice(int num) => _nav.NavigateTo($"/practice/{RaceId}/{num}");
    private void GoToQualifying() => _nav.NavigateTo($"/qualifying/{RaceId}");
    private void GoToRace() => _nav.NavigateTo($"/race/{RaceId}");
}
