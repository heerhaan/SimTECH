@page "/raceweek/{RaceId:long}"
@inject RaceService _raceService
@inject TyreService _tyreService
@inject BreadcrumbProvider _bread
@inject NavigationManager _nav
@inject IDialogService _dialogService
@inject ISnackbar _snack

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4" id="raceweek-container">
    @if (!loading)
    {
        <MudGrid>
            <MudItem xs="3">
                <MudPaper Class="pa-4 mud-height-full">
                    <MudStack AlignItems="AlignItems.Center" Class="mud-height-full">
                        <ScreenshotButton TargetId="raceweek-container" />
                        <MudText Typo="Typo.h3">@Model.Race.Name</MudText>

                        <MudStack Row="true" AlignItems="AlignItems.Center">
                            <MudIcon Icon="@Model.Race.Climate.Icon" />
                            <MudText>@Model.Race.Climate.Terminology</MudText>
                        </MudStack>

                        @if (Model.TrackTraits?.Any() == true)
                        {
                            <MudList>
                                <MudListSubheader>Circuit traits</MudListSubheader>
                                @foreach (var trait in Model.TrackTraits)
                                {
                                    <MudListItem>
                                        <MudStack Spacing="0">
                                            <MudText Typo="Typo.subtitle1">@trait.Name</MudText>
                                            <MudDivider />
                                            <MudText>@trait.Description</MudText>
                                        </MudStack>
                                    </MudListItem>
                                }
                            </MudList>
                        }

                        <MudButtonGroup Color="Color.Secondary" Variant="Variant.Outlined" VerticalAlign="true" Class="mt-2 mud-width-full">
                            @if (Model.Race.State == State.Active)
                            {
                                <MudButton FullWidth="true" OnClick="GoToPractice">Practice</MudButton>
                                <MudButton FullWidth="true" OnClick="GoToQualifying">Qualifying</MudButton>
                            }
                            else if (Model.Race.State != State.Concept)
                            {
                                <MudButton FullWidth="true" OnClick="GoToRace">Race</MudButton>
                            }
                        </MudButtonGroup>
                    </MudStack>
                </MudPaper>
            </MudItem>
            <MudItem xs="6">
                <MudPaper Class="pa-4 mud-height-full">
                    <MudTable Items="@Model.RaceWeekDrivers.OrderBy(e => e.Grid)" Dense="true" id="race-week-grid">
                        <ToolBarContent>
                            <MudText Typo="Typo.h5">Grid</MudText>
                            <MudSpacer />
                            <ScreenshotButton TargetId="race-week-grid" />
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Grid</MudTh>
                            <MudTh>Name</MudTh>
                            <MudTh>Team</MudTh>
                            <MudTh Class="number-col">Supp</MudTh>
                            <MudTh>PEN.</MudTh>
                            <MudTh>Tyre</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>
                                @if (context.Grid > Model.MaximumInRace)
                                {
                                    <MudText Typo="Typo.caption">DNQ</MudText>
                                }
                                else
                                {
                                    <MudText Typo="Typo.h6" Style="@(ViewHelper.SetTextNumberStyle(context.Colour, context.Accent))">@context.Grid</MudText>
                                }
                            </MudTd>
                            <MudTd>
                                <MudText>@context.FullName</MudText>
                            </MudTd>
                            <MudTd>
                                <MudText>@context.TeamName</MudText>
                            </MudTd>
                            <MudTd Class="number-col" Style="@ViewHelper.SetFullColourstyle(context.ManufacturerColour, context.ManufacturerAccent)">
                                <MudText Typo="Typo.caption">@context.ManufacturerName.ElementAt(0)</MudText>
                            </MudTd>
                            <MudTd>
                                @if (context.Penalty.HasValue)
                                {
                                    <MudText>+@(context.Penalty.Value)</MudText>
                                }
                            </MudTd>
                            <MudTd>
                                <MudLink OnClick="@(async () => await PickStrategy(context.ResultId))">
                                    <TyreElement Colour="@context.Tyre.Colour">
                                        @(context.Tyre.Name.ElementAt(0))
                                    </TyreElement>
                                </MudLink>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
            <MudItem xs="3">
                <MudPaper Class="pa-4 mud-height-full">
                    <MudText Typo="Typo.h5">Track information</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Error">This section is pretty ugly, mate</MudText>

                    <MudListExtended T="string">
                        <MudListItemExtended T="string" SecondaryText="Country">
                            <CountryNamedFlag Code="@Model.Race.Track.Country" Size="FlagSize.Normal" Reverse="true" />
                        </MudListItemExtended>
                        <MudListItemExtended T="string" Text="@Model.Race.Climate.Terminology" SecondaryText="Weather">
                            <MudIcon Icon="@Model.Race.Climate.Icon" />
                        </MudListItemExtended>
                        <MudListItemExtended T="string" Text="@($"{Model.Race.Track.Length}Km")" SecondaryText="Length" />
                        <MudListItemExtended T="string" Text="@($"{NumberHelper.CalcLapCount(Model.Race.RaceLength, Model.Race.Track.Length)}")" SecondaryText="Laps" />
                        <MudListItemExtended T="double" Text="@Model.Race.Track.AeroMod.ToString("F2")" SecondaryText="Aero modifier" />
                        <MudListItemExtended T="double" Text="@Model.Race.Track.ChassisMod.ToString("F2")" SecondaryText="Chassis modifier" />
                        <MudListItemExtended T="double" Text="@Model.Race.Track.PowerMod.ToString("F2")" SecondaryText="Powertrain modifier" />
                        <MudListItemExtended T="double" Text="@Model.Race.Track.QualifyingMod.ToString("F2")" SecondaryText="Qualifying modifier" />
                        <MudListItemExtended T="double" Text="@Model.Race.Track.DefenseMod.ToString("F2")" SecondaryText="Defense modifier" />
                    </MudListExtended>
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    [Parameter] public long RaceId { get; set; }

    public RaceWeekModel Model { get; set; }
    private List<Tyre> Tyres { get; set; }

    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        Model = await _raceService.GetRaceWeekModel(RaceId);
        Tyres = await _tyreService.GetTyres();

        _bread.Reset();
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Seasons", href: "seasons"),
            new BreadcrumbItem("Overview", href: $"overview/{Model.Race.SeasonId}"),
            new BreadcrumbItem("Raceweek", href: $"raceweek/{RaceId}", disabled: true),
        });

        loading = false;
    }

    async Task PickStrategy(long resultId)
    {
        var parameters = new DialogParameters 
            {
                ["ResultId"] = resultId,
                ["Tyres"] = Tyres,
            };

        var dialog = await _dialogService.ShowAsync<TyrePicker>("Set tyre", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Tyre pickedTyre)
        {
            await _raceService.PickTyre(resultId, pickedTyre);

            Model.RaceWeekDrivers.Single(e => e.ResultId == resultId).Tyre = pickedTyre;
        }
    }

    // Navigation links
    private void GoToPractice() => _nav.NavigateTo($"/practice/{RaceId}");
    private void GoToQualifying()
    {
        _nav.NavigateTo($"/qualifying/{RaceId}");
    }
    private void GoToRace() => _nav.NavigateTo($"/race/{RaceId}");
}
