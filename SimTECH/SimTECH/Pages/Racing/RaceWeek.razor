@page "/raceweek/{RaceId:long}"
@inject ClimateService _climateService
@inject IncidentService _incidentService
@inject ManufacturerService _manufacturerService
@inject RaceService _raceService
@inject SeasonService _seasonService
@inject SeasonEntrantService _entrantService
@inject TraitService _traitService
@inject TyreService _tyreService
@inject BreadcrumbProvider _bread
@inject NavigationManager _nav
@inject IDialogService _dialog
@inject ISnackbar _snack
@inject IOptions<SimConfig> _config

<PageTitle>Raweceek</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudPaper Elevation="100">
        @if (!loading)
        {
            <CascadingValue Value="@Model">
                <MudTabs Centered="true" Outlined="true">
                    <MudTabPanel Text="Raceweek">
                        <Landing TrackTraits="@trackTraits"
                                 OnOpenTyrePicker="PickRaceTyre" />
                    </MudTabPanel>
                    <MudTabPanel Text="Practice" OnClick="OnOpenPractice">
                        @if (practiceLoaded)
                        {
                            <MudTabs Centered="true" Outlined="true">
                                @foreach (var session in practiceSessions.OrderBy(e => e.SessionIndex))
                                {
                                    <MudTabPanel Text="@($"FP{session.SessionIndex}")" ID="@($"fp_{session.SessionIndex}")">
                                        <Practice PracticeSession="@session"
                                                  OnFinish="PersistPractice" />
                                    </MudTabPanel>
                                }
                            </MudTabs>
                        }
                    </MudTabPanel>
                    <MudTabPanel Text="Qualifying" OnClick="OnOpenQualifying">
                        @if (qualifyingLoaded)
                        {
                            <MudTabs @ref="_qualyTabs" Centered="true" Outlined="true">
                                @foreach (var session in qualySessions)
                                {
                                    <MudTabPanel Text="@($"Q{session.SessionIndex}")" Icon="@Icons.Material.Filled.AccessTime" Disabled="@session.IsDisabled">
                                        <Qualifying QualySession="@session"
                                                    OnFinish="PersistQualifying" />
                                    </MudTabPanel>
                                }
                            </MudTabs>
                        }
                    </MudTabPanel>
                    <MudTabPanel Text="Race" Disabled="@raceDisabled" OnClick="OnOpenRace">
                        @if (raceLoaded)
                        {
                            <Race LapScores="@lapScores"
                                  Occurrences="@occurrences"
                                  Incidents="@incidents"
                                  Tyres="@tyres"
                                  Config="@config"
                                  OnFinish="PersistRace" />
                        }
                    </MudTabPanel>
                    <MudTabPanel Text="Post race" Disabled="@postraceDisabled">
                        <PostRace UpcomingPenalties="@upcomingPenalties"
                                  OnNavigate="GoToCommon" />
                    </MudTabPanel>
                </MudTabs>
            </CascadingValue>
        }
    </MudPaper>
</MudContainer>

@code {
    [Parameter] public long RaceId { get; set; }

    public RaweCeekModel Model { get; set; } = new();

    private List<Incident> incidents;
    private List<Trait> trackTraits = new();
    private List<Tyre> tyres;

    private List<PracticeSession> practiceSessions = new();
    private List<QualifyingSession> qualySessions = new();
    private List<LapScore> lapScores = new();
    private List<RaceOccurrence> occurrences = new();

    private List<GivenPenalty> upcomingPenalties = new();

    SimConfig config;

    MudTabs? _qualyTabs;

    bool loading = true;
    bool practiceLoaded;
    bool qualifyingLoaded;
    bool raceLoaded;

    bool raceDisabled => Model.Race.State != State.Advanced && Model.Race.State != State.Closed;
    bool postraceDisabled => Model.Race.State != State.Closed;

    protected override async Task OnInitializedAsync()
    {
        incidents = await _incidentService.GetIncidents(StateFilter.All);
        tyres = await _tyreService.GetTyres(StateFilter.All);

        config = _config.Value;

        var race = await _raceService.GetRaceById(RaceId);
        if (race.State == State.Concept)
        {
            var idNextRace = await _raceService.GetNextRaceIdOfSeason(race.SeasonId);
            if (idNextRace.GetValueOrDefault() != race.Id)
                throw new InvalidOperationException("Somehow you landed inside a raceweek which is not valid for activation, dumbass");

            await _raceService.ActivateRace(race.Id);
            race.State = State.Active;
        }
        else if (race.State == State.Closed)
        {
            var nextRaceId = await _raceService.GetRaceIdByRound(race.SeasonId, (1 + race.Round));
            if (nextRaceId.HasValue)
            {
                var nextRacePenalties = await _raceService.GetRacePenalties(nextRaceId.Value);
                if (nextRacePenalties?.Any() ?? false)
                    upcomingPenalties.AddRange(nextRacePenalties);
            }
        }

        Model.Race = race;
        Model.Season = await _seasonService.GetSeasonById(race.SeasonId);
        Model.Climate = await _climateService.GetClimateById(race.ClimateId);
        Model.GapMarge = config.GapMarge;

        await LoadDrivers();

        _bread.Reset();
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Seasons", href: "seasons"),
            new BreadcrumbItem("Overview", href: $"overview/{Model.Season.Id}"),
            new BreadcrumbItem("Raceweek", href: $"raceweek/{RaceId}", disabled: true),
        });

        loading = false;
    }

    private async Task LoadDrivers()
    {
        var race = Model.Race;
        var climate = Model.Climate;

        var seasonDrivers = await _entrantService.GetSeasonDrivers(race.SeasonId);
        var seasonTeams = await _entrantService.GetSeasonTeams(race.SeasonId);
        var seasonEngines = await _entrantService.GetSeasonEngines(race.SeasonId);
        var manufacturers = await _manufacturerService.GetManufacturers(StateFilter.All);
        var raceResults = await _raceService.GetResultsOfRace(RaceId);
        var allTraits = await _traitService.GetTraits();

        var traits = allTraits.Where(e => !e.ForWetConditions || e.ForWetConditions == climate.IsWet).ToList();

        var trackTraitIds = race.Track.TrackTraits?.Select(e => e.TraitId).ToList() ?? new();
        trackTraits = traits.Where(e => trackTraitIds.Contains(e.Id)).ToList();

        var raweceekDrivers = new List<RaweCeekDriver>();
        foreach (var result in raceResults)
        {
            var driverTraits = new List<Trait>(trackTraits);

            var driver = seasonDrivers.First(e => e.Id == result.SeasonDriverId);
            var team = seasonTeams.First(e => e.Id == result.SeasonTeamId);

            var engine = seasonEngines.First(e => e.Id == team.SeasonEngineId);
            var manufacturer = manufacturers.First(e => e.Id == team.ManufacturerId);

            if (driver.Driver.DriverTraits?.Any() == true)
                driverTraits.AddRange(traits.Where(e => driver.Driver.DriverTraits.Select(dt => dt.TraitId).Contains(e.Id)));
            if (team.Team.TeamTraits?.Any() == true)
                driverTraits.AddRange(traits.Where(e => team.Team.TeamTraits.Select(dt => dt.TraitId).Contains(e.Id)));

            var driverPower = driver.Skill + driver.RetrieveStatusBonus(config.CarDriverStatusModifier);
            var carPower = team.BaseValue + team.ModifierApplication(race.Track);
            var enginePower = (engine.Power * climate.EngineMultiplier).RoundDouble();
            var totalPower = driverPower + carPower + enginePower;

            var actualDefense = ((driver.Defense + driverTraits.Sum(e => e.Defense)) * race.Track?.DefenseMod ?? 1.0).RoundDouble();

            var raweDriver = new RaweCeekDriver
                {
                    SeasonDriverId = driver.Id,
                    FirstName = driver.Driver.FirstName,
                    LastName = driver.Driver.LastName,
                    Nationality = driver.Driver.Country,
                    Number = driver.Number,
                    Role = driver.TeamRole,

                    SeasonTeamId = team.Id,
                    TeamName = team.Name,
                    Colour = team.Colour,
                    Accent = team.Accent,

                    ManufacturerId = manufacturer.Id,
                    ManufacturerName = manufacturer.Name,
                    ManufacturerColour = manufacturer.Colour,
                    ManufacturerAccent = manufacturer.Accent,

                    QualyPower = totalPower + driverTraits.Sum(e => e.QualifyingPace),
                    RacePower = totalPower + driverTraits.Sum(e => e.RacePace),
                    Attack = driver.Attack + driverTraits.Sum(e => e.Attack),
                    Defense = actualDefense,
                    DriverReliability = driver.Reliability + driverTraits.Sum(e => e.DriverReliability) + climate.ReliablityModifier,
                    CarReliability = team.Reliability + driverTraits.Sum(e => e.CarReliability),
                    EngineReliability = engine.Reliability + driverTraits.Sum(e => e.EngineReliability),
                    WearMinMod = driverTraits.Sum(e => e.WearMin),
                    WearMaxMod = driverTraits.Sum(e => e.WearMax),
                    RngMinMod = driverTraits.Sum(e => e.RngMin) - climate.RngModifier,
                    RngMaxMod = driverTraits.Sum(e => e.RngMax) + climate.RngModifier,

                    ResultId = result.Id,
                    Grid = result.Grid,
                    Position = result.Position,
                    AbsoluteGrid = result.AbsoluteGrid,
                    AbsolutePosition = result.AbsolutePosition,
                    Status = result.Status,
                    Setup = result.Setup,
                    TyreLife = result.TyreLife,
                    FastestLap = result.FastestLap,
                    Overtaken = result.Overtaken,
                    Defended = result.Defended,

                    Incident = incidents.FirstOrDefault(e => e.Id == result.IncidentId.GetValueOrDefault()),
                    Tyre = tyres.First(e => e.Id == result.TyreId),
                };

            if (Model.Season.HasRaceClasses)
            {
                raweDriver.ClassId = team.ClassId.GetValueOrDefault();
                raweDriver.Class = Model.Season.RaceClasses.FirstOrDefault(e => e.Id == team.ClassId.GetValueOrDefault());
            }

            if (!climate.IsWet)
            {
                // Adds on to the existing tyre, should probably be added when activating instead
                raweDriver.TyreLife += manufacturer.Pace;

                raweDriver.LifeBonus = manufacturer.Pace;
                raweDriver.WearMinMod += manufacturer.WearMin;
                raweDriver.WearMaxMod += manufacturer.WearMax;
            }

            raweceekDrivers.Add(raweDriver);
        }

        var penalties = await _raceService.GetRacePenalties(RaceId);

        foreach (var penalty in penalties.GroupBy(e => e.SeasonDriverId))
        {
            var matchingDriver = raweceekDrivers.FirstOrDefault(e => e.SeasonDriverId == penalty.Key);
            if (matchingDriver != null)
            {
                matchingDriver.Penalty = penalty.Sum(e => e.Incident.Punishment);
                // Reasons is an ugly solution, rather see this re-implemented
                matchingDriver.Reasons = string.Join(", ", penalty.Select(e => e.Incident.Name));

                Model.ConsumablePenalties.AddRange(penalty.Select(e => e.Id));
            }
        }

        foreach (var driverGroup in raweceekDrivers.GroupBy(e => e.ClassId))
        {
            int indexer = 0;
            foreach (var driver in driverGroup.OrderByDescending(e => e.RelativePower))
                driver.ExpectedPosition = ++indexer;
        }

        Model.RaweCeekDrivers = raweceekDrivers;
    }

    private async Task OnOpenPractice()
    {
        if (practiceLoaded)
            return;

        var practiceScores = await _raceService.GetPracticeScores(RaceId);

        foreach (var groupedPracticeScores in practiceScores.GroupBy(e => e.Index))
        {
            practiceSessions.Add(new PracticeSession
                {
                    SessionIndex = groupedPracticeScores.Key,
                    IsFinished = true,
                    SessionScores = groupedPracticeScores.ToList(),
                });
        }

        if (Model.Race.State != State.Advanced && Model.Race.State != State.Closed)
            AddNewPracticeSession();

        practiceLoaded = true;
    }

    private async Task OnOpenQualifying()
    {
        if (qualifyingLoaded)
            return;

        var qualyScores = await _raceService.GetQualifyingScores(RaceId);
        var qSessionCount = Model.Season.QualifyingFormat.SessionCount();
        var previousSessionIsFinished = true;

        for (int i = 1; i <= qSessionCount; i++)
        {
            var currentScores = qualyScores.Where(e => e.Index == i).ToList();

            var qSession = new QualifyingSession
                {
                    SessionIndex = i,
                    IsDisabled = !previousSessionIsFinished,
                    IsFinished = currentScores.Any(),
                    SessionScores = currentScores,
                };

            previousSessionIsFinished = qSession.IsFinished;

            // REFACTOR: Er is hier vast een betere oplossing voor
            if (Model.Season.QualifyingFormat == QualyFormat.TripleEliminate)
            {
                if (qSession.SessionIndex == 1)
                {
                    qSession.ProgressionCutoff = Model.Season.QualifyingAmountQ2;
                }
                else if (qSession.SessionIndex == 2)
                {
                    qSession.AllowedEntries = Model.Season.QualifyingAmountQ2;
                    qSession.ProgressionCutoff = Model.Season.QualifyingAmountQ3;
                }
                else if (qSession.SessionIndex == 3)
                {
                    qSession.AllowedEntries = Model.Season.QualifyingAmountQ3;
                }
            }

            qualySessions.Add(qSession);
        }

        qualifyingLoaded = true;
    }

    private async Task OnOpenRace()
    {
        if (raceLoaded)
            return;

        lapScores = await _raceService.GetLapScores(RaceId);
        occurrences = await _raceService.GetRaceOccurrences(RaceId);

        raceLoaded = true;
    }

    private async Task PickRaceTyre(long resultId)
    {
        var parameters = new DialogParameters 
            {
                ["ResultId"] = resultId,
                ["Tyres"] = tyres
                    .Where(e => e.State == State.Active && (e.LeagueTyres?.Any(e => e.LeagueId == Model.Season.LeagueId) ?? false))
                    .ToList(),
            };

        var dialog = await _dialog.ShowAsync<TyrePicker>("Set tyre", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Tyre pickedTyre)
        {
            await _raceService.PickTyre(resultId, pickedTyre);

            // Assign the picked tyre and ofc dont forget the life bonus
            var driver = Model.RaweCeekDrivers.First(e => e.ResultId == resultId);
            driver.Tyre = pickedTyre;
            driver.TyreLife = pickedTyre.Pace + driver.LifeBonus;
        }
    }

    private void AddNewPracticeSession()
    {
        var nextSession = practiceSessions.Count() + 1;
        practiceSessions.Add(new PracticeSession
            {
                SessionIndex = nextSession,
                IsFinished = false,
                SessionScores = new(),
            });
    }

    private async Task PersistPractice(int practiceIndex)
    {
        var practiceSession = practiceSessions.First(e => e.SessionIndex == practiceIndex);
        var gridResults = practiceSession.SessionScores.ToDictionary(e => e.ResultId, e => e.Position);

        await _raceService.PersistPracticeScores(practiceSession.SessionScores);

        practiceSession.IsFinished = true;

        // Update the new grid and position
        foreach (var res in gridResults)
        {
            var matchingDriver = Model.RaweCeekDrivers.First(e => e.ResultId == res.Key);
            matchingDriver.Grid = res.Value;
            matchingDriver.Position = res.Value;
        }

        AddNewPracticeSession();
    }

    private async Task PersistQualifying(int qualyIndex)
    {
        var qSessionCount = Model.Season.QualifyingFormat.SessionCount();
        var qualySession = qualySessions.First(e => e.SessionIndex == qualyIndex);

        if (!qualySession.SessionScores.Any())
            throw new InvalidOperationException("No score data to persist");

        qualySession.IsFinished = true;

        if (qSessionCount == qualyIndex)
        {
            var finalQualyPosition = new Dictionary<long, (int, int)>();
            var qualySessionScores = qualySessions.SelectMany(e => e.SessionScores).ToList();

            foreach (var seasonGroup in Model.ResultsGroupedByRaceClass())
            {
                int positionIndexer = 0;
                var gridResults = qualySessions
                    .SelectMany(e => e.SessionScores)
                    .Where(e => seasonGroup.Value.Contains(e.ResultId))
                    .GroupBy(e => e.ResultId)
                    .Select(e => e.MaxBy(r => r.Index));

                foreach (var penaltyResult in gridResults.OrderBy(e => e.PenaltyPosition()))
                    finalQualyPosition.Add(penaltyResult.ResultId, (++positionIndexer, penaltyResult.AbsolutePosition));
            }

            await _raceService.FinishQualifying(qualySession.SessionScores, finalQualyPosition, RaceId, Model.Season.MaximumDriversInRace);

            if (Model.ConsumablePenalties.Any())
                await _raceService.ConsumePenalties(Model.ConsumablePenalties, RaceId);

            // Update the new grid, position and status
            foreach (var res in finalQualyPosition)
            {
                var matchingDriver = Model.RaweCeekDrivers.First(e => e.ResultId == res.Key);
                var sessionScore = qualySessionScores.First(e => e.ResultId == res.Key);

                matchingDriver.Grid = res.Value.Item1;
                matchingDriver.Position = res.Value.Item1;
                matchingDriver.AbsoluteGrid = sessionScore.AbsolutePosition;
                matchingDriver.AbsolutePosition = sessionScore.AbsolutePosition;
                matchingDriver.Status = res.Value.Item1 > Model.Season.MaximumDriversInRace ? RaceStatus.Dnq : RaceStatus.Racing;
            }

            Model.Race.State = State.Advanced;
        }
        else
        {
            await _raceService.PersistQualifyingScores(qualySession.SessionScores);

            // Update the new grid and position
            foreach (var res in qualySession.SessionScores)
            {
                var matchingDriver = Model.RaweCeekDrivers.First(e => e.ResultId == res.ResultId);
                matchingDriver.Grid = res.Position;
                matchingDriver.Position = res.Position;
                matchingDriver.AbsoluteGrid = res.AbsolutePosition;
                matchingDriver.AbsolutePosition = res.AbsolutePosition;
            }

            var nextSession = qualySessions.First(e => e.SessionIndex == (1 + qualyIndex));
            nextSession.IsDisabled = false;

            // Navigate to the next qualifying session
            //var nextQ = 1 + qualyIndex;
            //if (qualySessions > 1 && _qualyTabs != null)
            //    _qualyTabs.ActivatePanel($"q_{nextQ}");
        }

        if (qualyIndex == 1 && practiceLoaded && practiceSessions.Any())
        {
            // Removes the last added practice session
            var latestPracticeSession = practiceSessions.MaxBy(e => e.SessionIndex);
            if (latestPracticeSession != null)
                practiceSessions.Remove(latestPracticeSession);
        }
    }

    private async Task PersistRace()
    {
        if (!lapScores.Any() || !occurrences.Any())
        {
            _snack.Add("good god, saving a race for which we have NO data. How wrong!", Severity.Error);
            return;
        }

        var allotments = Model.Season.PointAllotments?.ToDictionary(e => e.Position, e => e.Points) ?? new();
        var finalResults = Model.RaweCeekDrivers
            .Select(e => e.MapToResult(RaceId))
            .ToList();
        var scoredPoints = Model.RaweCeekDrivers
            .Select(e => e.MapToScoredPoints(allotments, Model.Season.PointsPole, Model.Season.PointsFastestLap))
            .ToList();

        await _raceService.PersistLapScores(lapScores);
        await _raceService.PersistOccurrences(occurrences);
        await _raceService.FinishRace(RaceId, finalResults, scoredPoints);

        if (Model.LeagueOptions.HasFlag(LeagueOptions.EnablePenalty))
        {
            await _seasonService.CheckPenalties(finalResults);

            var nextRaceId = await _raceService.GetRaceIdByRound(Model.Season.Id, (1 + Model.Race.Round));
            if (nextRaceId.HasValue)
            {
                var nextRacePenalties = await _raceService.GetRacePenalties(nextRaceId.Value);
                if (nextRacePenalties?.Any() ?? false)
                    upcomingPenalties.AddRange(nextRacePenalties);
            }
        }

        Model.Race.State = State.Closed;
    }

    private void GoToCommon(string path) => _nav.NavigateTo(path);
}
