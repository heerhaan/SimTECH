@page "/race/{RaceId:long}"

@inject RaceService _raceService
@inject NavigationManager Nav
@inject ISnackbar Snackbar

@if (!loading)
{
    <MudTable Items="@Model.RaceDrivers.OrderBy(e => e.Position)" Dense="true" HorizontalScrollbar="false" Style="width: 1600px">
        <ToolBarContent>
            <MudText>
                <CountryFlag Code="@Model.Country" />
                @Model.Name - RACE @Model.Round
            </MudText>
            <MudText>weater: @Model.Weather</MudText>
            <MudText>next stint: @currentStint</MudText>
            <MudSpacer />
            @if (currentStint == Model.AmountRuns)
            {
                <MudButton Variant="Variant.Outlined" OnClick="Finish">Finish</MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Outlined" OnClick="Advance">Advance</MudButton>
            }
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="width: 15px">#</MudTh>
            <MudTh Style="width: 30px">Grid</MudTh>
            <MudTh Style="min-width: 220px">Name</MudTh>
            <MudTh Style="width: 30px">No</MudTh>
            <MudTh Style="min-width: 220px">Team</MudTh>
            <MudTh Style="width: 30px">PWR</MudTh>
            <MudTh Style="width: 50px">TYRE</MudTh>
            @foreach (var stint in Model.Stints.OrderBy(e => e.Order))
            {
                <MudTh Style="width: 30px">@stint.Order</MudTh>
            }
            <MudTh Style="min-width: 100px">Score</MudTh>
            <MudTh Style="min-width: 100px">Status</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Style="@(ViewHelper.GetGradientCellStyle(context.Colour, context.Accent))">
                @context.Position
            </MudTd>
            <MudTd>@context.Grid</MudTd>
            <MudTd>
                <CountryFlag Code="@context.Nationality" Size="FlagSize.Tiny" />
                @context.FullName
            </MudTd>
            <MudTd>@context.Number</MudTd>
            <MudTd Style="@(ViewHelper.GetTeamSimpleStyle(context.Colour))">
                @context.TeamName
            </MudTd>
            <MudTd>@context.Power</MudTd>
            <MudTd>
                <span class="tyre" style="border-color:@(context.CurrentTyre.Colour)">
                    @context.TyreLife
                </span>
            </MudTd>
            @foreach (var stint in Model.Stints.OrderBy(e => e.Order))
            {
                var driverStint = context.RaceStints.Find(e => e.Order == stint.Order);
                if (driverStint != null)
                {
                    <MudTd>@driverStint.Score</MudTd>
                }
                else
                {
                    <MudTd>-</MudTd>
                }
            }
            <MudTd>
                @if (context.Status == RaceStatus.Racing)
                {
                    <MudText>@context.RaceScore</MudText>
                }
                else
                {
                    <MudText>@context.Status</MudText>
                }
            </MudTd>
            <MudTd>
                @if (context.Status == RaceStatus.Racing)
                {
                    <MudText>@context.DisplayGap</MudText>
                }
                else
                {
                    <MudText>@context.Incident</MudText>
                }
            </MudTd>
        </RowTemplate>
        <FooterContent>
            <MudTd colspan="20">
                <MudStack Row="true" Justify="Justify.SpaceBetween">
                    <MudIconButton Icon="@Icons.Material.Outlined.Image" Color="Color.Primary" OnClick="ShowImage" />
                    <MudIconButton Icon="@Icons.Material.Outlined.InsertChart" Color="Color.Primary" OnClick="ShowGraph" />
                </MudStack>
            </MudTd>
        </FooterContent>
    </MudTable>
}

@code {
    [Parameter] public long RaceId { get; set; }

    public RaceModel Model { get; set; }

    private bool loading = true;
    private int currentStint = 0;

    private int disqualifyChance = (100 / 4); // means 1/25 chance of DSQ | should read from config
    private int mistakeRolls = 2;
    private int mistakeMinCost = -30;
    private int mistakeMaxCost = -20;
    private double gapMarge = 0.28;

    protected override async Task OnInitializedAsync()
    {
        Model = await _raceService.RetrieveRaceModel(RaceId);

        if (Model.RaceDrivers.First().RaceStints.Any())
            currentStint = DetermineCurrentStint();

        loading = false;
    }

    private void Advance()
    {
        var nextStint = currentStint;

        // Determine which stint it currently is
        var raceStint = Model.Stints.Find(e => e.Order == nextStint);

        if (raceStint == null)
        {
            Snackbar.Add($"Couldn't find the upcoming stint {currentStint--} for this race, how weird!", Severity.Error);
            return;
        }

        // Determine the values which impact the race like: weather and it's multipliers (configuration innit?)

        // Iterate through all still running drivers
        foreach (var driver in Model.RaceDrivers.Where(e => e.Status == RaceStatus.Racing))
        {
            // Add a new stint result object which complements their order, read from racestint for this
            var driverStint = new RaceStint
            {
                Order = raceStint.Order,
                TotalScore = driver.RaceScore,
                RacerEvents = RacerEvent.Racing,
            };

            // Check reliability
            if (raceStint.StintEvents.HasFlag(StintEvent.Reliability))
            {
                var wouldDisqualify = NumberHelper.RandomInt(disqualifyChance) == 0;

                if (DidReliabilityFail(driver.DriverReliability))
                {
                    driver.Status = wouldDisqualify ? RaceStatus.Dsq : RaceStatus.Dnf;
                    driver.Incident = wouldDisqualify ? Incident.Dangerous : Incident.Damage;

                    driverStint.RacerEvents = RacerEvent.DriverDnf;
                    driverStint.Score = wouldDisqualify ? -2000 : -1000;
                }
                else if (DidReliabilityFail(driver.CarReliability))
                {
                    driver.Status = wouldDisqualify ? RaceStatus.Dsq : RaceStatus.Dnf;
                    driver.Incident = wouldDisqualify ? Incident.Illegal : Incident.Clutch;

                    driverStint.RacerEvents = RacerEvent.CarDnf;
                    driverStint.Score = wouldDisqualify ? -2000 : -1000;
                }
                else if (DidReliabilityFail(driver.EngineReliability))
                {
                    driver.Status = wouldDisqualify ? RaceStatus.Dsq : RaceStatus.Dnf;
                    driver.Incident = wouldDisqualify ? Incident.Fuel : Incident.Engine;

                    driverStint.RacerEvents = RacerEvent.EngineDnf;
                    driverStint.Score = wouldDisqualify ? -2000 : -1000;
                }
            }

            // Calculate stintscore
            if (driver.Status == RaceStatus.Racing)
            {
                var stintScore = NumberHelper.RandomInt((raceStint.RngMin + driver.RngMinMod), (raceStint.RngMax + driver.RngMaxMod));

                // Mistake
                var mistake = false;
                for (int i = 0; i < mistakeRolls; i++)
                {
                    mistake = DidReliabilityFail(driver.DriverReliability);
                    if (!mistake)
                        break;
                }

                if (mistake)
                {
                    stintScore += NumberHelper.RandomInt(mistakeMinCost, mistakeMaxCost);
                    driverStint.RacerEvents |= RacerEvent.Mistake;
                }

                // TODO: Strategy
                if (driver.WearMinMod <= driver.WearMaxMod)
                    driver.WearMinMod = driver.WearMaxMod + 1;

                driver.TyreLife += NumberHelper.RandomInt(driver.WearMaxMod, driver.WearMinMod);

                // ApplyDriver
                if (raceStint.StintEvents.HasFlag(StintEvent.Driver))
                    stintScore += driver.DriverPower;

                // ApplyTeam
                if (raceStint.StintEvents.HasFlag(StintEvent.Car))
                    stintScore += driver.CarPower;

                // ApplyEngine
                if (raceStint.StintEvents.HasFlag(StintEvent.Engine))
                    stintScore += driver.EnginePower;

                driverStint.Score = stintScore;
            }

            driverStint.TotalScore += driverStint.Score;
            driver.RaceScore = driverStint.TotalScore;
            driver.RaceStints.Add(driverStint);
        }

        // Determine new positions (keep team role in mind here!)
        DeterminePositions();

        // Persist the new stint results, yes after doing all whats needed to show them

        currentStint++;
    }

    private int DetermineCurrentStint()
    {
        return Model.RaceDrivers.SelectMany(e => e.RaceStints).Max(e => e.Order);
    }

    private bool DidReliabilityFail(int reliability) => NumberHelper.RandomInt(100) >= reliability;

    private void DeterminePositions()
    {
        var position = 0;
        var highestScore = Model.RaceDrivers.Max(e => e.RaceScore);

        foreach (var driver in Model.RaceDrivers.OrderByDescending(e => e.RaceScore))
        {
            driver.Position = ++position;
            driver.DisplayGap = GapToLeader(driver.RaceScore, highestScore);
        }

        // Apply the whole thing here where main/support matters
    }

    private string GapToLeader(int score, int highestScore)
    {
        double gap = ((highestScore - score) * gapMarge);

        return $"+{Math.Round(gap, 2)}";
    }

    private static int GetQualifyingBonus(int grid, int driverCount, int bonus) => (driverCount * bonus) - ((grid - 1) * bonus);

    private void ShowImage() => Snackbar.Add("Not implemented yet", Severity.Warning);

    private void ShowGraph() => Snackbar.Add("Not implemented yet", Severity.Warning);

    private void PersistStintResults()
    {

    }

    private void Finish()
    {

    }
}
