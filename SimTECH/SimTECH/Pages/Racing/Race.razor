@page "/race/{RaceId:long}"
@inject IncidentService _incidentService
@inject RaceService _raceService
@inject SeasonService _seasonService
@inject NavigationManager _nav
@inject IDialogService _dialogService
@inject ISnackbar _snackbar

<PageTitle>Race</PageTitle>

<MudContainer MaxWidth="MaxWidth.False">
    @if (!loading)
    {
        <MudTable Items="@Model.RaceDrivers.OrderBy(e => (int)e.Status).ThenBy(e => e.Position)" Dense="true" Class="extra-dense overflow-x-hide" id="race-display">
            <ToolBarContent>
                <MudStack Row="true" Spacing="3" AlignItems="AlignItems.Center" Class="mud-width-full">
                    <CountryFlag Code="@Model.Country" />
                    <MudText Typo="Typo.h6">@Model.Name - ROUND @Model.Round</MudText>
                    <MudIcon Icon="@Model.ClimateIcon" />

                    <MudSpacer />

                    <MudStack Spacing="0" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.subtitle2">Lap</MudText>
                        <MudChip Color="@lapIndicatorColor" Label="true" DisableRipple="true">
                            <MudText Typo="Typo.subtitle1">@(lapIndicator)</MudText>
                        </MudChip>
                    </MudStack>

                    <MudSpacer />

                    <MudStack Spacing="0" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.subtitle2">Advance laps:</MudText>
                        <MudChipSet SelectedChipChanged="ChangeCalculationPerAdvance" Mandatory="true">
                            <MudChip Value="1">@(NumberHelper.CalcLapCount(1 * calculationDistance, Model.TrackLength))</MudChip>
                            <MudChip Value="5" Default="true">@(NumberHelper.CalcLapCount(5 * calculationDistance, Model.TrackLength))</MudChip>
                            <MudChip Value="10">@(NumberHelper.CalcLapCount(10 * calculationDistance, Model.TrackLength))</MudChip>
                        </MudChipSet>
                    </MudStack>

                    <MudButtonGroup Color="Color.Primary">
                        @if (!Model.IsFinished)
                        {
                            @if (calculated >= calculationCount)
                            {
                                <MudButton OnClick="Finish">Finish</MudButton>
                            }
                            else
                            {

                                <MudButton Color="Color.Tertiary" OnClick="Advance">Advance</MudButton>
                            }
                        }
                        <ScreenshotButton TargetId="race-display" />
                    </MudButtonGroup>
                </MudStack>
            </ToolBarContent>
            <ColGroup>
                <col style="width: 15px" />
                <col style="width: 40px" />
                <col style="width: 5px" />
                <col style="width: 220px" />
                <col style="width: 30px" />
                <col style="width: 220px" />
                <col style="width: 30px" />
                <col style="width: 75px" />
                <col style="width: 50px" />
                <col style="width: 30px" />
                <col style="width: 50px" />
                <col style="width: 500px" />
            </ColGroup>
            <HeaderContent>
                <MudTh>#</MudTh>
                <MudTh>Grid</MudTh>
                <MudTh Class="pa-0"></MudTh>
                <MudTh>Name</MudTh>
                <MudTh Class="number-col">No</MudTh>
                <MudTh>Team</MudTh>
                <MudTh Class="number-col">PWR</MudTh>
                <MudTh>ATT/DEF</MudTh>
                <MudTh Class="tyre-col">TYRE</MudTh>
                <MudTh Class="number-col">Score</MudTh>
                <MudTh Class="number-col-lg">Status</MudTh>
                <MudTh>Progression</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudText Typo="Typo.h6" Style="@(ViewHelper.SetTextNumberStyle(context.Colour, context.Accent))">
                        @context.Position
                    </MudText>
                </MudTd>
                <MudTd>
                    <GridChange Change="@context.GridChange" />
                </MudTd>
                <MudTd Class="pa-0">
                    <span class="smol-accent" style="@(ViewHelper.SetBackgroundColour(context.Colour))"></span>
                </MudTd>
                <MudTd Class="overflow-hider">
                    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.body1">@context.FirstName</MudText>
                        <MudText Typo="Typo.button">@context.LastName</MudText>
                        @if (context.HasFastestLap)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Timer" Size="Size.Small" Style="color:mediumpurple" />
                        }
                        <MudSpacer />
                        <CountryFlag Code="@context.Nationality" Size="FlagSize.Small" />
                    </MudStack>
                </MudTd>
                <MudTd Class="number-col" Style="@(ViewHelper.SetFullColourstyle(context.Colour, context.Accent))">
                    <MudText Typo="Typo.caption">@context.Number</MudText>
                </MudTd>
                <MudTd Class="overflow-hider">
                    <MudText Typo="Typo.button">@context.TeamName</MudText>
                </MudTd>
                <MudTd Class="number-col">
                    <MudText Typo="Typo.caption">@context.Power</MudText>
                </MudTd>
                <MudTd>
                    <MudStack Row="true" Spacing="1" Justify="Justify.Center" AlignItems="AlignItems.Center" Class="pa-0 mud-width-full">
                        <MudIcon Icon="@IconCollection.Sword" Size="Size.Small" />
                        <MudText Typo="Typo.caption">@context.Attack</MudText>
                        <span class="py-2" style="background-color: antiquewhite;padding-left: 1px;padding-right: 1px;"></span>
                        <MudText Typo="Typo.caption">@context.Defense</MudText>
                        <MudIcon Icon="@IconCollection.ShieldChevron" Size="Size.Small" />
                    </MudStack>
                </MudTd>
                <MudTd Class="tyre-col">
                    <TyreElement Colour="@context.CurrentTyre.Colour">@context.TyreLife</TyreElement>
                    <BadgeWrapper Colours="@(context.Strategy.StrategyTyres.Select(e => e.Tyre.Colour).ToArray())" />
                </MudTd>
                <MudTd Class="number-col">
                    <MudText Typo="Typo.caption">@context.LapSum</MudText>
                </MudTd>
                <MudTd Class="number-col-lg">
                    @if (context.Incident == null)
                    {
                        <MudText Typo="Typo.caption">+@(Math.Round((highestScore - context.LapSum) * Model.GapMarge, 2))</MudText>
                    }
                    else
                    {
                        <MudBadge Icon="@IconCollection.HelmetOff" Color="Color.Primary" Overlap="true" Bordered="true" Class="ma-1">
                            <MudText Typo="Typo.button" Color="Color.Error">@context.Incident.Name</MudText>
                        </MudBadge>
                    }
                </MudTd>
                <MudTd>
                    <div class="relative" style="height:8px;width:100%">
                        @foreach (var lapEvent in context.LapScores)
                        {
                            @foreach (var raceEvent in lapEvent.ListOfDubiousEvents().Select((element, index) => new { index, element }))
                            {
                                <SignalIcon LapPercentage="@(NumberHelper.Percentage(lapEvent.Order, calculationCount))"
                                            Signal="@raceEvent.element.ToString()"
                                            Index="@raceEvent.index" />
                            }
                        }
                    </div>
                    @if (altProgress)
                    {
                        <SimProgressLinear Bars="@(context.LapScores.Select(e => ((NumberHelper.Percentage(1, calculationCount)), e.DetermineLapColour())).ToList())" />
                    }
                    else
                    {
                        <MudProgressLinear Value="@(NumberHelper.CalcLapCount(context.LastLapOrder * calculationDistance, Model.TrackLength))"
                                           Min="0"
                                           Max="@totalLaps"
                                           Size="Size.Medium"
                                           Color="@Color.Primary"
                                           Class="my-2" />
                    }
                </MudTd>
            </RowTemplate>
            <FooterContent>
                <MudTd colspan="20">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-0">
                        <MudText Typo="Typo.button">Legend</MudText>
                        <MudChip Icon="@IconCollection.HelmetOff" IconColor="Color.Error" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true">
                            DNF Driver
                        </MudChip>
                        <MudChip Icon="@IconCollection.CarCrash" IconColor="Color.Error" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true">
                            DNF Car
                        </MudChip>
                        <MudChip Icon="@IconCollection.EngineOff" IconColor="Color.Error" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true">
                            DNF Engine
                        </MudChip>
                        <MudChip Icon="@Icons.Material.Filled.ErrorOutline" IconColor="Color.Warning" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true">
                            Mistake
                        </MudChip>
                        <MudChip Icon="@Icons.Material.Filled.LocalGasStation" IconColor="Color.Success" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true">
                            Pitstop
                        </MudChip>
                        <MudChip Icon="@Icons.Material.Filled.SwapVert" IconColor="Color.Info" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true">
                            Driver Swap
                        </MudChip>
                        <MudChip Icon="@IconCollection.Skull" IconColor="Color.Inherit" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true" Style="color: white">
                            Fatality
                        </MudChip>
                        <MudChip Icon="@IconCollection.AlertTriangle" IconColor="Color.Warning" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true">
                            Caution (TEMP?)
                        </MudChip>
                        <MudChip Icon="@Icons.Material.Filled.QuestionMark" IconColor="Color.Warning" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true">
                            Undetermined
                        </MudChip>

                        <MudSpacer />

                        <MudButtonGroup Color="Color.Tertiary">
                            <MudButton OnClick="ToggleProgressBarType">AltLine</MudButton>
                            <MudButton OnClick="ShowGapperChart">GapChart</MudButton>
                            <MudButton OnClick="ShowPositionChart">PosChart</MudButton>
                        </MudButtonGroup>
                    </MudStack>
                </MudTd>
            </FooterContent>
        </MudTable>
    }
</MudContainer>

@code {
    [Parameter] public long RaceId { get; set; }

    public RaceModel Model { get; set; }

    List<Incident> driverIncidents;
    List<Incident> carIncidents;
    List<Incident> engineIncidents;
    List<Incident> disqualifyIncidents;
    List<Incident> lethalIncidents;

    bool loading = true;
    bool altProgress = false;
    string lapIndicator = "0/0";

    int fatalityOdds;
    int disqualifyChance;
    int safetyCarOdds;
    int fastestLap;
    int highestScore;
    int racedLaps;
    int totalLaps;
    int minLapRng;
    int maxLapRng;
    int pitMin;
    int pitMax;

    int calculated;
    int calculationCount;
    int calculationsPerAdvance = 5;
    int calculationDistance = 10;
    bool safetyCarOut = false;
    Color lapIndicatorColor = Color.Dark;
    Entrant cycleReliabilty = Entrant.Driver;

    protected override async Task OnInitializedAsync()
    {
        var allIncidents = await _incidentService.GetIncidents();

        Model = await _raceService.RetrieveRaceModel(RaceId);

        minLapRng = Model.Season.RngMinimum;
        maxLapRng = Model.Season.RngMaximum;
        pitMin = Model.Season.PitMinimum;
        pitMax = Model.Season.PitMaximum;

        driverIncidents = allIncidents.Where(e => e.Category == CategoryIncident.Driver).ToList();
        carIncidents = allIncidents.Where(e => e.Category == CategoryIncident.Car).ToList();
        engineIncidents = allIncidents.Where(e => e.Category == CategoryIncident.Engine).ToList();
        disqualifyIncidents = allIncidents.Where(e => e.Category == CategoryIncident.Disqualified).ToList();
        lethalIncidents = allIncidents.Where(e => e.Category == CategoryIncident.Lethal).ToList();

        fatalityOdds = Model.FatalityOdds;
        disqualifyChance = Model.DisqualifyOdds;
        safetyCarOdds = Model.SafetyCarOdds;
        calculated = Model.RaceDrivers.Select(e => e.LapScores.Count()).Max();
        calculationCount = Model.RaceLength / calculationDistance;

        racedLaps = NumberHelper.CalcLapCount(calculated * calculationDistance, Model.TrackLength);
        totalLaps = NumberHelper.CalcLapCount(Model.RaceLength, Model.TrackLength);
        lapIndicator = $"{racedLaps} / {totalLaps}";

        if (Model.IsFinished)
        {
            highestScore = Model.RaceDrivers.Max(e => e.LapSum);
            fastestLap = Model.RaceDrivers.SelectMany(e => e.LapScores).Max(e => e.Score);
        }

        loading = false;
    }

    void ChangeCalculationPerAdvance(MudChip? calcChip)
    {
        if (calcChip != null)
            calculationsPerAdvance = (int)calcChip.Value;
    }

    void ToggleProgressBarType() => altProgress = !altProgress;

    bool DidReliabilityFail(int reliability) => NumberHelper.RandomInt(1000) > reliability;

    void Advance()
    {
        // Use this variable to persist the lap scores which were generated in this advance
        var lapScoresToPersist = new List<LapScore>();

        // Every i in this instance is relative to 10km (or calculationDistance) of racing aka a calculation
        for (int i = 0; i < calculationsPerAdvance; i++)
        {
            ++calculated;
            long? newFastestLapScorer = null;

            // Logic for what happens during a SC goes here
            if (safetyCarOut)
            {
                var safetyCarGoesBackIn = HandleSafetyMoment(lapScoresToPersist);
                if (safetyCarGoesBackIn)
                {
                    // After handling a safety car round, it goes back in
                    lapIndicatorColor = Color.Dark;
                    safetyCarOut = false;
                }
            }
            // TODO: Not a fan of this >else
            else
            {
                foreach (var driver in Model.RaceDrivers.Where(e => e.Status == RaceStatus.Racing))
                {
                    driver.InstantOvertaken = false;

                    var lapScore = new LapScore { ResultId = driver.ResultId, Order = calculated };

                    // Determine if either driver, car or engine has failed
                    var safetyCarOccurrence = CheckReliability(driver, lapScore);

                    // Calculate the score for drivers which are still racing
                    if (driver.Status == RaceStatus.Racing)
                    {
                        var minRng = (minLapRng + driver.RngMinMod);
                        var maxRng = (maxLapRng + driver.RngMaxMod);

                        int lapValue = NumberHelper.RandomInt(minRng, maxRng);

                        // Adds the qualifying bonus in the first lap, should be thought about once more though in terms of what we do with this
                        if (calculated == 1)
                            lapValue += Model.QualifyingBonus(driver.Grid);

                        // Check if driver made a mistake, if so then it's going to cost him
                        for (int j = 0; j < Model.MistakeRolls; j++)
                        {
                            if (DidReliabilityFail(driver.DriverReliability))
                            {
                                lapValue -= NumberHelper.RandomInt(Model.MistakeMinCost, Model.MistakeMaxCost);
                                lapScore.RacerEvents |= RacerEvent.Mistake;
                                driver.InstantOvertaken = true;
                                break;
                            }
                        }

                        // Strategy
                        lapValue += HandleStrategy(driver, lapScore);

                        // Adds the overall power of the driver
                        lapValue += driver.Power;

                        if (lapValue > fastestLap)
                        {
                            fastestLap = lapValue;
                            newFastestLapScorer = driver.ResultId;
                        }

                        // Finally add the score to the lap results
                        lapScore.Score = lapValue;
                    }
                    else if (safetyCarOccurrence)
                    {
                        // all sort of calculations to do here in relation to the current driver who caused a SC
                        safetyCarOut = safetyCarOccurrence;
                    }

                    driver.LapScores.Add(lapScore);
                    lapScoresToPersist.Add(lapScore);
                }

                // Determine new positions (keep team role in mind here!)
                PostProcessAdvance(newFastestLapScorer);

                // TODO: handle something to deal with an active safety car which occurred in a previous advance
                if (safetyCarOut)
                {
                    lapIndicatorColor = Color.Warning;
                    // Stop iterating through all advances since SC occurrence
                    break;
                }
            }

            // Last brace before going to the next advance
            if (calculated >= calculationCount)
                break;
        }

        racedLaps = NumberHelper.CalcLapCount(calculated * calculationDistance, Model.TrackLength);
        lapIndicator = $"{racedLaps} / {totalLaps}";

        //StateHasChanged();

        // Persist the new stint results, yes after doing all whats needed to show them
        //PersistLapScores(lapScoresToPersist);
    }

    bool CheckReliability(RaceDriver driver, LapScore lapScore)
    {
        var safetyCar = false;

        if (cycleReliabilty == Entrant.Driver && DidReliabilityFail(driver.DriverReliability))
        {
            lapScore.RacerEvents |= RacerEvent.DriverDnf;
            driver.Incident = driverIncidents.TakeRandomIncident();
        }
        else if (cycleReliabilty == Entrant.Team && DidReliabilityFail(driver.CarReliability))
        {
            lapScore.RacerEvents |= RacerEvent.CarDnf;
            driver.Incident = carIncidents.TakeRandomIncident();
        }
        else if (cycleReliabilty == Entrant.Engine && DidReliabilityFail(driver.EngineReliability))
        {
            lapScore.RacerEvents |= RacerEvent.EngineDnf;
            driver.Incident = engineIncidents.TakeRandomIncident();
        }
        else { return safetyCar; }

        // Driver had a reliability failure, meaning he will immediatly be overtaken by any attacking driver
        driver.InstantOvertaken = true;

        // If enabled, then we're also going to check if anyone experienced a fatal crash
        if (Model.LeagueOptions.HasFlag(LeagueOptions.EnableFatality) && (NumberHelper.RandomInt(fatalityOdds) == 0))
        {
            safetyCar = true;
            driver.Status = RaceStatus.Fatal;
            driver.Incident = lethalIncidents.TakeRandomIncident();
            lapScore.RacerEvents = RacerEvent.Death;
            return safetyCar;
        }

        // Randomly determines the odds a safety car occured due to the DNF'ing driver
        safetyCar = NumberHelper.RandomInt(Model.SafetyCarOdds) == 0;
        driver.Status = RaceStatus.Dnf;

        return safetyCar;
    }

    // Returns a number which will be added to the users lap score
    int HandleStrategy(RaceDriver driver, LapScore lapScore)
    {
        int valueScoreResult = driver.TyreLife;

        var tyreMinWear = driver.CurrentTyre.WearMin + driver.WearMinMod;
        var tyreMaxWear = driver.CurrentTyre.WearMax + driver.WearMaxMod;

        if (tyreMinWear < 0 || tyreMaxWear < 0)
            _snackbar.Add("ayo, wear should not be below 0");
        // Ensures maximum wear is always at least one less than the minimum wear
        if (tyreMinWear > tyreMaxWear)
        {
            tyreMaxWear = tyreMinWear + 1;
            _snackbar.Add("A situation occurred where the maximum wear was lower than the minimum wear, please reconsider some set tyre wear values!");
        }

        // Maximum wear is more than the tyre can handle, it's time for a pitstop!
        if (tyreMaxWear > driver.TyreLife)
        {
            var nextOrder = ++driver.CurrentTyreOrder;
            var nextTyre = driver.Strategy.StrategyTyres.FirstOrDefault(e => e.Order == nextOrder);

            // If there is another tyre left in the strategy then we're installing it
            if (nextTyre != null)
            {
                driver.CurrentTyre = nextTyre.Tyre;
                driver.CurrentTyreOrder = nextOrder;
                driver.TyreLife = nextTyre.Tyre.Pace;
                driver.InstantOvertaken = true;

                lapScore.RacerEvents |= RacerEvent.Pitstop;

                valueScoreResult = driver.TyreLife;
                valueScoreResult -= NumberHelper.RandomInt(pitMin, pitMax);
            }
        }

        // Adds wear to the tyre
        driver.TyreLife -= NumberHelper.RandomInt(tyreMinWear, tyreMaxWear);

        return valueScoreResult;
    }

    // returns bool which indicates whether a safety car has been caused by a DNF-result
    bool HandleSafetyMoment(List<LapScore> lapScoresToPersist)
    {
        int scoreAboveDriver = 0;
        foreach (var driver in Model.RaceDrivers.Where(e => e.Status == RaceStatus.Racing).OrderBy(e => e.Position))
        {
            driver.InstantOvertaken = false;

            var lapScore = new LapScore { ResultId = driver.ResultId, Order = calculated };

            var scoreGap = scoreAboveDriver - driver.LapSum;

            if (scoreGap > 100)
            {
                var closingGap = scoreGap / 2;
                lapScore.Score += closingGap;
            }

            lapScore.RacerEvents |= RacerEvent.Caution;
            driver.LapScores.Add(lapScore);
            lapScoresToPersist.Add(lapScore);
        }

        return NumberHelper.RandomInt(safetyCarOdds) == 0;
    }

    void PostProcessAdvance(long? newFastestLapHolder)
    {
        DeterminePositions();

        highestScore = Model.RaceDrivers.Max(e => e.LapSum);

        if (newFastestLapHolder != null)
        {
            foreach (var driver in Model.RaceDrivers)
            {
                driver.HasFastestLap = false;
                if (driver.ResultId == newFastestLapHolder)
                    driver.HasFastestLap = true;
            }
        }

        // Cycle reliability checking
        switch (cycleReliabilty)
        {
            case Entrant.Driver:
                cycleReliabilty = Entrant.Team;
                break;
            case Entrant.Team:
                cycleReliabilty = Entrant.Engine;
                break;
            case Entrant.Engine:
                cycleReliabilty = Entrant.Driver;
                break;
        }
    }

    void DeterminePositions()
    {
        var racingDrivers = Model.RaceDrivers.OrderBy(e => (int)e.Status).ThenByDescending(e => e.LapSum).ToList();

        int positionIndex = 0;
        foreach (var driver in racingDrivers)
        {
            var lastScore = driver.LapScores.Last();

            int gainedPositions = driver.Position - ++positionIndex;

            while (gainedPositions > 0)
            {
                var abovePosition = driver.Position - 1;
                if (abovePosition == 0)
                    break;

                var aboveDriver = racingDrivers.First(e => e.Position == abovePosition);

                // Driver above is teammate AND support driver AND attacker is main driver, swap time!
                if (aboveDriver.SeasonTeamId == driver.SeasonTeamId && driver.Role == TeamRole.Main && aboveDriver.Role == TeamRole.Support)
                {
                    lastScore.RacerEvents |= RacerEvent.Swap;
                    aboveDriver.LapScores.Last().RacerEvents |= RacerEvent.Swap;
                }
                else if (!aboveDriver.InstantOvertaken)
                {
                    // Subtract attack value from defense, what's left is how much the attacker is hindered
                    var defendingResult = aboveDriver.Defense + NumberHelper.RandomInt(Model.BattleRng);
                    var attackingResult = driver.Attack + NumberHelper.RandomInt(Model.BattleRng);
                    var battleCost = defendingResult - attackingResult;

                    if (battleCost > 0)
                        lastScore.Score -= battleCost;

                    if (aboveDriver.LapSum > driver.LapSum)
                    {
                        // Overtake failed
                        break;
                    }
                }

                // Overtake succeeded, driver gains a position!
                (driver.Position, aboveDriver.Position) = (aboveDriver.Position, driver.Position);

                gainedPositions--;
            }
        }
    }

    void PreProcessFinish()
    {
        bool anyoneDisqualified = false;

        foreach (var driver in Model.RaceDrivers.Where(e => e.Status == RaceStatus.Racing))
        {
            if (NumberHelper.RandomInt(disqualifyChance) == 0)
            {
                driver.Incident = disqualifyIncidents.TakeRandomIncident();
                driver.Status = RaceStatus.Dsq;

                anyoneDisqualified = true;
            }
        }

        if (anyoneDisqualified)
        {
            var racingDrivers = Model.RaceDrivers.OrderBy(e => (int)e.Status).ThenByDescending(e => e.LapSum).ToList();
            int positionIndex = 0;
            foreach (var driver in racingDrivers)
                driver.Position = ++positionIndex;
        }
    }

    async Task Finish()
    {
        PreProcessFinish();

        var allotments = Model.Season.PointAllotments?.ToDictionary(e => e.Position, e => e.Points) ?? new();
        var finishedRace = Model.ToFinishedRace();
        var finishedResults = Model.RaceDrivers.Select(e => e.ToResult(RaceId)).ToList();
        var scoredPoints = Model.RaceDrivers
            .Select(e => e.ToScoredPoints(allotments, Model.Season.PointsPole, Model.Season.PointsFastestLap))
            .ToList();

        // Should be removed when it is done per advance
        var allLapScores = Model.RaceDrivers.SelectMany(e => e.LapScores).Where(e => e.Id == 0).ToList();

        await _raceService.PersistLapScores(allLapScores);
        await _raceService.FinishRace(finishedRace, finishedResults, scoredPoints);

        if (Model.LeagueOptions.HasFlag(LeagueOptions.EnablePenalty))
        {
            await _seasonService.CheckPenalties(finishedResults);
        }

        _nav.NavigateTo($"/postrace/{RaceId}");
    }

    async Task ShowGapperChart()
    {
        var parameters = new DialogParameters { ["Drivers"] = Model.RaceDrivers };
        _ = await _dialogService.ShowAsync<GapChartDialog>("Gapper chart", parameters, Constants.DefaultChartDialogSettings);
    }

    async Task ShowPositionChart()
    {
        var parameters = new DialogParameters { ["Drivers"] = Model.RaceDrivers };
        _ = await _dialogService.ShowAsync<PositionChangeChart>("Position chart", parameters, Constants.DefaultChartDialogSettings);
    }
}
