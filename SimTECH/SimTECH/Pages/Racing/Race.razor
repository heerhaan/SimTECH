@page "/race/{RaceId:long}"

@inject RaceService _raceService
@inject NavigationManager Nav

@if (!loading)
{
    <MudTable Items="@Model.RaceDrivers">
        <ToolBarContent>
            <MudText>
                <CountryFlag Code="@Model.Country" />
                @Model.Name - RACE @Model.Round
            </MudText>
            <MudText>@Model.Weather</MudText>
            <MudSpacer />
            @if (currentStint == Model.AmountRuns)
            {
                <MudButton Variant="Variant.Outlined" OnClick="Finish">Finish</MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Outlined" OnClick="Advance">Advance</MudButton>
            }
        </ToolBarContent>
        <HeaderContent>
            <MudTh>#</MudTh>
            <MudTh>Grid</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>No</MudTh>
            <MudTh>Team</MudTh>
            <MudTh>PWR</MudTh>
            <MudTh>TYRE</MudTh>
            @foreach (var stint in Model.Stints.OrderBy(e => e.Order))
            {
                <MudTh>@stint.Order</MudTh>
            }
            <MudTh>Score</MudTh>
            <MudTh>Status</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Position</MudTd>
            <MudTd>@context.Grid</MudTd>
            <MudTd>
                <CountryFlag Code="context.Nationality" Size="FlagSize.Small" />
                @context.FullName
            </MudTd>
            <MudTd>@context.Number</MudTd>
            <MudTd>@context.TeamName</MudTd>
            <MudTd>@context.Power</MudTd>
            <MudTd>@context.TyreLife</MudTd>
            @foreach (var stint in Model.Stints.OrderBy(e => e.Order))
            {
                var driverStint = context.RaceStints.Find(e => e.Order == stint.Order);
                if (driverStint != null)
                {
                    <MudTd>@driverStint.Score</MudTd>
                }
                else
                {
                    <MudTd>-</MudTd>
                }
            }
            <MudTd>@context.Position</MudTd>
            <MudTd>
                @if (context.Status != RaceStatus.Racing)
                {
                    <MudText>@context.Status</MudText>
                }
                else
                {
                    <MudText>@context.DisplayGap</MudText>
                }
            </MudTd>
        </RowTemplate>
        <FooterContent>
            <MudTFootRow>
                <MudTd colspan="20">

                </MudTd>
            </MudTFootRow>
        </FooterContent>
    </MudTable>
}

@code {
    [Parameter] public long RaceId { get; set; }

    public RaceModel Model { get; set; }

    private bool loading = true;
    private int currentStint = 0;

    protected override async Task OnInitializedAsync()
    {
        Model = await _raceService.RetrieveRaceModel(RaceId);

        if (Model.RaceDrivers.First().RaceStints.Any())
            currentStint = DetermineCurrentStint();

        loading = false;
    }

    private void Advance()
    {
        // Determine which stint it currently is
        var raceStint = Model.Stints.Find(e => e.Order == (++currentStint));

        // Determine the values which impact the race like: weather and it's multipliers
        // Remember that track traits are already calculated in the traiteffect

        // Iterate through all still running drivers
        foreach (var driver in Model.RaceDrivers.Where(e => e.Status == RaceStatus.Racing))
        {
            // Add a new stint result object which complements their order, read from racestint for this

            // Check reliability

            // Calculate stintscore
            // Mistake
            // Strategy
            // ApplyDriver
            // ApplyTeam
            // ApplyEngine
            // Determine new positions (keep team role in mind here!)
        }

        // If the result isn't automatically added, consider using StateHasChanged()

        // Persist the new stint results, yes after doing all whats needed to show them
    }

    private void PersistStintResults()
    {
        
    }

    private void Finish()
    {

    }

    private int DetermineCurrentStint()
    {
        return Model.RaceDrivers.SelectMany(e => e.RaceStints).Max(e => e.Order);
    }

    private static int GetQualifyingBonus(int grid, int driverCount, int bonus) => (driverCount * bonus) - ((grid - 1) * bonus);
}
