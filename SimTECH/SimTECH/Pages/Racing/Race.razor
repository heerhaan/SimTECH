@page "/race/{RaceId:long}"
@inject IncidentService _incidentService
@inject RaceService _raceService
@inject SeasonService _seasonService
@inject NavigationManager _nav
@inject IDialogService _dialogService
@inject ISnackbar _snackbar

<PageTitle>Race</PageTitle>

<MudContainer MaxWidth="MaxWidth.False">
    @if (!loading)
    {
        <MudTable Items="@Model.RaceDrivers.OrderBy(e => (int)e.Status).ThenBy(e => e.Position)" Dense="true" id="race-display">
            <ToolBarContent>
                <MudStack Row="true" Spacing="4" AlignItems="AlignItems.Center" Class="mud-width-full">
                    <CountryFlag Code="@Model.Country" />
                    <MudText Typo="Typo.h6">@Model.Name - ROUND @Model.Round</MudText>
                    <MudIcon Icon="@Model.ClimateIcon" />

                    <MudSpacer />

                    <MudStack Spacing="0" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.subtitle2">Lap</MudText>
                        <MudChip Color="Color.Dark" DisableRipple="true" Label="true">
                            <MudText Typo="Typo.subtitle1">@(racedLaps) / @(totalLaps)</MudText>
                        </MudChip>
                    </MudStack>

                    <MudSpacer />

                    <MudStack Spacing="0" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.subtitle2">Advance laps:</MudText>
                        <MudChipSet SelectedChipChanged="ChangeCalculationPerAdvance" Mandatory="true">
                            <MudChip Value="1">@NumberHelper.CalcLapCount(1 * 10, Model.TrackLength)</MudChip>
                            <MudChip Value="5" Default="true">@NumberHelper.CalcLapCount(5 * 10, Model.TrackLength)</MudChip>
                            <MudChip Value="10">@NumberHelper.CalcLapCount(10 * 10, Model.TrackLength)</MudChip>
                        </MudChipSet>
                    </MudStack>

                    <MudButtonGroup Color="Color.Primary">
                        @if (!Model.IsFinished)
                        {
                            @if (calculated >= calculationCount)
                            {
                                <MudButton OnClick="Finish">Finish</MudButton>
                            }
                            else
                            {

                                <MudButton Color="Color.Tertiary" OnClick="Advance">Advance</MudButton>
                            }
                        }
                        <ScreenshotButton TargetId="race-display" />
                        <MudButton OnClick="ShowGraph">Chart</MudButton>
                    </MudButtonGroup>
                </MudStack>
            </ToolBarContent>
            <ColGroup>
                <col style="width: 15px" />
                <col style="width: 40px" />
                <col style="width: 5px" />
                <col style="width: 220px" />
                <col style="width: 30px" />
                <col style="width: 220px" />
                <col style="width: 30px" />
                <col style="width: 75px" />
                <col style="width: 50px" />
                <col style="width: 30px" />
                <col style="width: 50px" />
                <col style="width: 500px" />
            </ColGroup>
            <HeaderContent>
                <MudTh>#</MudTh>
                <MudTh>Grid</MudTh>
                <MudTh Class="pa-0"></MudTh>
                <MudTh>Name</MudTh>
                <MudTh Class="number-col">No</MudTh>
                <MudTh>Team</MudTh>
                <MudTh Class="number-col">PWR</MudTh>
                <MudTh>ATT/DEF</MudTh>
                <MudTh Class="number-col-lg">TYRE</MudTh>
                <MudTh Class="number-col">Score</MudTh>
                <MudTh Class="number-col-lg">Status</MudTh>
                <MudTh>Progression</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudText Typo="Typo.h6" Style="@(ViewHelper.SetTextNumberStyle(context.Colour, context.Accent))">@context.Position</MudText>
                </MudTd>
                <MudTd>
                    <GridChange Change="@context.GridChange" />
                </MudTd>
                <MudTd Class="pa-0">
                    <span class="smol-accent" style="@(ViewHelper.SetBackgroundColour(context.Colour))"></span>
                </MudTd>
                <MudTd Class="overflow-hider">
                    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.body1">@context.FirstName</MudText>
                        <MudText Typo="Typo.button">@context.LastName</MudText>
                        @if (context.HasFastestLap)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Timer" Size="Size.Small" Style="color:mediumpurple" />
                        }
                        <MudSpacer />
                        <CountryFlag Code="@context.Nationality" Size="FlagSize.Small" />
                    </MudStack>
                </MudTd>
                <MudTd Class="number-col" Style="@(ViewHelper.SetFullColourstyle(context.Colour, context.Accent))">
                    <MudText Typo="Typo.caption">@context.Number</MudText>
                </MudTd>
                <MudTd Class="overflow-hider">
                    <MudText Typo="Typo.button">@context.TeamName</MudText>
                </MudTd>
                <MudTd Class="number-col">
                    <MudText Typo="Typo.caption">@context.Power</MudText>
                </MudTd>
                <MudTd>
                    <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center" Class="mud-width-full">
                        <MudIcon Icon="@IconCollection.Sword" Size="Size.Small" />
                        <MudText Typo="Typo.caption">@context.Attack</MudText>
                        <MudDivider Vertical="true" />
                        <MudText Typo="Typo.caption">@context.ModifiedDefense(Model.DefenseMod)</MudText>
                        <MudIcon Icon="@IconCollection.ShieldChevron" Size="Size.Small" />
                    </MudStack>
                </MudTd>
                <MudTd Class="number-col-lg">
                    <TyreElement Colour="@context.CurrentTyre.Colour">@context.TyreLife</TyreElement>
                </MudTd>
                <MudTd Class="number-col">
                    <MudText Typo="Typo.caption">@context.LapSum</MudText>
                </MudTd>
                <MudTd Class="number-col-lg">
                    @if (context.Incident == null)
                    {
                        <MudText>+@(Math.Round((highestScore - context.LapSum) * Model.GapMarge, 2))</MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.button" Color="Color.Error">@context.Incident.Name</MudText>
                    }
                </MudTd>
                <MudTd>
                    <div class="relative" style="height:8px;width:100%">
                        @foreach (var lapEvent in context.LapScores)
                        {
                            @foreach (var raceEvent in lapEvent.ListOfDubiousEvents().Select((element, index) => new { index, element }))
                            {
                                <SignalIcon LapPercentage="@(NumberHelper.Percentage(lapEvent.Order, calculationCount))"
                                            Signal="@raceEvent.element.ToString()"
                                            Index="@raceEvent.index" />
                            }
                        }
                    </div>
                    <MudProgressLinear Value="@(NumberHelper.CalcLapCount(context.LastLapOrder * 10, Model.TrackLength))"
                                   Min="0"
                                   Max="@totalLaps"
                                   Size="Size.Medium"
                                   Color="@Color.Primary"
                                   Class="my-2" />
                </MudTd>
            </RowTemplate>
            <FooterContent>
                <MudTd colspan="20">
                    <MudStack Row="true">
                        <MudText>Event legend</MudText>
                        <MudChip Icon="@IconCollection.HelmetOff" IconColor="Color.Error" Size="Size.Small" DisableRipple="true" Label="true">
                            DNF Driver
                        </MudChip>
                        <MudChip Icon="@IconCollection.CarCrash" IconColor="Color.Error" Size="Size.Small" DisableRipple="true" Label="true">
                            DNF Car
                        </MudChip>
                        <MudChip Icon="@IconCollection.EngineOff" IconColor="Color.Error" Size="Size.Small" DisableRipple="true" Label="true">
                            DNF Engine
                        </MudChip>
                        <MudChip Icon="@Icons.Material.Filled.ErrorOutline" IconColor="Color.Warning" Size="Size.Small" DisableRipple="true" Label="true">
                            Mistake
                        </MudChip>
                        <MudChip Icon="@Icons.Material.Filled.LocalGasStation" IconColor="Color.Success" Size="Size.Small" DisableRipple="true" Label="true">
                            Pitstop
                        </MudChip>
                        <MudChip Icon="@Icons.Material.Filled.SwapVert" IconColor="Color.Info" Size="Size.Small" DisableRipple="true" Label="true">
                            Driver Swap
                        </MudChip>
                        <MudChip Icon="@IconCollection.Skull" IconColor="Color.Inherit" Size="Size.Small" DisableRipple="true" Label="true" Style="color: white">
                            Fatality
                        </MudChip>
                        <MudChip Icon="@Icons.Material.Filled.QuestionMark" IconColor="Color.Warning" Size="Size.Small" DisableRipple="true" Label="true">
                            Undetermined
                        </MudChip>
                    </MudStack>
                </MudTd>
            </FooterContent>
        </MudTable>
    }
</MudContainer>

@code {
    [Parameter] public long RaceId { get; set; }

    public RaceModel Model { get; set; }

    Dictionary<int, int> allotments;
    List<Incident> driverIncidents;
    List<Incident> carIncidents;
    List<Incident> engineIncidents;
    List<Incident> disqualifyIncidents;
    List<Incident> lethalIncidents;

    bool loading = true;

    int fatalityOdds;
    int disqualifyChance;
    int participatingDrivers;
    int fastestLap;
    int highestScore;
    int racedLaps;
    int totalLaps;
    int minLapRng;
    int maxLapRng;
    int pitMin;
    int pitMax;

    int calculated;
    int calculationCount;
    int calculationsPerAdvance = 5;
    int calculationDistance = 10;//Not implemented yet but this could be used to refer to how much kilometers distance a calculation offers
    bool safetyCarOut = false;
    Entrant cycleReliabilty = Entrant.Driver;

    protected override async Task OnInitializedAsync()
    {
        var allIncidents = await _incidentService.GetIncidents();

        Model = await _raceService.RetrieveRaceModel(RaceId);

        allotments = Model.Season.PointAllotments?.ToDictionary(e => e.Position, e => e.Points) ?? new();
        minLapRng = Model.Season.RngMinimum;
        maxLapRng = Model.Season.RngMaximum;
        pitMin = Model.Season.PitMinimum;
        pitMax = Model.Season.PitMaximum;

        driverIncidents = allIncidents.Where(e => e.Category == CategoryIncident.Driver).ToList();
        carIncidents = allIncidents.Where(e => e.Category == CategoryIncident.Car).ToList();
        engineIncidents = allIncidents.Where(e => e.Category == CategoryIncident.Engine).ToList();
        disqualifyIncidents = allIncidents.Where(e => e.Category == CategoryIncident.Disqualified).ToList();
        lethalIncidents = allIncidents.Where(e => e.Category == CategoryIncident.Lethal).ToList();

        fatalityOdds = Model.FatalityOdds;
        disqualifyChance = Model.DisqualifyOdds;
        participatingDrivers = Model.RaceDrivers.Count;
        calculated = Model.RaceDrivers.Select(e => e.LapScores.Count()).Max();
        calculationCount = Model.RaceLength / 10;

        racedLaps = NumberHelper.CalcLapCount(calculated * 10, Model.TrackLength);
        totalLaps = NumberHelper.CalcLapCount(Model.RaceLength, Model.TrackLength);

        if (Model.IsFinished)
        {
            highestScore = Model.RaceDrivers.Max(e => e.LapSum);
            fastestLap = Model.RaceDrivers.SelectMany(e => e.LapScores).Max(e => e.Score);
        }

        loading = false;
    }

    void ChangeCalculationPerAdvance(MudChip? calcChip)
    {
        if (calcChip != null)
            calculationsPerAdvance = (int)calcChip.Value;
    }

    void Advance()
    {
        // Use this variable to persist the lap scores which were generated in this advance
        var lapScoresToPersist = new List<LapScore>();

        // Every i in this instance is relative to 10km of racing aka a calculation
        for (int i = 0; i < calculationsPerAdvance; i++)
        {
            ++calculated;
            long? newFastestLapScorer = null;

            if (safetyCarOut)
            {
                // TODO: handle something to deal with an active safety car
            }

            // Iterate through all still running drivers
            foreach (var driver in Model.RaceDrivers.Where(e => e.Status == RaceStatus.Racing))
            {
                driver.InstantOvertaken = false;

                var lapScore = new LapScore { ResultId = driver.ResultId, Order = calculated };

                // Determine if either driver, car or engine has failed
                safetyCarOut = CheckReliability(driver, lapScore);

                // Calculate the score for drivers which are still racing
                if (driver.Status == RaceStatus.Racing)
                {
                    var minRng = (minLapRng + driver.RngMinMod);
                    var maxRng = (maxLapRng + driver.RngMaxMod);

                    int lapValue = NumberHelper.RandomInt(minRng, maxRng);

                    // Adds the qualifying bonus in the first lap, should be thought about once more though in terms of what we do with this
                    if (calculated == 0)
                        lapValue += Model.QualifyingBonus(driver.Grid);

                    // Check if driver made a mistake, if so then it's going to cost him
                    for (int j = 0; j < Model.MistakeRolls; j++)
                    {
                        if (DidReliabilityFail(driver.DriverReliability))
                        {
                            lapValue += NumberHelper.RandomInt(Model.MistakeMinCost, Model.MistakeMaxCost);
                            lapScore.RacerEvents |= RacerEvent.Mistake;
                            driver.InstantOvertaken = true;
                            break;
                        }
                    }

                    // Strategy
                    lapValue += HandleStrategy(driver, lapScore);

                    // Adds the overall power of the driver
                    lapValue += driver.Power;

                    if (lapValue > fastestLap)
                    {
                        fastestLap = lapValue;
                        newFastestLapScorer = driver.ResultId;
                    }

                    // Finally add the score to the lap results
                    lapScore.Score = lapValue;
                }
                else if (safetyCarOut)
                {

                }

                driver.LapScores.Add(lapScore);//comment out when implementing att/def.. maybe!
                driver.LastScore = lapScore;
                lapScoresToPersist.Add(lapScore);
            }

            // Determine new positions (keep team role in mind here!)
            PostProcessAdvance(newFastestLapScorer);

            // Last brace before going to the next advance
            if (calculated >= calculationCount)
                break;
        }

        racedLaps = NumberHelper.CalcLapCount(calculated * 10, Model.TrackLength);

        StateHasChanged();

        // Persist the new stint results, yes after doing all whats needed to show them
        //PersistLapScores(lapScoresToPersist);
    }

    bool CheckReliability(RaceDriver driver, LapScore lapScore)
    {
        var safetyCar = false;

        if (cycleReliabilty == Entrant.Driver && DidReliabilityFail(driver.DriverReliability))
        {
            lapScore.RacerEvents = RacerEvent.DriverDnf;
            driver.Incident = driverIncidents.TakeRandomIncident();
            driver.Status = RaceStatus.Dnf;
        }
        else if (cycleReliabilty == Entrant.Team && DidReliabilityFail(driver.CarReliability))
        {
            lapScore.RacerEvents = RacerEvent.CarDnf;
            driver.Incident = carIncidents.TakeRandomIncident();
            driver.Status = RaceStatus.Dnf;
        }
        else if (cycleReliabilty == Entrant.Engine && DidReliabilityFail(driver.EngineReliability))
        {
            lapScore.RacerEvents = RacerEvent.EngineDnf;
            driver.Incident = engineIncidents.TakeRandomIncident();
            driver.Status = RaceStatus.Dnf;
        }
        else { return safetyCar; }

        driver.InstantOvertaken = true;

        // If enabled, then we're also going to check if anyone experienced a fatal crash
        if (Model.LeagueOptions.HasFlag(LeagueOptions.EnableFatality) && (NumberHelper.RandomInt(fatalityOdds) == 0))
        {
            driver.Status = RaceStatus.Fatal;
            driver.Incident = lethalIncidents.TakeRandomIncident();
            lapScore.RacerEvents = RacerEvent.Death;
            safetyCar = true;
            return safetyCar;
        }

        // TODO: Randomly determine SC-chance
        return NumberHelper.RandomInt(10) == 0;
    }

    bool DidReliabilityFail(int reliability) => NumberHelper.RandomInt(1000) > reliability;

    int HandleStrategy(RaceDriver driver, LapScore lapScore)
    {
        int valueScoreResult = driver.TyreLife;

        var tyreMaxWear = driver.CurrentTyre.WearMax + driver.WearMaxMod;
        var tyreMinWear = driver.CurrentTyre.WearMin + driver.WearMinMod;

        // Ensures maximum wear is always at least one less than the minimum wear
        if (tyreMinWear <= tyreMaxWear)
        {
            tyreMaxWear = tyreMinWear - 1;
            _snackbar.Add("A situation occurred where the maximum wear was higher than the minimum wear, please reconsider some set tyre wear values!");
        }

        // Maximum wear is more than the tyre can handle, it's time for a pitstop!
        if (Math.Abs(tyreMaxWear) > driver.TyreLife)
        {
            var nextOrder = driver.CurrentTyreOrder + 1;
            var nextTyre = driver.Strategy.StrategyTyres.FirstOrDefault(e => e.Order == nextOrder);

            // If there is another tyre left in the strategy then we're installing it
            if (nextTyre != null)
            {
                driver.CurrentTyre = nextTyre.Tyre;
                driver.CurrentTyreOrder = nextOrder;
                driver.TyreLife = nextTyre.Tyre.Pace;
                driver.InstantOvertaken = true;

                lapScore.RacerEvents |= RacerEvent.Pitstop;

                valueScoreResult = driver.TyreLife;
                valueScoreResult += NumberHelper.RandomInt(pitMin, pitMax);
            }
        }

        // Add wear to the tyre
        driver.TyreLife += NumberHelper.RandomInt(tyreMaxWear, tyreMinWear);

        return valueScoreResult;
    }

    void PostProcessAdvance(long? newFastestLapHolder)
    {
        DeterminePositions();

        highestScore = Model.RaceDrivers.Max(e => e.LapSum);

        if (newFastestLapHolder != null)
        {
            foreach (var driver in Model.RaceDrivers)
            {
                driver.HasFastestLap = false;
                if (driver.ResultId == newFastestLapHolder)
                    driver.HasFastestLap = true;
            }
        }

        // Cycle reliability checking
        switch (cycleReliabilty)
        {
            case Entrant.Driver:
                cycleReliabilty = Entrant.Team;
                break;
            case Entrant.Team:
                cycleReliabilty = Entrant.Engine;
                break;
            case Entrant.Engine:
                cycleReliabilty = Entrant.Driver;
                break;
        }
    }

    void DeterminePositions()
    {
        var racingDrivers = Model.RaceDrivers.OrderBy(e => (int)e.Status).ThenByDescending(e => e.LapSum).ToList();

        int positionIndex = 0;
        foreach (var driver in racingDrivers)
        {
            var lastScore = driver.LapScores.Last();

            int gainedPositions = driver.Position - ++positionIndex;

            while (gainedPositions > 0)
            {
                var abovePosition = driver.Position - 1;
                if (abovePosition == 0)
                    break;

                var aboveDriver = racingDrivers.First(e => e.Position == abovePosition);

                if (!aboveDriver.InstantOvertaken)
                {
                    // Should actually be: defense of above driver and attack of attacking driver
                    var battleCost = aboveDriver.ModifiedDefense(Model.DefenseMod) - driver.Attack;
                    if (battleCost > 0)
                        lastScore.Score -= battleCost;

                    // check quickly here if lapsum is the same as lapsumwithlast
                    if (aboveDriver.LapSum > driver.LapSum)
                    {
                        // Overtake failed
                        break;
                    }
                }

                // Overtake succeeded, driver gains a position!
                (driver.Position, aboveDriver.Position) = (aboveDriver.Position, driver.Position);

                gainedPositions--;
            }
        }
    }

    void PreProcessFinish()
    {
        bool anyoneDisqualified = false;

        foreach (var driver in Model.RaceDrivers.Where(e => e.Status == RaceStatus.Racing))
        {
            if (NumberHelper.RandomInt(disqualifyChance) == 0)
            {
                driver.Incident = disqualifyIncidents.TakeRandomIncident();
                driver.Status = RaceStatus.Dsq;

                anyoneDisqualified = true;
            }
        }

        if (anyoneDisqualified)
            PostProcessAdvance(null);
    }

    async Task PersistLapScores(List<LapScore> lapScores) => await _raceService.PersistLapScores(lapScores);

    async Task Finish()
    {
        PreProcessFinish();

        var finishedRace = Model.ToFinishedRace();
        var finishedResults = Model.RaceDrivers.Select(e => e.ToResult(RaceId)).ToList();
        var scoredPoints = Model.RaceDrivers
            .Select(e => e.ToScoredPoints(allotments, Model.Season.PointsPole, Model.Season.PointsFastestLap))
            .ToList();

        // Should be removed when it is done per advance
        var allLapScores = Model.RaceDrivers.SelectMany(e => e.LapScores).Where(e => e.Id == 0).ToList();
        await PersistLapScores(allLapScores);

        // TODO: check if this doesnt mess with the lapscores if those are persisted per advance
        await _raceService.FinishRace(finishedRace, finishedResults, scoredPoints);

        if (Model.LeagueOptions.HasFlag(LeagueOptions.EnablePenalty))
        {
            var nextRound = Model.Round + 1;
            await _seasonService.CheckPenalties(finishedResults, nextRound);
        }

        _nav.NavigateTo($"/postrace/{RaceId}");
    }

    async Task ShowGraph()
    {
        var parameters = new DialogParameters { ["Drivers"] = Model.RaceDrivers };

        _ = await _dialogService.ShowAsync<GapChartDialog>("Gapper chart", parameters, Constants.DefaultChartDialogSettings);
    }
}
