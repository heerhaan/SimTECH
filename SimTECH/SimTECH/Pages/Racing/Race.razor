@page "/race/{RaceId:long}"

@inject RaceService RaceService
@inject NavigationManager Nav
@inject ISnackbar Snackbar

@if (!loading)
{
    <MudTable Items="@Model.RaceDrivers.OrderBy(e => (int)e.Status).ThenBy(e => e.Position)" Dense="true" Style="width: 1600px">
        <ToolBarContent>
            <MudText>
                <CountryFlag Code="@Model.Country" />
                @Model.Name - ROUND @Model.Round
            </MudText>
            <MudText>weather: @Model.Weather</MudText>
            <MudText>Laps: @(racedLaps) / @(totalLaps)</MudText>
            <MudSpacer />
            @if (calculated >= calculationCount)
            {
                <MudButton Variant="Variant.Outlined" OnClick="Finish">Finish</MudButton>
            }
            else
            {
                @* The following seems a bit too clumsy  to implement, so it isn't implemented
                    <MudNumericField T="int" @bind-Value="calculationsPerAdvance" Label="Laps to advance x10" Class="field-md" />
                *@
                <MudButton Color="Color.Tertiary" Variant="Variant.Outlined" OnClick="Advance">Advance</MudButton>
            }
        </ToolBarContent>
        <ColGroup>
            <col style="width: 15px" />
            <col style="width: 40px" />
            <col style="width: 220px" />
            <col style="width: 30px" />
            <col style="width: 220px" />
            <col style="width: 30px" />
            <col style="width: 50px" />
            <col style="width: 50px" />
            <col style="width: 75px" />
            <col style="width: 150px" />
            <col />
        </ColGroup>
        <HeaderContent>
            <MudTh>#</MudTh>
            <MudTh>Grid</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>No</MudTh>
            <MudTh>Team</MudTh>
            <MudTh>PWR</MudTh>
            <MudTh>TYRE</MudTh>
            <MudTh>Score</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Events</MudTh>
            <MudTh>Visual</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Style="@(ViewHelper.SetGradientTriangleStyle(context.Colour, context.Accent))">
                @context.Position
            </MudTd>
            <MudTd>
                <GridChange Change="@context.GridChange" />
            </MudTd>
            <MudTd>
                <CountryFlag Code="@context.Nationality" Size="FlagSize.Tiny" />
                @context.FullName
            </MudTd>
            <MudTd>@context.Number</MudTd>
            <MudTd Style="@(ViewHelper.SetBorderRightStyle(context.Colour))">
                @context.TeamName
            </MudTd>
            <MudTd>@context.Power</MudTd>
            <MudTd>
                <span class="tyre" style="border-color:@(context.CurrentTyre.Colour)">
                    @context.TyreLife
                </span>
            </MudTd>
            <MudTd>@context.LapSum</MudTd>
            <MudTd>
                @if (context.Status == RaceStatus.Racing)
                {
                    <MudText Typo="Typo.body2">@context.DisplayGap</MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Error">@context.Incident</MudText>
                }
            </MudTd>
            <MudTd>
                @foreach (var raceEvent in context.RaceEventsPerLap)
                {
                    <MudText Typo="Typo.body2">Lap @(raceEvent.Key): @(raceEvent.Value)</MudText>
                }
            </MudTd>
            <MudTd>
                <MudProgressLinear Value="@context.LapSum" Min="0" Max="@highestScore" Size="Size.Medium" Color="Color.Secondary" Class="my-2" />
            </MudTd>
        </RowTemplate>
        <FooterContent>
            <MudTd colspan="20">
                <MudStack Row="true" Justify="Justify.SpaceBetween">
                    <MudIconButton Icon="@Icons.Material.Outlined.Image" Color="Color.Primary" OnClick="ShowImage" />
                    <MudIconButton Icon="@Icons.Material.Outlined.InsertChart" Color="Color.Primary" OnClick="ShowGraph" />
                </MudStack>
            </MudTd>
        </FooterContent>
    </MudTable>
}

@code {
    [Parameter] public long RaceId { get; set; }

    public RaceModel Model { get; set; }

    private Dictionary<int, int> allotments;

    bool loading = true;

    int disqualifyChance = (100 / 4); // means 1/25 chance of DSQ | should read from config
    int mistakeRolls = 2;
    int mistakeMinCost = -30;
    int mistakeMaxCost = -20;
    double gapMarge = 0.12;

    int participatingDrivers;
    int fastestLap;
    int highestScore;
    int racedLaps;
    int totalLaps;

    int calculated;
    int calculationCount;
    int calculationsPerAdvance = 5;

    protected override async Task OnInitializedAsync()
    {
        Model = await RaceService.RetrieveRaceModel(RaceId);
        allotments = Model.Season.PointAllotments?.ToDictionary(e => e.Position, e => e.Points) ?? new();

        participatingDrivers = Model.RaceDrivers.Count;
        calculationCount = Model.RaceLength / 10;

        racedLaps = NumberHelper.CalcLapCount(calculated, Model.TrackLength);
        totalLaps = NumberHelper.CalcLapCount(calculationCount, Model.TrackLength);

        loading = false;
    }

    private void Advance()
    {
        // Determine the values which impact the race like: weather and it's multipliers (configuration innit?)
        var newLapScores = new List<LapScore>();

        long? newFastestLapScorer = null;

        // Iterate through all still running drivers
        foreach (var driver in Model.RaceDrivers.Where(e => e.Status == RaceStatus.Racing))
        {
            // Check reliability
            var wouldDisqualify = NumberHelper.RandomInt(disqualifyChance) == 0;

            if (DidReliabilityFail(driver.DriverReliability))
            {
                driver.Status = wouldDisqualify ? RaceStatus.Dsq : RaceStatus.Dnf;
                driver.Incident = wouldDisqualify ? Incident.Dangerous : EnumHelper.GetDriverIncidents.TakeRandomItem();
            }
            else if (DidReliabilityFail(driver.CarReliability))
            {
                driver.Status = wouldDisqualify ? RaceStatus.Dsq : RaceStatus.Dnf;
                driver.Incident = wouldDisqualify ? Incident.Illegal : EnumHelper.GetCarIncidents.TakeRandomItem();
            }
            else if (DidReliabilityFail(driver.EngineReliability))
            {
                driver.Status = wouldDisqualify ? RaceStatus.Dsq : RaceStatus.Dnf;
                driver.Incident = wouldDisqualify ? Incident.Fuel : Incident.Engine;
            }

            // Calculate score
            if (driver.Status == RaceStatus.Racing)
            {
                // Always multiply rng with the given lap count, add power to every lap (thats why we do that now otherwise weird calc moment inbound)
                // probs not best to calculate this here
                var minRng = (0 + driver.RngMinMod);
                var maxRng = (100 + driver.RngMaxMod);

                for (int i = 0; i < calculationsPerAdvance; i++)
                {
                    int lapResult = NumberHelper.RandomInt(minRng, maxRng);

                    // Adds the qualifying bonus in the first lap, should be thought about once more though in terms of what we do with this
                    if (i == 0 && calculated == 0)
                        lapResult += GetQualifyingBonus(driver.Grid);

                    // Check if driver made a mistake, if so then it's going to cost him
                    var mistake = false;
                    for (int j = 0; j < mistakeRolls; j++)
                    {
                        mistake = DidReliabilityFail(driver.DriverReliability);
                        if (!mistake)
                            break;
                    }

                    if (mistake)
                    {
                        lapResult += NumberHelper.RandomInt(mistakeMinCost, mistakeMaxCost);
                        AddRaceEvent(driver, calculated + i, RacerEvent.Mistake);
                    }

                    // Strategy
                    lapResult += HandleStrategy(driver, i);

                    // Adds the overall power of the driver
                    lapResult += driver.Power;

                    if (lapResult > fastestLap)
                    {
                        fastestLap = lapResult;
                        newFastestLapScorer = driver.ResultId;
                    }

                    // Finally add the score to the lap results
                    driver.LapScores.Add(lapResult);
                }
            }
        }

        calculated += calculationsPerAdvance;
        racedLaps = NumberHelper.CalcLapCount(calculated, Model.TrackLength);

        // Determine new positions (keep team role in mind here!)
        DeterminePositions(newFastestLapScorer);

        StateHasChanged();

        // Persist the new stint results, yes after doing all whats needed to show them
    }

    int GetQualifyingBonus(int grid) => (participatingDrivers * Model.Season.GridBonus) - ((grid - 1) * Model.Season.GridBonus);

    private bool ShouldCheckReliability()
    {
        if (calculated == 0)
            return true;
        if (calculated == calculationsPerAdvance)
            return true;

        // More instances when one should check reliablity?
        // Maybe a different way to determine these checks?

        return false;
    }

    private bool DidReliabilityFail(int reliability) => NumberHelper.RandomInt(1000) >= reliability;

    int HandleStrategy(RaceDriver driver, int lap)
    {
        var tyreMaxWear = driver.CurrentTyre.WearMax + driver.WearMaxMod;
        var tyreMinWear = driver.CurrentTyre.WearMin + driver.WearMinMod;

        // Ensures minimum wear is always at least one more than the maximum wear
        if (tyreMinWear <= tyreMaxWear)
            tyreMinWear = tyreMaxWear + 1;

        // Maximum wear is more than the tyre can handle, it's time for a pitstop!
        if (tyreMaxWear > driver.TyreLife)
        {
            var nextOrder = driver.CurrentTyreOrder + 1;
            var nextTyre = driver.Strategy.StrategyTyres.FirstOrDefault(e => e.Order == nextOrder);

            // If there is another tyre left in the strategy then we're installing it
            if (nextTyre != null)
            {
                driver.CurrentTyre = nextTyre.Tyre;
                driver.CurrentTyreOrder = nextOrder;
                driver.TyreLife = nextTyre.Tyre.Pace;

                AddRaceEvent(driver, calculated + lap, RacerEvent.Pitstop);
            }
        }

        int tyreLifeBeforeWear = driver.TyreLife;

        // Add wear to the tyre
        driver.TyreLife += NumberHelper.RandomInt(tyreMaxWear, tyreMinWear);

        return tyreLifeBeforeWear;
    }

    void AddRaceEvent(RaceDriver driver, int lap, RacerEvent racerEvent)
    {
        if (driver.RaceEventsPerLap.ContainsKey(lap))
            driver.RaceEventsPerLap[lap] |= racerEvent;
        else
            driver.RaceEventsPerLap.Add(lap, racerEvent);
    }

    private void DeterminePositions(long? newFastestLapHolder)
    {
        var racingDrivers = Model.RaceDrivers.OrderBy(e => (int)e.Status).ThenByDescending(e => e.LapSum).ToList();

        var position = 0;
        highestScore = racingDrivers.Max(e => e.LapSum);

        var previousDriver = racingDrivers.First();

        foreach (var driver in racingDrivers)
        {
            driver.Position = ++position;
            driver.DisplayGap = GapToLeader(driver.LapSum, highestScore);

            if (newFastestLapHolder != null)
            {
                driver.HasFastestLap = false;
                if (driver.ResultId == newFastestLapHolder)
                    driver.HasFastestLap = true;
            }

            // Current iteration doesn't allow to swap drivers easily like this, how do we solve this?
            //if (driver.Role == TeamRole.Main)
            //{
            //    if (previousDriver.SeasonTeamId == driver.SeasonDriverId && previousDriver.Role == TeamRole.Support)
            //    {

            //    }
            //}
        }
    }

    private string GapToLeader(int score, int highestScore)
    {
        double gap = ((highestScore - score) * gapMarge);

        return $"+{Math.Round(gap, 2)}";
    }

    private static int GetQualifyingBonus(int grid, int driverCount, int bonus) => (driverCount * bonus) - ((grid - 1) * bonus);

    private void ShowImage() => Snackbar.Add("Not implemented yet", Severity.Warning);

    private void ShowGraph() => Snackbar.Add("Not implemented yet", Severity.Warning);

    private async Task PersistLapScores()
    {
        // For now not implemented per advance but all in total

        var driverTotalScores = Model.RaceDrivers.ToDictionary(e => e.ResultId, e => e.LapScores);

        if (driverTotalScores?.Any() == true)
            await RaceService.PersistLapScores(driverTotalScores);
    }

    private async Task Finish()
    {
        var fastestLapDriver = Model.RaceDrivers.Where(e => e.LapScores.Any()).OrderByDescending(e => e.LapScores.Max()).First();

        var finishedRace = Model.ToFinishedRace();
        var finishedResults = Model.RaceDrivers.Select(e => e.ToResult(RaceId)).ToList();
        var scoredPoints = Model.RaceDrivers
            .Select(e => e.ToScoredPoints(allotments, Model.Season.PointsPole, Model.Season.PointsFastestLap, e.ResultId == fastestLapDriver.ResultId))
            .ToList();

        // Should be removed if it is done per advance
        await PersistLapScores();

        await RaceService.FinishRace(finishedRace, finishedResults, scoredPoints);

        Nav.NavigateTo($"/overview/{Model.Season.Id}/3"); // 3 = standingspanel
    }
}
