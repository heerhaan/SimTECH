@page "/race/{RaceId:long}"
@inject BreadcrumbProvider _bread
@inject ProtectedLocalStorage _storage
@inject NavigationManager _nav
@inject IncidentService _incidentService
@inject RaceService _raceService
@inject SeasonService _seasonService
@inject TyreService _tyreService
@inject IDialogService _dialogService
@inject ISnackbar _snackbar
@inject IOptions<SimConfig> _config

<PageTitle>Race</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4" id="race-display">
    @if (!loading)
    {
        <MudPaper MinHeight="60px" Width="100%">
            <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-2">
                <CountryFlag Code="@Model.Country" />
                <MudText Typo="Typo.h5">@Model.Name - ROUND @Model.Round</MudText>

                <MudSpacer />

                <MudIcon Icon="@Model.ClimateIcon" />
                <MudText>@Model.Climate</MudText>
                <MudIcon Icon="@Model.ClimateIcon" />

                <MudSpacer />

                <MudSwitchM3 @bind-Checked="tooMuchInfo"
                             Label="TMI"
                             Color="Color.Secondary"
                             ThumbIcon="@Icons.Material.Filled.Done"
                             ThumbOffIcon="@Icons.Material.Filled.Close" />
            </MudStack>
        </MudPaper>
        <MudTable Items="@Model.RaceDrivers.OrderBy(e => (int)e.Status).ThenBy(e => e.Position)" Dense="true" Class="extra-dense overflow-x-hide">
            <ToolBarContent>
                <MudStack Row="true" AlignItems="AlignItems.Center" Class="mud-width-full">
                    <MudStack Spacing="0" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.subtitle2">Advance laps:</MudText>
                        <MudChipSet SelectedChipChanged="ChangeCalculationPerAdvance" Mandatory="true">
                            <MudChip Value="1" Color="Color.Primary">@(NumberHelper.CalcLapCount(1 * calculationDistance, Model.TrackLength))</MudChip>
                            <MudChip Value="5" Default="true" Color="Color.Primary">@(NumberHelper.CalcLapCount(5 * calculationDistance, Model.TrackLength))</MudChip>
                            <MudChip Value="10" Color="Color.Primary">@(NumberHelper.CalcLapCount(10 * calculationDistance, Model.TrackLength))</MudChip>
                        </MudChipSet>
                    </MudStack>
                    
                    <MudSpacer />

                    <MudChip Color="@lapIndicatorColor" Label="true" DisableRipple="true">
                        <MudText Typo="Typo.h5">LAP @(racedLaps) / @(totalLaps)</MudText>
                    </MudChip>

                    <MudSpacer />

                    <MudButtonGroup Variant="Variant.Outlined" Color="Color.Tertiary">
                        @if (!Model.IsFinished)
                        {
                            @if (calculated >= calculationCount)
                            {
                                <MudButton OnClick="Finish">Finish</MudButton>
                            }
                            else
                            {

                                <MudButton OnClick="Advance">Advance</MudButton>
                            }
                        }
                        <ScreenshotButton TargetId="race-display" />
                    </MudButtonGroup>
                </MudStack>
            </ToolBarContent>
            <HeaderContent>
                <MudTh Style="width: 15px"></MudTh>
                <MudTh Style="width: 40px">Grid</MudTh>
                <MudTh Class="pa-0" Style="width: 5px"></MudTh>
                <MudTh Style="width: 220px">Name</MudTh>
                <MudTh Class="number-col">No</MudTh>
                <MudTh Style="width: 220px">Team</MudTh>
                <MudTh Class="number-col">PWR</MudTh>
                <MudTh Style="width: 175px">ATT / DEF</MudTh>
                <MudTh Class="tyre-col">Tyre</MudTh>
                <MudTh Class="number-col">Pace</MudTh>
                <MudTh Class="number-col-lg">Status</MudTh>
                @if (tooMuchInfo)
                {
                    <MudTh Class="number-col">L.Gap</MudTh>
                    <MudTh Class="number-col">Score</MudTh>
                }
                <MudTh Style="width: 500px">Progression</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <DriverPosition Number="@context.Position" Colour="@context.Colour" Accent="@context.Accent" />
                </MudTd>
                <MudTd>
                    <GridChange Change="@context.GridChange" />
                </MudTd>
                <MudTd Class="pa-0">
                    <span class="smol-accent" style="@(ViewHelper.SetBackgroundColour(context.Colour))"></span>
                </MudTd>
                <MudTd Class="overflow-hider">
                    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.body1">@context.FirstName</MudText>
                        <MudText Typo="Typo.button" Class="fontsize-button-text">@context.LastName</MudText>
                        @if (context.HasFastestLap)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Timer" Size="Size.Small" Style="color:mediumpurple" />
                        }
                        <MudSpacer />
                        <CountryFlag Code="@context.Nationality" Size="FlagSize.Small" />
                    </MudStack>
                </MudTd>
                <MudTd Class="number-col">
                    <NumberDisplay Colour="@context.Colour" Accent="@context.Accent">@context.Number</NumberDisplay>
                </MudTd>
                <MudTd Class="overflow-hider">
                    <MudText Typo="Typo.button">@context.TeamName</MudText>
                </MudTd>
                <MudTd Class="number-col">
                    <MudText Typo="Typo.caption">@context.Power</MudText>
                </MudTd>
                <MudTd>
                    <MudStack Row="true" Spacing="1" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="pa-0 mud-width-full">
                        <MudIcon Icon="@IconCollection.Sword" Size="Size.Small" />
                        <MudText Typo="Typo.caption">@context.Attack</MudText>
                        <sup>@(context.OvertakeCount)</sup>
                        <span class="py-2" style="background-color: antiquewhite;padding-left: 1px;padding-right: 1px;"></span>
                        <MudText Typo="Typo.caption">@context.Defense</MudText>
                        <sup>@(context.DefensiveCount)</sup>
                        <MudIcon Icon="@IconCollection.ShieldChevron" Size="Size.Small" />
                    </MudStack>
                </MudTd>
                <MudTd Class="tyre-col">
                    <MudStack Row="true" Spacing="0" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="pa-0 mud-width-full">
                        <TyreElement Colour="@context.CurrentTyre.Colour">@context.CurrentTyre.Name.ElementAt(0)</TyreElement>
                        <sup>@(context.TyreLife)</sup>
                    </MudStack>
                </MudTd>
                <MudTd Class="number-col">
                    @if (context.Status == RaceStatus.Racing && context.SingleOccurrence == null)
                    {
                        <GradientColour Min="@lastLowestScore" Max="@lastHighestScore" Value="@context.LastScore">
                            <MudText Typo="Typo.caption" Color="Color.Inherit">@context.LastScore</MudText>
                        </GradientColour>
                    }
                    else
                    {
                        <MudText Typo="Typo.button" Color="Color.Warning">@(context.SingleOccurrence ?? "-")</MudText>
                    }
                </MudTd>
                <MudTd Class="number-col-lg">
                    @if (context.Incident == null)
                    {
                        <MudText Typo="Typo.caption">@context.GapAbove</MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.button" Color="Color.Error">@context.Incident.Name</MudText>
                    }
                </MudTd>
                @if (tooMuchInfo)
                {
                    <MudTd Class="number-col">
                        <MudText Typo="Typo.caption">+@((Math.Round((highestScore - context.LapSum) * gapMarge, 2)).ToString("F2"))</MudText>
                    </MudTd>
                    <MudTd Class="number-col">
                        <MudText Typo="Typo.caption">@context.LapSum</MudText>
                    </MudTd>
                }
                <MudTd>
                    <div class="relative" style="height:8px;width:100%">
                        @foreach (var lapEvent in context.LapScores)
                        {
                            @foreach (var raceEvent in lapEvent.ListOfDubiousEvents().Select((element, index) => new { index, element }))
                            {
                                <SignalIcon LapPercentage="@(NumberHelper.Percentage((lapEvent.Order - 1), calculationCount))"
                                            Signal="@raceEvent.element.ToString()"
                                            Index="@raceEvent.index" />
                            }
                        }
                    </div>

                    <SimProgressLinear Bars="@(context.LapScores.Select(e => ((NumberHelper.Percentage(1, calculationCount)), e.TyreColour)).ToList())" />
                </MudTd>
            </RowTemplate>
        </MudTable>
        <MudPaper Class="pt-2 px-1">
            <SimProgressLinear Bars="@(situations.Select(e => ((NumberHelper.Percentage(1, calculationCount)), e.Value.SituationColour())).ToList())" />
            <MudStack Row="true" AlignItems="AlignItems.Center" Class="px-4 py-2">
                <MudText Typo="Typo.button">Legend</MudText>
                <MudChip Icon="@IconCollection.HelmetOff" IconColor="Color.Error" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true">
                    Crash
                </MudChip>
                <MudChip Icon="@IconCollection.CarCrash" IconColor="Color.Error" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true">
                    Issues
                </MudChip>
                <MudChip Icon="@IconCollection.EngineOff" IconColor="Color.Error" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true">
                    Engine
                </MudChip>
                <MudChip Icon="@Icons.Material.Filled.ErrorOutline" IconColor="Color.Warning" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true">
                    Mistake
                </MudChip>
                <MudChip Icon="@IconCollection.RefreshDot" IconColor="Color.Success" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true">
                    Pitstop
                </MudChip>
                <MudChip Icon="@Icons.Material.Filled.SwapVert" IconColor="Color.Info" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true">
                    Swap
                </MudChip>
                <MudChip Icon="@Icons.Material.Filled.Healing" IconColor="Color.Warning" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true">
                    Lethal
                </MudChip>
                <MudChip Icon="@IconCollection.AlertTriangle" IconColor="Color.Warning" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true">
                    Caution
                </MudChip>

                <MudSpacer />

                <MudMenu Label="Charts" Icon="@Icons.Material.Filled.InsertChart" Color="Color.Tertiary">
                    <MudMenuItem OnClick="ShowGapperChart">Gapper chart</MudMenuItem>
                    <MudMenuItem OnClick="ShowPositionChart">Position chart</MudMenuItem>
                </MudMenu>
            </MudStack>
        </MudPaper>
    }
</MudContainer>

@code {
    [Parameter] public long RaceId { get; set; }

    public RaceModel Model { get; set; }

    List<Tyre> tyres;
    List<Incident> possibleIncidents;

    // Controls for the view
    bool loading = true;
    bool tooMuchInfo = false;
    bool safetyCarOut = false;
    Color lapIndicatorColor = Color.Dark;

    Entrant activeReliabilityCheck = Entrant.Driver;
    Entrant[] cycleableReliablities = new[] { Entrant.Driver, Entrant.Team, Entrant.Engine };
    int reliablityCycler = 0;

    Dictionary<int, SituationAtRace> situations = new();

    // Supportive caluclation fields
    int fatalityOdds;
    int disqualifyChance;
    int safetyCarOdds;
    int safetyReturnOdds;
    int mistakeRolls;
    int mistakeMin;
    int mistakeMax;
    int battleRng;
    double gapMarge;

    int fastestLap;
    int highestScore;
    int racedLaps;
    int totalLaps;
    int minLapRng;
    int maxLapRng;
    int pitMin;
    int pitMax;

    int calculated;
    int calculationCount;
    int calculationsPerAdvance = 5;
    int calculationDistance = 10;

    int lastHighestScore = 0;
    int lastLowestScore = 0;
    int safetyCarGap = 50;
    int safetyGapCloserDivider = 2;
    int safetyWearDivider = 3;

    protected override async Task OnInitializedAsync()
    {
        tyres = await _tyreService.GetTyres(StateFilter.Active);
        possibleIncidents = await _incidentService.GetIncidents(StateFilter.Active);

        Model = await _raceService.RetrieveRaceModel(RaceId);

        minLapRng = Model.Season.RngMinimum;
        maxLapRng = Model.Season.RngMaximum;
        pitMin = Model.Season.PitMinimum;
        pitMax = Model.Season.PitMaximum;

        fatalityOdds = _config.Value.FatalityChance;
        disqualifyChance = _config.Value.DisqualifyChance;
        safetyCarOdds = _config.Value.SafetyCarChance;
        safetyReturnOdds = _config.Value.SafetyCarReturnChance;
        mistakeRolls = _config.Value.MistakeAmountRolls;
        mistakeMin = _config.Value.MistakeLowerValue;
        mistakeMax = _config.Value.MistakeUpperValue;
        battleRng = _config.Value.BattleRng;
        gapMarge = _config.Value.GapMarge;

        calculationDistance = _config.Value.CalculationDistance;
        calculated = Model.RaceDrivers.Select(e => e.LapScores.Count()).Max();
        calculationCount = Model.RaceLength / calculationDistance;

        for (int i = 1; i <= calculationCount; i++)
        {
            situations.Add(i, SituationAtRace.None);
        }

        racedLaps = NumberHelper.CalcLapCount(calculated * calculationDistance, Model.TrackLength);
        totalLaps = NumberHelper.CalcLapCount(Model.RaceLength, Model.TrackLength);

        if (Model.IsFinished)
        {
            highestScore = Model.RaceDrivers.Max(e => e.LapSum);
            fastestLap = Model.RaceDrivers.SelectMany(e => e.LapScores).Max(e => e.Score);
        }

        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Seasons", href: "seasons"),
            new BreadcrumbItem("Overview", href: $"overview/{Model.Season.Id}"),
            new BreadcrumbItem("Raceweek", href: $"raceweek/{RaceId}"),
            new BreadcrumbItem("Race", href: $"race/{RaceId}", disabled: true),
        });

        loading = false;
    }

    void ChangeCalculationPerAdvance(MudChip? calcChip)
    {
        if (calcChip != null)
            calculationsPerAdvance = (int)calcChip.Value;
    }

    void Advance()
    {
        // Use this variable to persist the lap scores which were generated in this advance
        var lapScoresToPersist = new List<LapScore>();

        // Every i in this instance is relative to 10km (or calculationDistance) of racing aka a calculation
        for (int i = 0; i < calculationsPerAdvance; i++)
        {
            // Prevent continuing the advancing if we have already reached the limit
            if (calculated >= calculationCount)
                break;

            ++calculated;
            long? newFastestLapScorer = null;

            AddCalculationSituation();

            // Logic for what happens during a SC goes here
            if (safetyCarOut)
            {
                var safetyCarGoesBackIn = HandleSafetyMoment(lapScoresToPersist);
                if (safetyCarGoesBackIn)
                {
                    // After handling a safety car round, it goes back in
                    lapIndicatorColor = Color.Dark;
                    safetyCarOut = false;
                }

                continue;
            }

            foreach (var driver in Model.RaceDrivers.Where(e => e.Status == RaceStatus.Racing))
            {
                driver.SingleOccurrence = null;
                driver.InstantOvertaken = false;

                var lapScore = new LapScore { ResultId = driver.ResultId, Order = calculated };

                // Determine if either driver, car or engine has failed
                var safetyCarOccurrence = CheckReliability(driver, lapScore);

                // Calculate the score for drivers which are still racing
                if (driver.Status == RaceStatus.Racing)
                {
                    var minRng = (minLapRng + driver.RngMinMod);
                    var maxRng = (maxLapRng + driver.RngMaxMod);

                    int lapValue = NumberHelper.RandomInt(minRng, maxRng);

                    // Adds the qualifying bonus in the first lap, should be thought about once more though in terms of what we do with this
                    if (calculated == 1)
                        lapValue += Model.QualifyingBonus(driver.Grid);

                    // Check if driver made a mistake, if so then it's going to cost him
                    for (int j = 0; j < mistakeRolls; j++)
                    {
                        if (DidReliabilityFail(driver.DriverReliability))
                        {
                            lapValue -= NumberHelper.RandomInt(mistakeMin, mistakeMax);
                            lapScore.RacerEvents |= RacerEvent.Mistake;
                            driver.InstantOvertaken = true;
                            break;
                        }
                    }

                    // Strategy
                    lapValue += HandleStrategy(driver, lapScore);

                    // Adds the overall power of the driver
                    lapValue += driver.Power;

                    if (lapValue > fastestLap)
                    {
                        fastestLap = lapValue;
                        newFastestLapScorer = driver.ResultId;
                    }

                    // Finally add the score to the lap results
                    lapScore.Score = lapValue;
                }
                else if (safetyCarOccurrence)
                {
                    // all sort of calculations to do here in relation to the current driver who caused a SC
                    safetyCarOut = safetyCarOccurrence;
                }

                lapScore.TyreColour = driver.CurrentTyre.Colour;
                driver.LapScores.Add(lapScore);
                lapScoresToPersist.Add(lapScore);
            }

            // Determine new positions (keep team role in mind here!)
            PostProcessAdvance(newFastestLapScorer);

            // TODO: handle something to deal with an active safety car which occurred in a previous advance
            if (safetyCarOut)
            {
                lapIndicatorColor = Color.Warning;
                // Stop iterating through all advances since SC occurrence
                break;
            }
        }

        racedLaps = NumberHelper.CalcLapCount(calculated * calculationDistance, Model.TrackLength);

        var lastScores = Model.RaceDrivers.Where(e => e.Status == RaceStatus.Racing).Select(e => e.LastScore).ToArray();
        if (lastScores.Any())
        {
            lastLowestScore = lastScores.Min();
            lastHighestScore = lastScores.Max();
        }

        // Persist the new stint results, yes after doing all whats needed to show them
        //PersistLapScores(lapScoresToPersist);
    }

    void AddCalculationSituation()
    {
        situations[calculated] = safetyCarOut ? SituationAtRace.Caution : SituationAtRace.Raced;
    }

    bool CheckReliability(RaceDriver driver, LapScore lapScore)
    {
        var safetyCar = false;

        if (activeReliabilityCheck == Entrant.Driver && DidReliabilityFail(driver.DriverReliability))
        {
            lapScore.RacerEvents |= RacerEvent.DriverDnf;
            driver.Incident = possibleIncidents.Where(e => e.Category == CategoryIncident.Driver).ToList().TakeRandomIncident();
        }
        else if (activeReliabilityCheck == Entrant.Team && DidReliabilityFail(driver.CarReliability))
        {
            lapScore.RacerEvents |= RacerEvent.CarDnf;
            driver.Incident = possibleIncidents.Where(e => e.Category == CategoryIncident.Car).ToList().TakeRandomIncident();
        }
        else if (activeReliabilityCheck == Entrant.Engine && DidReliabilityFail(driver.EngineReliability))
        {
            lapScore.RacerEvents |= RacerEvent.EngineDnf;
            driver.Incident = possibleIncidents.Where(e => e.Category == CategoryIncident.Engine).ToList().TakeRandomIncident();
        }
        else { return safetyCar; }

        // Driver had a reliability failure, meaning he will immediatly be overtaken by any attacking driver
        driver.InstantOvertaken = true;

        // If enabled, then we're also going to check if anyone experienced a fatal crash
        if (Model.LeagueOptions.HasFlag(LeagueOptions.EnableFatality) && (NumberHelper.RandomInt(fatalityOdds) == 0))
        {
            safetyCar = true;

            driver.Status = RaceStatus.Fatal;
            driver.Incident = possibleIncidents.Where(e => e.Category == CategoryIncident.Lethal).ToList().TakeRandomIncident();
            lapScore.RacerEvents = RacerEvent.Death;

            return safetyCar;
        }

        // Randomly determines the odds a safety car occured due to the DNF'ing driver
        safetyCar = NumberHelper.RandomInt(safetyCarOdds) == 0;
        driver.Status = RaceStatus.Dnf;

        return safetyCar;
    }

    bool DidReliabilityFail(int reliability) => NumberHelper.RandomInt(1000) > reliability;

    // Returns a number which will be added to the users lap score
    int HandleStrategy(RaceDriver driver, LapScore lapScore)
    {
        int valueScoreResult = driver.TyreLife;

        var tyreMinWear = driver.CurrentTyre.WearMin + driver.WearMinMod;
        var tyreMaxWear = driver.CurrentTyre.WearMax + driver.WearMaxMod;

        if (tyreMinWear > tyreMaxWear)
        {
            tyreMaxWear = tyreMinWear + 1;
            _snackbar.Add("A situation occurred where the maximum wear was lower than the minimum wear, please reconsider some set tyre wear values!");
        }

        // Maximum wear is more than the tyre can handle, it's time for a pitstop!
        // Or minimum wear? Or 0?
        if (tyreMaxWear > driver.TyreLife)
        {
            var distanceLeft = Model.RaceLength - (calculated * calculationDistance);
            var validTyres = tyres
                .Where(e => e.DistanceMin < distanceLeft && e.DistanceMax > distanceLeft && e.ForWet == Model.IsWet)
                .ToList();

            if (validTyres.Count > 0)
            {
                Tyre nextTyre;
                if (validTyres.Count > 1)
                    nextTyre = validTyres.Where(e => e.Id != driver.CurrentTyre.Id).ToList().TakeRandomItem();
                else
                    nextTyre = validTyres.First();

                driver.CurrentTyre = nextTyre;
                driver.TyreLife = nextTyre.Pace;
                driver.InstantOvertaken = true;

                lapScore.RacerEvents |= RacerEvent.Pitstop;

                valueScoreResult = driver.TyreLife;
                valueScoreResult -= NumberHelper.RandomInt(pitMin, pitMax);
            }
        }

        // Adds wear to the tyre
        driver.TyreLife -= NumberHelper.RandomInt(tyreMinWear, tyreMaxWear);

        return valueScoreResult;
    }

    // returns bool which indicates whether a safety car has been caused by a DNF-result
    bool HandleSafetyMoment(List<LapScore> lapScoresToPersist)
    {
        var distanceLeft = Model.RaceLength - (calculated * calculationDistance);
        var validTyres = tyres
            .Where(e => e.DistanceMin < distanceLeft 
                     && e.DistanceMax > distanceLeft 
                     && e.ForWet == Model.IsWet)
            .ToList();

        int scoreAboveDriver = 0;
        foreach (var driver in Model.RaceDrivers.Where(e => e.Status == RaceStatus.Racing).OrderBy(e => e.Position))
        {
            driver.SingleOccurrence = null;
            driver.InstantOvertaken = false;

            var lapScore = new LapScore { ResultId = driver.ResultId, Order = calculated };

            // If the tyre life is less than half of the tyres overall pace, then check for a pitstop
            if (validTyres.Count > 0 && driver.TyreLife < (driver.CurrentTyre.Pace / 2))
            {
                Tyre nextTyre;
                if (validTyres.Count > 1)
                    nextTyre = validTyres.Where(e => e.Id != driver.CurrentTyre.Id).ToList().TakeRandomItem();
                else
                    nextTyre = validTyres.First();

                driver.CurrentTyre = nextTyre;
                driver.TyreLife = nextTyre.Pace;
                driver.InstantOvertaken = true;

                lapScore.RacerEvents |= RacerEvent.Pitstop;

                lapScore.Score -= NumberHelper.RandomInt(pitMin / 2, pitMax / 2);
            }
            else
            {
                var scoreGap = scoreAboveDriver - driver.LapSum;

                // Consider making the score gap configureable, it fits well with grid bonus?
                if (scoreGap > safetyCarGap)
                {
                    var closingGap = scoreGap / safetyGapCloserDivider;
                    lapScore.Score += closingGap;
                }
            }

            var tyreMinWear = (driver.CurrentTyre.WearMin + driver.WearMinMod) / safetyWearDivider;
            var tyreMaxWear = (driver.CurrentTyre.WearMax + driver.WearMaxMod) / safetyWearDivider;
            driver.TyreLife -= NumberHelper.RandomInt(tyreMinWear, tyreMaxWear);

            lapScore.RacerEvents |= RacerEvent.Caution;
            lapScore.TyreColour = driver.CurrentTyre.Colour;

            driver.LapScores.Add(lapScore);
            lapScoresToPersist.Add(lapScore);
            scoreAboveDriver = driver.LapSum;
        }

        //DeterminePositions();
        int positionIndexer = 0;
        foreach (var driver in Model.RaceDrivers.OrderBy(e => (int)e.Status).ThenByDescending(e => e.LapSum))
        {
            driver.Position = ++positionIndexer;

            if (positionIndexer == 1)
                driver.GapAbove = "LEADER";
            else
                driver.GapAbove = "+" + (Math.Round((scoreAboveDriver - driver.LapSum) * gapMarge, 2)).ToString("F2");

            scoreAboveDriver = driver.LapSum;
        }

        return NumberHelper.RandomInt(safetyReturnOdds) == 0;
    }

    void PostProcessAdvance(long? newFastestLapHolder)
    {
        DeterminePositions();

        highestScore = Model.RaceDrivers.Max(e => e.LapSum);

        if (newFastestLapHolder != null)
        {
            foreach (var driver in Model.RaceDrivers)
            {
                driver.HasFastestLap = false;
                if (driver.ResultId == newFastestLapHolder)
                    driver.HasFastestLap = true;
            }
        }

        // Cycle through the reliability, to check something else (otherwise we have way too many DNFs)
        reliablityCycler++;
        reliablityCycler %= cycleableReliablities.Length;
        activeReliabilityCheck = cycleableReliablities[reliablityCycler];
    }

    void DeterminePositions()
    {
        var allPositionsAligned = false;
        // Need to re-retrieve this for every driver since their positions may change due to over overtakes (maybe)
        // altough i dont think this matters
        var actualPositions = GetCurrentActualPositions();

        // This likely can be optimized further
        while (!allPositionsAligned)
        {
            foreach (var driver in Model.RaceDrivers.Where(e => e.Status == RaceStatus.Racing).OrderBy(e => e.Position))
            {
                var lastScore = driver.LapScores.Last();

                int positionChange = driver.Position - actualPositions[driver.SeasonDriverId];

                // Assign the new positions based on whether their overtakes have been succesful
                if (positionChange > 0)
                    HandlePositionGain(driver, lastScore, positionChange);

                driver.LastScore = lastScore.Score;
            }

            allPositionsAligned = true;
            actualPositions = GetCurrentActualPositions();

            foreach (var driver in Model.RaceDrivers.Where(e => e.Status == RaceStatus.Racing).OrderBy(e => e.Position))
            {
                if (driver.Position != actualPositions[driver.SeasonDriverId])
                    allPositionsAligned = false;
            }
        }

        int scoreAboveDriver = 0;
        foreach (var driver in Model.RaceDrivers.Where(e => e.Status == RaceStatus.Racing).OrderBy(e => e.Position))
        {
            if (driver.Position == 1)
                driver.GapAbove = "LEADER";
            else
                driver.GapAbove = "+" + (Math.Round((scoreAboveDriver - driver.LapSum) * gapMarge, 2)).ToString("F2");

            scoreAboveDriver = driver.LapSum;
        }
    }

    Dictionary<long, int> GetCurrentActualPositions()
    {
        var actualPositions = new Dictionary<long, int>();
        int positionIndex = 0;

        foreach (var driver in Model.RaceDrivers.OrderBy(e => (int)e.Status).ThenByDescending(e => e.LapSum))
            actualPositions.Add(driver.SeasonDriverId, ++positionIndex);

        return actualPositions;
    }

    void HandlePositionGain(RaceDriver driver, LapScore lastScore, int gainedPositions)
    {
        while (gainedPositions > 0)
        {
            var abovePosition = driver.Position - 1;
            if (abovePosition == 0)
                break;

            var defendingDriver = Model.RaceDrivers.First(e => e.Position == abovePosition);

            // Driver above is teammate AND support driver AND attacker is main driver, swap time!
            //if (defendingDriver.SeasonTeamId == driver.SeasonTeamId 
            //    && driver.Role == TeamRole.Main 
            //    && defendingDriver.Role == TeamRole.Support)
            //{
            //    lastScore.RacerEvents |= RacerEvent.Swap;
            //    defendingDriver.LapScores.Last().RacerEvents |= RacerEvent.Swap;
            //}
            //else

            if (!defendingDriver.InstantOvertaken)
            {
                // Subtract attack value from defense, what's left is how much the attacker is hindered
                var attackingResult = driver.Attack + NumberHelper.RandomInt(battleRng);
                var defendingResult = defendingDriver.Defense + NumberHelper.RandomInt(battleRng);
                var battleCost = defendingResult - attackingResult;

                if (battleCost > 0)
                    lastScore.Score -= battleCost;

                // Overtake failed
                if (defendingDriver.LapSum > driver.LapSum)
                {
                    defendingDriver.DefensiveCount++;
                    break;
                }

                // It only counts as an overtake if it wasn't in an instant
                driver.OvertakeCount++;

                // Not sure if this can even happen but we gotta make sure
                @*if (safetyCarOut)
                    driver.SingleOccurrence = "Overtook under SC";*@
            }

            // Overtake succeeded, driver gains a position!
            (driver.Position, defendingDriver.Position) = (defendingDriver.Position, driver.Position);

            gainedPositions--;
        }
    }

    void PreProcessFinish()
    {
        bool anyoneDisqualified = false;

        foreach (var driver in Model.RaceDrivers.Where(e => e.Status == RaceStatus.Racing))
        {
            if (NumberHelper.RandomInt(disqualifyChance) == 0)
            {
                driver.Incident = possibleIncidents.Where(e => e.Category == CategoryIncident.Disqualified).ToList().TakeRandomIncident();
                driver.Status = RaceStatus.Dsq;

                anyoneDisqualified = true;
            }
        }

        if (anyoneDisqualified)
        {
            int positionIndex = 0;
            foreach (var driver in Model.RaceDrivers.OrderBy(e => (int)e.Status).ThenByDescending(e => e.LapSum))
                driver.Position = ++positionIndex;
        }
    }

    async Task Finish()
    {
        PreProcessFinish();

        var allotments = Model.Season.PointAllotments?.ToDictionary(e => e.Position, e => e.Points) ?? new();
        var finishedResults = Model.RaceDrivers.Select(e => e.ToResult(RaceId)).ToList();
        var scoredPoints = Model.RaceDrivers
            .Select(e => e.ToScoredPoints(allotments, Model.Season.PointsPole, Model.Season.PointsFastestLap))
            .ToList();

        // Should be removed when it is done per advance
        var allLapScores = Model.RaceDrivers.SelectMany(e => e.LapScores).Where(e => e.Id == 0).ToList();

        //Consider never storing lap scores in the first place (and disabling access to finished races)
        await _raceService.PersistLapScores(allLapScores);
        await _raceService.FinishRace(RaceId, finishedResults, scoredPoints);

        if (Model.LeagueOptions.HasFlag(LeagueOptions.EnablePenalty))
            await _seasonService.CheckPenalties(finishedResults);

        _nav.NavigateTo($"/postrace/{RaceId}");
    }

    async Task ShowGapperChart() => _ = 
        await _dialogService.ShowAsync<GapChartDialog>("Gapper chart", new DialogParameters { ["Drivers"] = Model.RaceDrivers });
    async Task ShowPositionChart() => _ =
        await _dialogService.ShowAsync<PositionChangeChart>("Position chart", new DialogParameters { ["Drivers"] = Model.RaceDrivers });
}
