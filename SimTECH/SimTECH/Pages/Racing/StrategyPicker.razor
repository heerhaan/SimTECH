<MudDialog Class="test-dialog-shadow">
    <TitleContent>
        Pick here a strategy to use for the selected driver
    </TitleContent>
    <DialogContent>
        @if (Strategies?.Any() == true)
        {
            <MudTable Items="Strategies">
                <HeaderContent>
                    <MudTh>Strategy</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <MudStack Spacing="2" Row="true">
                            @foreach (var tyreElem in context.StrategyTyres)
                            {
                                <span class="tyre" style="border-color:@(tyreElem.Tyre.Colour)">
                                    @tyreElem.Tyre.Name.ElementAt(0)
                                </span>
                            }
                        </MudStack>
                    </MudTd>
                    <MudTd Class="d-flex justify-end">
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Medium" OnClick="(() => PickOption(context))" Class="mud-height-full">
                            Pick strategy
                        </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <MudAlert>There is a serious lack of available strategies here, make them!</MudAlert>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? PickerDialog { get; set; }

    [Parameter] public long ResultId { get; set; }
    [Parameter] public List<Strategy> Strategies { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void PickOption(Strategy strategy)
    {
        PickerDialog?.Close(DialogResult.Ok(strategy));
    }

    private void Cancel() => PickerDialog?.Cancel();
}
