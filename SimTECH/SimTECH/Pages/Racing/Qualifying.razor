@page "/qualifying/{RaceId:long}"

@inject RaceService _raceService
@inject NavigationManager _nav

@if (loading)
{
    <MudAlert Severity="Severity.Warning">This bad boi is still loading, some patience please!</MudAlert>
}
else
{
    <MudTabs>
        <MudTabPanel Text="Q1">
            @*
                Table underneath is a good target for a refactor to a component, perhaps even a nested component! 
                Nested as in a component QualifyingSession implements a component Session (which can be implemented by practice!)
            *@
            <MudTable Items="@DriversInQ1.OrderBy(e => e.PositionQ1)" id="q1-result-table">
                <ToolBarContent>
                    <MudText>
                        <CountryFlag Code="@Model.Country" />
                        @Model.Name - QUALIFYING Q1
                    </MudText>
                    <MudSpacer />
                    @if (advancedQ1 != Model.AmountRuns)
                    {
                        <MudButton Variant="Variant.Outlined" OnClick="AdvanceQ1">Advance</MudButton>
                    }
                    <ScreenshotButton TargetId="q1-result-table" />
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>#</MudTh>
                    <MudTh>No.</MudTh>
                    <MudTh>Driver</MudTh>
                    <MudTh>Team</MudTh>
                    <MudTh>PWR</MudTh>
                    @for (int i = 1; i <= Model.AmountRuns; i++)
                    {
                        var j = i;
                        <MudTh>@j</MudTh>
                    }
                    <MudTh>Score</MudTh>
                    <MudTh>Gap</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Style="@PositionCutoffStyles(context.PositionQ1, Model.QualyAmountQ2, Model.MaximumRaceDrivers)">
                        <MudText Typo="Typo.h6">@context.PositionQ1</MudText>
                    </MudTd>
                    <MudTd Class="number-col" Style="@(ViewHelper.SetFullColourstyle(context.Colour, context.Accent))">
                        <MudText Typo="Typo.h6">@context.Number</MudText>
                    </MudTd>
                    <MudTd>
                        <MudText>@context.FullName</MudText>
                    </MudTd>
                    <MudTd Style="@(ViewHelper.SetBorderLeftStyle(context.Colour))">
                        <MudText>@context.TeamName</MudText>
                    </MudTd>
                    <MudTd>
                        <MudText Typo="Typo.h6">@context.Power</MudText>
                    </MudTd>
                    @foreach (var runResult in context.RunValuesQ1)
                    {
                        <MudTd>
                            <MudText Typo="Typo.h6">@runResult</MudText>
                        </MudTd>
                    }
                    <MudTd>
                        <MudText Typo="Typo.h6">@context.MaxScoreQ1</MudText>
                    </MudTd>
                    <MudTd>
                        <MudText Typo="Typo.h6">+@(context.GapQ1)</MudText>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudTabPanel>
        <MudTabPanel Text="Q2" Disabled="@(advancedQ1 != Model.AmountRuns)">
            @if (DriversInQ2 != null)
            {
                <MudTable Items="@DriversInQ2.OrderBy(e => e.PositionQ2)" id="q2-result-table">
                    <ToolBarContent>
                        <MudText>
                            <CountryFlag Code="@Model.Country" />
                            @Model.Name - QUALIFYING Q2
                        </MudText>
                        <MudSpacer />
                        @if (advancedQ2 != Model.AmountRuns)
                        {
                            <MudButton Variant="Variant.Outlined" OnClick="AdvanceQ2">Advance</MudButton>
                        }
                        <ScreenshotButton TargetId="q2-result-table" />
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>#</MudTh>
                        <MudTh>No.</MudTh>
                        <MudTh>Driver</MudTh>
                        <MudTh>Team</MudTh>
                        <MudTh>PWR</MudTh>
                        @for (int i = 1; i <= Model.AmountRuns; i++)
                        {
                            var j = i;
                            <MudTh>@j</MudTh>
                        }
                        <MudTh>Score</MudTh>
                        <MudTh>Gap</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd Style="@PositionCutoffStyles(context.PositionQ2, Model.QualyAmountQ3)">
                            <MudText Typo="Typo.h6">@context.PositionQ2</MudText>
                        </MudTd>
                        <MudTd Class="number-col" Style="@(ViewHelper.SetFullColourstyle(context.Colour, context.Accent))">
                            <MudText Typo="Typo.h6">@context.Number</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText>@context.FullName</MudText>
                        </MudTd>
                        <MudTd Style="@(ViewHelper.SetBorderLeftStyle(context.Colour))">
                            <MudText>@context.TeamName</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText Typo="Typo.h6">@context.Power</MudText>
                        </MudTd>
                        @foreach (var runResult in context.RunValuesQ2)
                        {
                            <MudTd>
                                <MudText Typo="Typo.h6">@runResult</MudText>
                            </MudTd>
                        }
                        <MudTd>
                            <MudText Typo="Typo.h6">@context.MaxScoreQ2</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText Typo="Typo.h6">+@(context.GapQ2)</MudText>
                        </MudTd>
                        </RowTemplate>
                </MudTable>
            }
        </MudTabPanel>
        <MudTabPanel Text="Q3" Disabled="@(advancedQ2 != Model.AmountRuns)">
            @if (DriversInQ3 != null)
            {
                <MudTable Items="@DriversInQ3.OrderBy(e => e.PositionQ3)" id="q3-result-table">
                    <ToolBarContent>
                        <MudText>
                            <CountryFlag Code="@Model.Country" />
                            @Model.Name - QUALIFYING Q3
                        </MudText>
                        <MudSpacer />
                        @if (advancedQ3 == Model.AmountRuns)
                        {
                            <MudButton Variant="Variant.Outlined" OnClick="Finish">Finish</MudButton>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Outlined" OnClick="AdvanceQ3">Advance</MudButton>
                        }
                        <ScreenshotButton TargetId="q3-result-table" />
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>#</MudTh>
                        <MudTh>No.</MudTh>
                        <MudTh>Driver</MudTh>
                        <MudTh>Team</MudTh>
                        <MudTh>PWR</MudTh>
                        @for (int i = 1; i <= Model.AmountRuns; i++)
                        {
                            var j = i;
                            <MudTh>@j</MudTh>
                        }
                        <MudTh>Score</MudTh>
                        <MudTh>Gap</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudText Typo="Typo.h6">@context.PositionQ3</MudText>
                        </MudTd>
                        <MudTd Class="number-col" Style="@(ViewHelper.SetFullColourstyle(context.Colour, context.Accent))">
                            <MudText Typo="Typo.h6">@context.Number</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText>@context.FullName</MudText>
                        </MudTd>
                        <MudTd Style="@(ViewHelper.SetBorderLeftStyle(context.Colour))">
                            <MudText>@context.TeamName</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText Typo="Typo.h6">@context.Power</MudText>
                        </MudTd>
                        @foreach (var runResult in context.RunValuesQ3)
                        {
                            <MudTd>
                                <MudText Typo="Typo.h6">@runResult</MudText>
                            </MudTd>
                        }
                        <MudTd>
                            <MudText Typo="Typo.h6">@context.MaxScoreQ3</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText Typo="Typo.h6">+@(context.GapQ3)</MudText>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudTabPanel>
    </MudTabs>
}

@code {
    [Parameter] public long RaceId { get; set; }

    public QualifyingModel Model { get; set; }

    // big ass hmm about doing it like this tbh
    // this also does not work yet
    private List<QualifyingDriver> DriversInQ1 { get; set; }
    private List<QualifyingDriver>? DriversInQ2 { get; set; }
    private List<QualifyingDriver>? DriversInQ3 { get; set; }

    // Two ways to do this: three different racedriver lists for each session
    // Alternatively make a custom class which has an identifier for which session the values are

    private bool loading = true;
    private int advancedQ1, advancedQ2, advancedQ3 = 0;
    private double gapMarge = 0.08;

    protected override async Task OnInitializedAsync()
    {
        Model = await _raceService.RetrieveQualifyingModel(RaceId);
        DriversInQ1 = Model.QualifyingDrivers;

        loading = false;
    }

    private void AdvanceQ1()
    {
        var positionIndex = 0;

        foreach (var driver in DriversInQ1)
        {
            driver.RunValuesQ1[advancedQ1] = driver.GetQualifyingResult(Model.QualyRng);
        }

        var highestScore = DriversInQ1.SelectMany(e => e.RunValuesQ1).Max();

        foreach (var driver in DriversInQ1.OrderByDescending(e => e.MaxScoreQ1))
        {
            driver.Position = ++positionIndex;
            driver.PositionQ1 = positionIndex;
            driver.GapQ1 = Math.Round(((highestScore - driver.MaxScoreQ1) * Model.GapMarge), 2);
        }

        advancedQ1++;

        if (advancedQ1 == Model.AmountRuns)
        {
            DriversInQ2 = DriversInQ1
                .OrderBy(e => e.PositionQ1)
                .Take(Model.QualyAmountQ2)
                .ToList();
        }
    }

    private void AdvanceQ2()
    {
        if (DriversInQ2 != null)
        {
            var positionIndex = 0;

            foreach (var driver in DriversInQ2)
            {
                var qualifyingResult = driver.GetQualifyingResult(Model.QualyRng);
                driver.RunValuesQ2[advancedQ2] = qualifyingResult;
            }

            var highestScore = DriversInQ2.SelectMany(e => e.RunValuesQ2).Max();

            foreach (var driver in DriversInQ2.OrderByDescending(e => e.MaxScoreQ2))
            {
                driver.Position = ++positionIndex;
                driver.PositionQ2 = positionIndex;
                driver.GapQ2 = Math.Round(((highestScore - driver.MaxScoreQ2) * Model.GapMarge), 2);
            }

            advancedQ2++;

            if (advancedQ2 == Model.AmountRuns)
            {
                DriversInQ3 = DriversInQ2
                    .OrderBy(e => e.PositionQ2)
                    .Take(Model.QualyAmountQ3)
                    .ToList();
            }
        }
    }

    private void AdvanceQ3()
    {
        if (DriversInQ3 != null)
        {
            var positionIndex = 0;

            foreach (var driver in DriversInQ3)
                driver.RunValuesQ3[advancedQ3] = driver.GetQualifyingResult(Model.QualyRng);

            var highestScore = DriversInQ3.SelectMany(e => e.RunValuesQ3).Max();

            foreach (var driver in DriversInQ3.OrderByDescending(e => e.MaxScoreQ3))
            {
                driver.Position = ++positionIndex;
                driver.PositionQ3 = positionIndex;
                driver.GapQ3 = Math.Round(((highestScore - driver.MaxScoreQ3) * Model.GapMarge), 2);
            }

            advancedQ3++;
        }
    }

    private string PositionCutoffStyles(int position, int sessionCutoff, int? raceCutoff = null)
    {
        if (raceCutoff.HasValue && position > raceCutoff)
            return "background-color: rebeccapurple";

        if (position > sessionCutoff)
            return "background-color: red;";

        return string.Empty;
    }

    private async Task Finish()
    {
        // Check for the possible penalties and consider them when making the positions
        int positionIndexer = 0;
        var positionResults = Model.QualifyingDrivers
            .OrderBy(e => e.PenaltyPosition())
            .ToDictionary(e => e.ResultId, e => ++positionIndexer);

        await _raceService.PersistGridPositions(positionResults, RaceId, Model.MaximumRaceDrivers);

        _nav.NavigateTo("/raceweek/" + RaceId);
    }
}
