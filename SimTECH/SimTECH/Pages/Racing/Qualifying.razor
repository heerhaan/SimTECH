<MudContainer MaxWidth="MaxWidth.Large">
    <div id="qualy-table">
        @if (!loading)
        {
            <MudPaper MinHeight="60px">
                <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-2">
                    <CountryFlag Code="@raceCountry" />
                    <MudText Typo="Typo.h5">@raceName</MudText>

                    <MudSpacer />

                    <MudButtonGroup Color="Color.Tertiary" Variant="Variant.Outlined">
                        <ScreenshotButton TargetId="qualy-table" Class="btn-md" />
                        @if (!QualySession.IsFinished && advancedRuns != amountRuns)
                        {
                            <MudButton OnClick="Advance" Class="btn-md">Advance</MudButton>
                        }
                    </MudButtonGroup>
                </MudStack>
            </MudPaper>
            <MudPaper Elevation="25">
                <CommonSession Drivers="@qualyDrivers"
                               AmountRuns="@amountRuns"
                               EntryCutoff="@entryCutoff"
                               ProgressCutoff="@progressCutoff"
                               HighestScore="@highestScore"
                               LowestScore="@lowestScore" />
            </MudPaper>
        }
    </div>
</MudContainer>

@code {
    [CascadingParameter] public RaweCeekModel RaweCeek { get; set; }

    [Parameter] public QualifyingSession QualySession { get; set; } = new();
    [Parameter] public int MaximumAllowed { get; set; } = int.MaxValue;
    [Parameter] public EventCallback<int> OnFinish { get; set; }

    private List<SessionDriver> qualyDrivers = new();

    bool loading = true;
    string raceName = string.Empty;
    Country raceCountry = Constants.DefaultCountry;
    int amountRuns;
    int advancedRuns;
    int qualyRng;
    int entryCutoff;
    int progressCutoff;
    int highestScore;
    int lowestScore = int.MaxValue;

    double gapMarge;

    protected override void OnInitialized()
    {
        loading = true;

        raceName = $"{RaweCeek.Race.Name} - QUALIFYING {QualySession.SessionIndex}";
        raceCountry = RaweCeek.Race.Track.Country;
        amountRuns = RaweCeek.Season.RunAmountSession;
        qualyRng = RaweCeek.Season.QualifyingRNG;
        entryCutoff = RaweCeek.Season.MaximumDriversInRace;
        progressCutoff = QualySession.ProgressionCutoff;

        if (QualySession.IsFinished)
        {
            var scoreNumbers = QualySession.SessionScores
                .SelectMany(e => e.Scores ?? Array.Empty<int>())
                .Where(e => e != 0)
                .ToArray();
            highestScore = scoreNumbers.Max();
            lowestScore = scoreNumbers.Min();
        }

        gapMarge = RaweCeek.GapMarge / 2;

        foreach (var driver in RaweCeek.RaweCeekDrivers.Where(e => QualySession.AllowedEntries >= e.Grid))
        {
            var mappedDriver = driver.MapToSessionDriver(amountRuns);
            mappedDriver.PenaltyPunish = driver.Penalty.GetValueOrDefault();

            var driverScore = QualySession.SessionScores.FirstOrDefault(e => e.ResultId == driver.ResultId);

            if (driverScore?.Scores?.Any() ?? false)
            {
                mappedDriver.Scores = driverScore.Scores;
                mappedDriver.Position = driverScore.Position;
                mappedDriver.AbsolutePosition = driverScore.AbsolutePosition;

                if (mappedDriver.Position == 1)
                    mappedDriver.GapAbove = "LEADER";
                else
                    mappedDriver.GapAbove = "+" + (Math.Round((highestScore - mappedDriver.MaxScore()) * gapMarge, 2)).ToString("F2");
            }

            qualyDrivers.Add(mappedDriver);
        }

        loading = false;
    }

    private async void Advance()
    {
        foreach (var driver in qualyDrivers)
        {
            var result = driver.Power + NumberHelper.RandomInt(qualyRng);
            driver.Scores[advancedRuns] = result;

            if (result > highestScore)
                highestScore = result;
            else if (result < lowestScore)
                lowestScore = result;
        }

        var positionIndexDict = qualyDrivers.Select(e => (e.Class?.Id ?? 0)).Distinct().ToDictionary(e => e, e => 0);
        int absoluteIndex = 0;

        foreach (var driver in qualyDrivers.OrderByDescending(e => e.MaxScore()))
        {
            driver.Position = ++positionIndexDict[driver.Class?.Id ?? 0];
            driver.AbsolutePosition = ++absoluteIndex;

            driver.GapAbove = driver.Position == 1
                ? "LEADER"
                : "+" + (Math.Round((highestScore - driver.MaxScore()) * gapMarge, 2)).ToString("F2");
        }

        advancedRuns++;

        if (advancedRuns == amountRuns)
            await Finish();
    }

    private async Task Finish()
    {
        var newScores = qualyDrivers.Select(e => new QualifyingScore
            {
                Index = QualySession.SessionIndex,
                Scores = e.Scores,
                Position = e.Position,
                AbsolutePosition = e.AbsolutePosition,
                RaceId = RaweCeek.Race.Id,
                ResultId = e.ResultId,

                PenaltyPunish = e.PenaltyPunish
            })
            .ToList();

        QualySession.SessionScores.AddRange(newScores);

        await OnFinish.InvokeAsync(QualySession.SessionIndex);
    }
}
