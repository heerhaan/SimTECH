@page "/qualifying/{RaceId:long}"
@inject RaceService _raceService
@inject NavigationManager _nav
@inject IOptions<SimConfig> _config

@*
    Tables underneath is a good target for a refactor to a component, perhaps even a nested component!
    Nested as in a component QualifyingSession implements a component Session (which can be implemented by practice!)
*@

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (!loading)
    {
        <MudTabs>
            <MudTabPanel Text="Q1">
                <MudTable Items="@DriversInQ1.OrderBy(e => e.PositionQ1)" Dense="true" Class="extra-dense" id="q1-result-table">
                    <ToolBarContent>
                        <MudStack Row="true" AlignItems="AlignItems.Center" Class="mud-width-full">
                            <CountryFlag Code="@Model.Country" />
                            <MudText Typo="Typo.h6">@Model.Name - QUALIFYING Q1</MudText>
                            <MudSpacer />
                            <MudButtonGroup Variant="Variant.Outlined">
                                <ScreenshotButton TargetId="q1-result-table" />
                                @if (advancedQ1 != Model.AmountRuns)
                                {
                                    <MudButton OnClick="AdvanceQ1">Advance</MudButton>
                                }
                            </MudButtonGroup>
                        </MudStack>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>#</MudTh>
                        <MudTh Class="pa-0"></MudTh>
                        <MudTh>Driver</MudTh>
                        <MudTh Class="number-col">No.</MudTh>
                        <MudTh>Team</MudTh>
                        <MudTh Class="number-col-lg">PWR</MudTh>
                        @for (int i = 1; i <= Model.AmountRuns; i++)
                        {
                            var j = i;
                            <MudTh Class="number-col-lg">@j</MudTh>
                        }
                        <MudTh Class="number-col-lg">Score</MudTh>
                        <MudTh>Gap</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd Class="number-col" Style="@PositionCutoffStyles(context.PositionQ1, Model.QualyAmountQ2, Model.MaximumRaceDrivers)">
                            <DriverPosition Number="@(context.PositionQ1)" Colour="@(context.Colour)" Accent="@(context.Accent)" />
                        </MudTd>
                        <MudTd Class="pa-0">
                            <span class="smol-accent" style="@(ViewHelper.SetFullColourstyle(context.Colour, context.Accent))"></span>
                        </MudTd>
                        <MudTd>
                            <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.body1">@context.FirstName</MudText>
                                <MudText Typo="Typo.button">@context.LastName</MudText>
                                <MudSpacer />
                                <CountryFlag Code="@context.Nationality" Size="FlagSize.Small" />
                            </MudStack>
                        </MudTd>
                        <MudTd Class="number-col" Style="@(ViewHelper.SetFullColourstyle(context.Colour, context.Accent))">
                            <MudText Typo="Typo.caption">@context.Number</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText>@context.TeamName</MudText>
                        </MudTd>
                        <MudTd Class="number-col-lg">
                            <MudText Typo="Typo.caption">@context.Power</MudText>
                        </MudTd>
                        @foreach (var runResult in context.RunValuesQ1)
                        {
                            <MudTd Class="number-col-lg">
                                <MudText Typo="Typo.caption">@runResult</MudText>
                            </MudTd>
                        }
                        <MudTd Class="number-col-lg">
                            <MudText Typo="Typo.caption">@context.MaxScoreQ1</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText>+@(context.GapQ1)</MudText>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudTabPanel>

            <MudTabPanel Text="Q2" Disabled="@(advancedQ1 != Model.AmountRuns)">
                <MudTable Items="@DriversInQ2.OrderBy(e => e.PositionQ2)" Dense="true" Class="extra-dense" id="q2-result-table">
                    <ToolBarContent>
                        <MudStack Row="true" AlignItems="AlignItems.Center" Class="mud-width-full">
                            <CountryFlag Code="@Model.Country" />
                            <MudText Typo="Typo.h6">@Model.Name - QUALIFYING Q2</MudText>
                            <MudSpacer />
                            <MudButtonGroup Variant="Variant.Outlined">
                                <ScreenshotButton TargetId="q2-result-table" />
                                @if (advancedQ2 != Model.AmountRuns)
                                {
                                    <MudButton OnClick="AdvanceQ2">Advance</MudButton>
                                }
                            </MudButtonGroup>
                        </MudStack>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>#</MudTh>
                        <MudTh Class="pa-0"></MudTh>
                        <MudTh>Driver</MudTh>
                        <MudTh>No.</MudTh>
                        <MudTh>Team</MudTh>
                        <MudTh>PWR</MudTh>
                        @for (int i = 1; i <= Model.AmountRuns; i++)
                        {
                            var j = i;
                            <MudTh>@j</MudTh>
                        }
                        <MudTh>Score</MudTh>
                        <MudTh>Gap</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd Style="@PositionCutoffStyles(context.PositionQ2, Model.QualyAmountQ3)">
                            <DriverPosition Number="@(context.PositionQ2)" Colour="@(context.Colour)" Accent="@(context.Accent)" />
                        </MudTd>
                        <MudTd Class="pa-0">
                            <span class="smol-accent" style="@(ViewHelper.SetFullColourstyle(context.Colour, context.Accent))"></span>
                        </MudTd>
                        <MudTd>
                            <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.body1">@context.FirstName</MudText>
                                <MudText Typo="Typo.button">@context.LastName</MudText>
                                <MudSpacer />
                                <CountryFlag Code="@context.Nationality" Size="FlagSize.Small" />
                            </MudStack>
                        </MudTd>
                        <MudTd Class="number-col" Style="@(ViewHelper.SetFullColourstyle(context.Colour, context.Accent))">
                            <MudText Typo="Typo.caption">@context.Number</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText>@context.TeamName</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText Typo="Typo.caption">@context.Power</MudText>
                        </MudTd>
                        @foreach (var runResult in context.RunValuesQ2)
                        {
                            <MudTd>
                                <MudText Typo="Typo.caption">@runResult</MudText>
                            </MudTd>
                        }
                        <MudTd>
                            <MudText Typo="Typo.caption">@context.MaxScoreQ2</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText>+@(context.GapQ2)</MudText>
                            </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudTabPanel>

            <MudTabPanel Text="Q3" Disabled="@(advancedQ2 != Model.AmountRuns)">
                <MudTable Items="@DriversInQ3.OrderBy(e => e.PositionQ3)" Dense="true" Class="extra-dense" id="q3-result-table">
                    <ToolBarContent>
                        <MudStack Row="true" AlignItems="AlignItems.Center" Class="mud-width-full">
                            <CountryFlag Code="@Model.Country" />
                            <MudText Typo="Typo.h6">@Model.Name - QUALIFYING Q3</MudText>
                            <MudSpacer />
                            <MudButtonGroup Variant="Variant.Outlined">
                                <ScreenshotButton TargetId="q3-result-table" />
                                @if (advancedQ3 == Model.AmountRuns)
                                {
                                    <MudButton Variant="Variant.Outlined" OnClick="Finish">Finish</MudButton>
                                }
                                else
                                {
                                    <MudButton Variant="Variant.Outlined" OnClick="AdvanceQ3">Advance</MudButton>
                                }
                            </MudButtonGroup>
                        </MudStack>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>#</MudTh>
                        <MudTh Class="pa-0"></MudTh>
                        <MudTh>Driver</MudTh>
                        <MudTh>No.</MudTh>
                        <MudTh>Team</MudTh>
                        <MudTh>PWR</MudTh>
                        @for (int i = 1; i <= Model.AmountRuns; i++)
                        {
                            var j = i;
                            <MudTh>@j</MudTh>
                        }
                        <MudTh>Score</MudTh>
                        <MudTh>Gap</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudText Typo="Typo.h6" Style="@(ViewHelper.SetTextNumberStyle(context.Colour, context.Accent))">
                                <DriverPosition Number="@(context.PositionQ3)" Colour="@(context.Colour)" Accent="@(context.Accent)" />
                            </MudText>
                        </MudTd>
                        <MudTd Class="pa-0">
                            <span class="smol-accent" style="@(ViewHelper.SetFullColourstyle(context.Colour, context.Accent))"></span>
                        </MudTd>
                        <MudTd>
                            <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.body1">@context.FirstName</MudText>
                                <MudText Typo="Typo.button">@context.LastName</MudText>
                                <MudSpacer />
                                <CountryFlag Code="@context.Nationality" Size="FlagSize.Small" />
                            </MudStack>
                        </MudTd>
                        <MudTd Class="number-col" Style="@(ViewHelper.SetFullColourstyle(context.Colour, context.Accent))">
                            <MudText Typo="Typo.caption">@context.Number</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText>@context.TeamName</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText Typo="Typo.caption">@context.Power</MudText>
                        </MudTd>
                        @foreach (var runResult in context.RunValuesQ3)
                        {
                            <MudTd>
                                <MudText Typo="Typo.caption">@runResult</MudText>
                            </MudTd>
                        }
                        <MudTd>
                            <MudText Typo="Typo.caption">@context.MaxScoreQ3</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText>+@(context.GapQ3)</MudText>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudTabPanel>
        </MudTabs>
    }
</MudContainer>

@code {
    [Parameter] public long RaceId { get; set; }

    public QualifyingModel Model { get; set; }

    // big ass hmm about doing it like this tbh
    private List<QualifyingDriver> DriversInQ1 { get; set; } = new();
    private List<QualifyingDriver> DriversInQ2 { get; set; } = new();
    private List<QualifyingDriver> DriversInQ3 { get; set; } = new();

    // Two ways to do this: three different racedriver lists for each session
    // Alternatively make a custom class which has an identifier for which session the values are (ARE WHAT?)

    private bool loading = true;
    private int advancedQ1, advancedQ2, advancedQ3 = 0;

    double gapMarge;

    protected override async Task OnInitializedAsync()
    {
        Model = await _raceService.RetrieveQualifyingModel(RaceId);

        foreach (var driver in Model.QualifyingDrivers)
            DriversInQ1.Add(driver);

        gapMarge = _config.Value.GapMarge;

        loading = false;
    }

    private void AdvanceQ1()
    {
        var positionIndex = 0;

        foreach (var driver in DriversInQ1)
        {
            driver.RunValuesQ1[advancedQ1] = driver.GetQualifyingResult(Model.QualyRng);
        }

        var highestScore = DriversInQ1.SelectMany(e => e.RunValuesQ1).Max();

        foreach (var driver in DriversInQ1.OrderByDescending(e => e.MaxScoreQ1))
        {
            driver.Position = ++positionIndex;
            driver.PositionQ1 = positionIndex;
            driver.GapQ1 = Math.Round(((highestScore - driver.MaxScoreQ1) * gapMarge), 2);
        }

        advancedQ1++;

        if (advancedQ1 == Model.AmountRuns)
        {
            foreach (var driver in DriversInQ1.OrderBy(e => e.PositionQ1).Take(Model.QualyAmountQ2))
                DriversInQ2.Add(driver);
        }
    }

    private void AdvanceQ2()
    {
        var positionIndex = 0;

        foreach (var driver in DriversInQ2)
        {
            var qualifyingResult = driver.GetQualifyingResult(Model.QualyRng);
            driver.RunValuesQ2[advancedQ2] = qualifyingResult;
        }

        var highestScore = DriversInQ2.SelectMany(e => e.RunValuesQ2).Max();

        foreach (var driver in DriversInQ2.OrderByDescending(e => e.MaxScoreQ2))
        {
            driver.Position = ++positionIndex;
            driver.PositionQ2 = positionIndex;
            driver.GapQ2 = Math.Round(((highestScore - driver.MaxScoreQ2) * gapMarge), 2);
        }

        advancedQ2++;

        if (advancedQ2 == Model.AmountRuns)
        {
            foreach (var driver in DriversInQ2.OrderBy(e => e.PositionQ2).Take(Model.QualyAmountQ3))
                DriversInQ3.Add(driver);
        }
    }

    private void AdvanceQ3()
    {
        var positionIndex = 0;

        foreach (var driver in DriversInQ3)
            driver.RunValuesQ3[advancedQ3] = driver.GetQualifyingResult(Model.QualyRng);

        var highestScore = DriversInQ3.SelectMany(e => e.RunValuesQ3).Max();

        foreach (var driver in DriversInQ3.OrderByDescending(e => e.MaxScoreQ3))
        {
            driver.Position = ++positionIndex;
            driver.PositionQ3 = positionIndex;
            driver.GapQ3 = Math.Round(((highestScore - driver.MaxScoreQ3) * gapMarge), 2);
        }

        advancedQ3++;
    }

    private string PositionCutoffStyles(int position, int sessionCutoff, int? raceCutoff = null)
    {
        if (raceCutoff.HasValue && position > raceCutoff)
            return "background-color: mediumpurple";

        if (position > sessionCutoff)
            return "background-color: red;";

        return string.Empty;
    }

    private async Task Finish()
    {
        // Check for the possible penalties and apply assigning new positions
        int positionIndexer = 0;
        var positionResults = Model.QualifyingDrivers
            .OrderBy(e => e.PenaltyPosition())
            .ToDictionary(e => e.ResultId, e => ++positionIndexer);

        await _raceService.PersistGridPositions(positionResults, RaceId, Model.MaximumRaceDrivers);
        await _raceService.ConsumePenalties(Model.PenaltiesToConsume, RaceId);

        _nav.NavigateTo("/raceweek/" + RaceId);
    }
}
