@page "/qualifying/{RaceId:long}"

@inject RaceService _raceService
@inject NavigationManager Nav

@if (loading)
{
    <MudAlert Severity="Severity.Warning">This bad boi is still loading, some patience please!</MudAlert>
}
else
{
    <MudTabs>
        <MudTabPanel Text="Q1">
            <MudTable Items="@QualifyingModel.QualifyingDrivers.OrderByDescending(e => e.MaxScoreQ1)">
                <ToolBarContent>
                    <MudText>
                        <CountryFlag Code="@QualifyingModel.Country" />
                        @QualifyingModel.Name - QUALIFYING
                    </MudText>
                    <MudSpacer />
                    @if (advancedRuns == QualifyingModel.AmountRuns)
                    {
                        <MudButton Variant="Variant.Outlined" OnClick="Finish">Finish</MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Outlined" OnClick="Advance">Advance</MudButton>
                    }
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>#</MudTh>
                    <MudTh>Driver</MudTh>
                    <MudTh>Num</MudTh>
                    <MudTh>Team</MudTh>
                    <MudTh>PWR</MudTh>
                    @for (int i = 1; i <= QualifyingModel.AmountRuns; i++)
                    {
                        var j = i;
                        <MudTh>@j</MudTh>
                    }
                    <MudTh>Score</MudTh>
                    <MudTh>Gap</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@(++indexer)</MudTd>
                    <MudTd>@context.FullName</MudTd>
                    <MudTd>@context.Number</MudTd>
                    <MudTd>@context.TeamName</MudTd>
                    <MudTd>@context.Power</MudTd>
                    @foreach (var runResult in context.RunValuesQ1)
                    {
                        <MudTd>@runResult</MudTd>
                    }
                    <MudTd>@context.MaxScoreQ1</MudTd>
                    <MudTd>@GapToLeader(context.MaxScoreQ1)</MudTd>
                </RowTemplate>
            </MudTable>
        </MudTabPanel>
        <MudTabPanel Text="Q2">
            <MudTable Items="@QualifyingModel.QualifyingDrivers.OrderByDescending(e => e.MaxScoreQ2)">
                <ToolBarContent>
                    <MudText>
                        <CountryFlag Code="@QualifyingModel.Country" />
                        @QualifyingModel.Name - QUALIFYING
                    </MudText>
                    <MudSpacer />
                    @if (advancedRuns == QualifyingModel.AmountRuns)
                    {
                        <MudButton Variant="Variant.Outlined" OnClick="Finish">Finish</MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Outlined" OnClick="Advance">Advance</MudButton>
                    }
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>#</MudTh>
                    <MudTh>Driver</MudTh>
                    <MudTh>Num</MudTh>
                    <MudTh>Team</MudTh>
                    <MudTh>PWR</MudTh>
                    @for (int i = 1; i <= QualifyingModel.AmountRuns; i++)
                    {
                        var j = i;
                        <MudTh>@j</MudTh>
                    }
                    <MudTh>Score</MudTh>
                    <MudTh>Gap</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@(++indexer)</MudTd>
                        <MudTd>@context.FullName</MudTd>
                        <MudTd>@context.Number</MudTd>
                        <MudTd>@context.TeamName</MudTd>
                        <MudTd>@context.Power</MudTd>
                        @foreach (var runResult in context.RunValuesQ1)
                    {
                        <MudTd>@runResult</MudTd>
                    }
                    <MudTd>@context.MaxScoreQ1</MudTd>
                    <MudTd>@GapToLeader(context.MaxScoreQ1)</MudTd>
                </RowTemplate>
            </MudTable>
        </MudTabPanel>
        <MudTabPanel Text="Q3">
            <MudTable Items="@QualifyingModel.QualifyingDrivers.OrderByDescending(e => e.MaxScoreQ3)">
                <ToolBarContent>
                    <MudText>
                        <CountryFlag Code="@QualifyingModel.Country" />
                        @QualifyingModel.Name - QUALIFYING
                    </MudText>
                    <MudSpacer />
                    @if (advancedRuns == QualifyingModel.AmountRuns)
                    {
                        <MudButton Variant="Variant.Outlined" OnClick="Finish">Finish</MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Outlined" OnClick="Advance">Advance</MudButton>
                    }
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>#</MudTh>
                    <MudTh>Driver</MudTh>
                    <MudTh>Num</MudTh>
                    <MudTh>Team</MudTh>
                    <MudTh>PWR</MudTh>
                    @for (int i = 1; i <= QualifyingModel.AmountRuns; i++)
                    {
                        var j = i;
                        <MudTh>@j</MudTh>
                    }
                    <MudTh>Score</MudTh>
                    <MudTh>Gap</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@(++indexer)</MudTd>
                    <MudTd>@context.FullName</MudTd>
                    <MudTd>@context.Number</MudTd>
                    <MudTd>@context.TeamName</MudTd>
                    <MudTd>@context.Power</MudTd>
                    @foreach (var runResult in context.RunValuesQ3)
                    {
                        <MudTd>@runResult</MudTd>
                    }
                    <MudTd>@context.MaxScoreQ3</MudTd>
                    <MudTd>@GapToLeader(context.MaxScoreQ3)</MudTd>
                </RowTemplate>
            </MudTable>
        </MudTabPanel>
    </MudTabs>
}

@code {
    [Parameter] public long RaceId { get; set; }

    public QualifyingModel QualifyingModel { get; set; }

    // Two ways to do this: three different racedriver lists for each session
    // Alternatively make a custom class which has an identifier for which session the values are

    private bool loading = true;
    private int indexer = 0;
    private int advancedRuns = 0;
    private int maxRng = 30;
    private int highestScore = 0;
    private double gapMarge = 0.08;

    protected override async Task OnInitializedAsync()
    {
        QualifyingModel = await _raceService.RetrieveQualifyingModel(RaceId);

        loading = false;
    }

    private string GapToLeader(int score)
    {
        double gap = ((highestScore - score) * gapMarge);

        return $"+{Math.Round(gap, 2)}";
    }

    private void Advance()
    {
        indexer = 0;

        foreach (var driver in QualifyingModel.QualifyingDrivers)
        {
            var randomResult = driver.Power + NumberHelper.RandomInt(maxRng);
            driver.RunValuesQ1[advancedRuns] = randomResult;

            if (randomResult > highestScore)
                highestScore = randomResult;
        }

        advancedRuns++;
    }

    private async Task Finish()
    {
        var positionResults = new Dictionary<long, int>();
        var position = 0;

        foreach (var driver in QualifyingModel.QualifyingDrivers.OrderByDescending(e => e.MaxScoreQ1))
            positionResults.Add(driver.ResultId, ++position);

        await _raceService.PersistGridPositions(positionResults, RaceId);

        Nav.NavigateTo("/raceweek/" + RaceId);
    }
}
