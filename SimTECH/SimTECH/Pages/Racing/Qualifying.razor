@if (!loading)
{
    <MudPaper MinHeight="60px">
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-2">
            <CountryFlag Code="@raceCountry" />
            <MudText Typo="Typo.h5">@raceName</MudText>

            <MudSpacer />

            <ScreenshotButton TargetId="qualy-table" />
            <MudButtonGroup Color="Color.Tertiary" Variant="Variant.Outlined">
                @if (!QualySession.IsFinished)
                {
                    @if (advancedRuns == amountRuns)
                    {
                        <MudButton OnClick="Finish">Finish</MudButton>
                    }
                    else
                    {
                        <MudButton OnClick="Advance">Advance</MudButton>
                    }
                }
            </MudButtonGroup>
        </MudStack>
    </MudPaper>
    <MudPaper Elevation="25" id="qualy-table">
        <CommonSession Drivers="@qualyDrivers"
                       AmountRuns="@amountRuns"
                       EntryCutoff="@entryCutoff"
                       ProgressCutoff="@progressCutoff" />
    </MudPaper>
}

@code {
    [CascadingParameter] public RaweCeekModel RaweCeek { get; set; }

    [Parameter] public QualifyingSession QualySession { get; set; } = new();
    [Parameter] public int MaximumAllowed { get; set; } = int.MaxValue;
    [Parameter] public SimConfig Config { get; set; } = new();
    [Parameter] public EventCallback<int> OnFinish { get; set; }

    private List<SessionDriver> qualyDrivers = new();

    bool loading = true;
    string raceName = string.Empty;
    Country raceCountry = Constants.DefaultCountry;
    int amountRuns;
    int advancedRuns;
    int qualyRng;
    int entryCutoff;
    int progressCutoff;
    int highestScore;

    double gapMarge;

    protected override void OnInitialized()
    {
        raceName = $"{RaweCeek.Race.Name} - QUALIFYING {QualySession.SessionIndex}";
        raceCountry = RaweCeek.Race.Track.Country;
        amountRuns = RaweCeek.Season.RunAmountSession;
        qualyRng = RaweCeek.Season.QualifyingRNG;
        entryCutoff = RaweCeek.Season.MaximumDriversInRace;
        progressCutoff = QualySession.ProgressionCutoff;

        if (QualySession.IsFinished)
            highestScore = QualySession.SessionScores.SelectMany(e => e.Scores).Max();

        gapMarge = Config.GapMarge;
    }

    protected override void OnParametersSet()
    {
        loading = true;

        qualyDrivers.Clear();

        foreach (var driver in RaweCeek.RaweCeekDrivers.OrderBy(e => e.Grid).Take(QualySession.AllowedEntries))
        {
            var mappedDriver = driver.MapToSessionDriver(amountRuns);
            mappedDriver.PenaltyPunish = driver.Penalty.GetValueOrDefault();

            var driverScore = QualySession.SessionScores.FirstOrDefault(e => e.ResultId == driver.ResultId);

            if (driverScore?.Scores?.Any() ?? false)
            {
                mappedDriver.Scores = driverScore.Scores;
                mappedDriver.Position = driverScore.Position;

                if (mappedDriver.Position == 1)
                    mappedDriver.GapAbove = "LEADER";
                else
                    mappedDriver.GapAbove = "+" + (Math.Round((highestScore - mappedDriver.MaxScore()) * gapMarge, 2)).ToString("F2");
            }

            qualyDrivers.Add(mappedDriver);
        }

        loading = false;
    }

    private void Advance()
    {
        var positionIndex = 0;

        foreach (var driver in qualyDrivers)
        {
            var result = driver.Power + NumberHelper.RandomInt(qualyRng);
            driver.Scores[advancedRuns] = result;
        }

        foreach (var driver in qualyDrivers.OrderByDescending(e => e.MaxScore()))
        {
            driver.Position = ++positionIndex;

            if (driver.Position == 1)
                driver.GapAbove = "LEADER";
            else
                driver.GapAbove = "+" + (Math.Round((highestScore - driver.MaxScore()) * gapMarge, 2)).ToString("F2");
        }

        advancedRuns++;
    }

    private async Task Finish()
    {
        var newScores = qualyDrivers.Select(e => new QualifyingScore
            {
                Index = QualySession.SessionIndex,
                Scores = e.Scores,
                Position = e.Position,
                RaceId = RaweCeek.Race.Id,
                ResultId = e.ResultId,

                PenaltyPunish = e.PenaltyPunish
            })
            .ToList();

        QualySession.SessionScores.AddRange(newScores);

        await OnFinish.InvokeAsync(QualySession.SessionIndex);
    }
}
