<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (!loading)
    {
        <MudPaper MinHeight="60px">
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">
                <MudButtonGroup Color="Color.Tertiary" Variant="Variant.Outlined">
                    @if (!tempIsFinished)
                    {
                        @if (advancedRuns == amountRuns)
                        {
                            <MudButton OnClick="Finish">Finish</MudButton>
                        }
                        else
                        {
                            <MudButton OnClick="Advance">Advance</MudButton>
                        }
                    }
                </MudButtonGroup>
            </MudStack>
        </MudPaper>
        <MudPaper>
            <CommonSession Drivers="@qualyDrivers"
                           Title="@raceName"
                           Country="@raceCountry"
                           AmountRuns="@amountRuns" />
        </MudPaper>
    }
</MudContainer>

@code {
    [CascadingParameter] public RaweCeekModel RaweCeek { get; set; }

    [Parameter] public int QualifyingIndex { get; set; }
    [Parameter] public List<QualifyingScore> QualifyingScores { get; set; } = new();
    [Parameter] public int MaximumAllowed { get; set; } = 100;
    [Parameter] public SimConfig Config { get; set; } = new();
    [Parameter] public EventCallback<int> OnFinish { get; set; }

    private List<SessionDriver> qualyDrivers = new();

    bool loading = true;
    bool tempIsFinished = false;
    string raceName = string.Empty;
    Country raceCountry = Constants.DefaultCountry;
    int amountRuns;
    int qualyRng;

    int advancedRuns;

    double gapMarge;

    protected override void OnInitialized()
    {
        gapMarge = Config.GapMarge;
        tempIsFinished = !OnFinish.HasDelegate;
    }

    protected override void OnParametersSet()
    {
        loading = true;

        qualyDrivers.Clear();

        raceName = $"Qualifying {QualifyingIndex}";
        raceCountry = RaweCeek.Race.Track.Country;
        amountRuns = RaweCeek.Season.RunAmountSession;
        qualyRng = RaweCeek.Season.QualifyingRNG;

        var currentSessionScores = QualifyingScores.Where(e => e.Index == QualifyingIndex).ToList();

        if (currentSessionScores.Any())
            advancedRuns = currentSessionScores.Select(e => e.Index).Max();

        foreach (var driver in RaweCeek.RaweCeekDrivers.OrderBy(e => e.Position).Take(MaximumAllowed))
        {
            var mappedDriver = driver.MapToSessionDriver(amountRuns);
            mappedDriver.PenaltyPunish = driver.Penalty.GetValueOrDefault();

            var driverScore = currentSessionScores.FirstOrDefault(e => 
                e.ResultId == driver.ResultId && e.Index == QualifyingIndex);

            if (driverScore != null && driverScore.Scores != null)
            {
                mappedDriver.Scores = driverScore.Scores;
                mappedDriver.Position = driverScore.Position;
            }

            qualyDrivers.Add(mappedDriver);
        }

        loading = false;
    }

    private void Advance()
    {
        var positionIndex = 0;

        foreach (var driver in qualyDrivers)
        {
            var result = driver.Power + NumberHelper.RandomInt(qualyRng);
            driver.Scores[advancedRuns] = result;
        }

        foreach (var driver in qualyDrivers.OrderByDescending(e => e.MaxScore()))
        {
            driver.Position = ++positionIndex;
        }

        advancedRuns++;
    }

    private async Task Finish()
    {
        var newScores = qualyDrivers.Select(e => new QualifyingScore
            {
                Index = QualifyingIndex,
                Scores = e.Scores,
                Position = e.Position,
                RaceId = RaweCeek.Race.Id,
                ResultId = e.ResultId,

                PenaltyPunish = e.PenaltyPunish
            })
            .ToList();

        QualifyingScores.AddRange(newScores);

        await OnFinish.InvokeAsync(QualifyingIndex);
        tempIsFinished = true;
    }
}
