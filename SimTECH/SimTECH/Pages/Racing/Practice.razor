@page "/practice/{RaceId:long}"

@inject RaceService _raceService
@inject NavigationManager _nav

@if (loading)
{
    <MudAlert Severity="Severity.Warning">This bad boi is still loading, some patience please!</MudAlert>
}
else
{
    <MudContainer>
        <MudTable Items="@Model.PracticeDrivers.OrderBy(e => e.Position)">
            <ToolBarContent>
                <MudText Typo="Typo.h6">
                    <CountryFlag Code="@Model.Country" />
                    @Model.Name - PRACTICE
                </MudText>
                <MudSpacer />
                @if (advancedRuns == Model.AmountRuns)
                {
                    <MudButton Variant="Variant.Outlined" OnClick="Finish">Finish</MudButton>
                }
                else
                {
                    <MudButton Variant="Variant.Outlined" OnClick="Advance">Advance</MudButton>
                }
            </ToolBarContent>
            <HeaderContent>
                <MudTh>#</MudTh>
                <MudTh Class="number-col">No.</MudTh>
                <MudTh>Driver</MudTh>
                <MudTh>Team</MudTh>
                <MudTh>PWR</MudTh>
                @for (int i = 1; i <= Model.AmountRuns; i++)
                {
                    var j = i;
                    <MudTh Class="number-col">@j</MudTh>
                }
                <MudTh>Score</MudTh>
                <MudTh>Gap</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Position</MudTd>
                <MudTd Class="number-col" Style="@(ViewHelper.SetFullColourstyle(context.Colour, context.Accent))">
                    @context.Number
                </MudTd>
                <MudTd>@context.FullName</MudTd>
                <MudTd Style="@(ViewHelper.SetBorderLeftStyle(context.Colour))">
                    @context.TeamName
                </MudTd>
                <MudTd>@context.Power</MudTd>
                @foreach (var runResult in context.RunValues)
                {
                    <MudTd Class="number-col">@runResult</MudTd>
                }
                <MudTd>@context.MaxScore</MudTd>
                <MudTd>+@(context.TimedGap(Model.GapMarge))</MudTd>
            </RowTemplate>
        </MudTable>
    </MudContainer>
}

@code {
    [Parameter] public long RaceId { get; set; }

    public PracticeModel Model { get; set; }

    bool loading = true;
    int advancedRuns = 0;
    int highestScore = 0;

    protected override async Task OnInitializedAsync()
    {
        Model = await _raceService.RetrievePracticeModel(RaceId);

        loading = false;
    }

    private void Advance()
    {
        var positionIndex = 0;

        foreach (var driver in Model.PracticeDrivers)
        {
            var result = driver.Power + NumberHelper.RandomInt(Model.PracticeRng);
            driver.RunValues[advancedRuns] = result;

            if (result > highestScore)
                highestScore = result;
        }

        foreach (var driver in Model.PracticeDrivers)
        {
            driver.Gap = highestScore - driver.MaxScore;
            driver.Position = ++positionIndex;
        }

        advancedRuns++;
    }

    private async Task Finish()
    {
        var positionResults = Model.PracticeDrivers.ToDictionary(e => e.ResultId, e => e.Position);

        await _raceService.PersistGridPositions(positionResults);

        _nav.NavigateTo("/raceweek/" + RaceId);
    }
}
