@page "/practice/{RaceId:long}"

@inject RaceService _raceService
@inject NavigationManager _nav

@if (loading)
{
    <MudAlert Severity="Severity.Warning">This bad boi is still loading, some patience please!</MudAlert>
}
else
{
    <MudContainer>
        <MudTable Items="@Model.PracticeDrivers.OrderBy(e => e.Position)" id="practice-table" Dense="true" Class="extra-dense">
            <ToolBarContent>
                <MudStack Row="true" AlignItems="AlignItems.Center" Class="mud-width-full">
                    <CountryFlag Code="@Model.Country" />
                    <MudText Typo="Typo.h6">@Model.Name - PRACTICE</MudText>
                    <MudSpacer />
                    <MudButtonGroup Variant="Variant.Outlined">
                        <ScreenshotButton TargetId="practice-table" />
                        @if (advancedRuns == Model.AmountRuns)
                        {
                            <MudButton OnClick="Finish">Finish</MudButton>
                        }
                        else
                        {
                            <MudButton OnClick="Advance">Advance</MudButton>
                        }
                    </MudButtonGroup>
                </MudStack>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>#</MudTh>
                <MudTh Class="pa-0"></MudTh>
                <MudTh>Driver</MudTh>
                <MudTh Class="number-col">No.</MudTh>
                <MudTh>Team</MudTh>
                <MudTh Class="number-col">PWR</MudTh>
                @for (int i = 1; i <= Model.AmountRuns; i++)
                {
                    var j = i;
                    <MudTh Class="number-col">@j</MudTh>
                }
                <MudTh Class="number-col">Score</MudTh>
                <MudTh>Gap</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudText Typo="Typo.h6" Style="@(ViewHelper.SetTextNumberStyle(context.Colour, context.Accent))">@context.Position</MudText>
                </MudTd>
                <MudTd Class="pa-0">
                    <span class="smol-accent" style="@(ViewHelper.SetFullColourstyle(context.Colour, context.Accent))"></span>
                </MudTd>
                <MudTd>
                    <MudStack Row="true" Spacing="1" Class="align-center">
                        <MudText Typo="Typo.body1">@context.FirstName</MudText>
                        <MudText Typo="Typo.button">@context.LastName</MudText>
                        <MudSpacer />
                        <CountryFlag Code="@context.Nationality" Size="FlagSize.Small" />
                    </MudStack>
                </MudTd>
                <MudTd Class="number-col" Style="@(ViewHelper.SetFullColourstyle(context.Colour, context.Accent))">
                    <MudText Typo="Typo.caption">@context.Number</MudText>
                </MudTd>
                <MudTd Style="@(ViewHelper.SetBorderLeftStyle(context.Colour))">
                    <MudText>@context.TeamName</MudText>
                </MudTd>
                <MudTd>
                    <MudText Typo="Typo.caption">@context.Power</MudText>
                </MudTd>
                @foreach (var runResult in context.RunValues)
                {
                    <MudTd Class="number-col">
                        <MudText Typo="Typo.caption">@runResult</MudText>
                    </MudTd>
                }
                <MudTd Class="number-col">
                    <MudText Typo="Typo.caption">@context.MaxScore</MudText>
                </MudTd>
                <MudTd>
                    <MudText>+@(Math.Round((highestScore - context.MaxScore) * Model.GapMarge, 2))</MudText>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudContainer>
}

@code {
    [Parameter] public long RaceId { get; set; }

    public PracticeModel Model { get; set; }

    bool loading = true;
    int advancedRuns = 0;
    int highestScore = 0;

    protected override async Task OnInitializedAsync()
    {
        Model = await _raceService.RetrievePracticeModel(RaceId);

        loading = false;
    }

    private void Advance()
    {
        var positionIndex = 0;

        foreach (var driver in Model.PracticeDrivers)
        {
            var result = driver.Power + NumberHelper.RandomInt(Model.PracticeRng);
            driver.RunValues[advancedRuns] = result;

            if (result > highestScore)
                highestScore = result;
        }

        foreach (var driver in Model.PracticeDrivers.OrderByDescending(e => e.MaxScore))
        {
            driver.Position = ++positionIndex;
        }

        advancedRuns++;
    }

    private async Task Finish()
    {
        var positionResults = Model.PracticeDrivers.ToDictionary(e => e.ResultId, e => e.Position);

        await _raceService.PersistGridPositions(positionResults);

        _nav.NavigateTo("/raceweek/" + RaceId);
    }
}
