<div id="practice-table">
    @if (!loading)
    {
        <MudPaper MinHeight="60px">
            <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-2">
                <CountryFlag Code="@raceCountry" />
                <MudText Typo="Typo.h5">@raceName</MudText>

                <MudSpacer />

                <MudButtonGroup Color="Color.Tertiary" Variant="Variant.Outlined">
                    <ScreenshotButton TargetId="practice-table" Class="btn-md" />
                    @if (!PracticeSession.IsFinished)
                    {
                        @if (advancedRuns == amountRuns)
                        {
                            <MudButton OnClick="Finish" Class="btn-md">Finish</MudButton>
                        }
                        else
                        {
                            <MudButton OnClick="Advance" Class="btn-md">Advance</MudButton>
                        }
                    }
                </MudButtonGroup>
            </MudStack>
        </MudPaper>
        <MudPaper>
            <CommonSession Drivers="@practiceDrivers"
                           AmountRuns="@amountRuns" />
        </MudPaper>
    }
</div>

@code {
    [CascadingParameter] public RaweCeekModel RaweCeek { get; set; }

    [Parameter] public PracticeSession PracticeSession { get; set; } = new();
    [Parameter] public EventCallback<int> OnFinish { get; set; }

    private List<SessionDriver> practiceDrivers = new();

    bool loading = true;
    string raceName = string.Empty;
    Country raceCountry = Constants.DefaultCountry;
    int amountRuns;
    int practiceRng;
    int advancedRuns;
    int highestScore;

    double gapMarge;

    protected override void OnInitialized()
    {
        loading = true;

        gapMarge = RaweCeek.GapMarge / 2;

        raceName = $"{RaweCeek.Race.Name} - PRACTICE {PracticeSession.SessionIndex}";
        raceCountry = RaweCeek.Race.Track.Country;
        amountRuns = RaweCeek.Season.RunAmountSession;
        practiceRng = RaweCeek.Season.QualifyingRNG;

        if (PracticeSession.IsFinished)
            highestScore = PracticeSession.SessionScores.SelectMany(e => e.Scores).Max();

        foreach (var driver in RaweCeek.RaweCeekDrivers)
        {
            var mappedDriver = driver.MapToSessionDriver(amountRuns);

            var driverScore = PracticeSession.SessionScores.FirstOrDefault(e => e.ResultId == driver.ResultId);

            if (driverScore?.Scores?.Any() ?? false)
            {
                mappedDriver.Scores = driverScore.Scores;
                mappedDriver.Position = driverScore.Position;

                if (mappedDriver.Position == 1)
                    mappedDriver.GapAbove = "LEADER";
                else
                    mappedDriver.GapAbove = "+" + (Math.Round((highestScore - mappedDriver.MaxScore()) * gapMarge, 2)).ToString("F2");
            }

            practiceDrivers.Add(mappedDriver);
        }

        loading = false;
    }

    private void Advance()
    {
        var positionIndex = 0;

        foreach (var driver in practiceDrivers)
        {
            var result = driver.Power + NumberHelper.RandomInt((practiceRng * -1), practiceRng);
            driver.Scores[advancedRuns] = result;

            if (result > highestScore)
                highestScore = result;
        }

        foreach (var driver in practiceDrivers.OrderByDescending(e => e.MaxScore()))
        {
            driver.Position = ++positionIndex;
            driver.GapAbove = "+" + (Math.Round((highestScore - driver.MaxScore()) * gapMarge, 2)).ToString("F2");
        }

        advancedRuns++;
    }

    private async Task Finish()
    {
        var newScores = practiceDrivers.Select(e => new PracticeScore
            {
                Index = PracticeSession.SessionIndex,
                Scores = e.Scores,
                Position = e.Position,
                RaceId = RaweCeek.Race.Id,
                ResultId = e.ResultId
            })
            .ToList();

        PracticeSession.SessionScores.AddRange(newScores);

        await OnFinish.InvokeAsync(PracticeSession.SessionIndex);
    }
}
