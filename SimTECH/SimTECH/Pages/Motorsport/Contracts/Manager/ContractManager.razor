@page "/contractmanager"

@using SimTECH.Pages.Motorsport.Contracts.Manager.Components

@inject ContractService _contractService
@inject LeagueService _leagueService
@inject DriverService _driverService
@inject TeamService _teamService
@inject BreadcrumbProvider _bread
@inject NavigationManager _nav
@inject ISnackbar _snack

<PageTitle>Contract manager</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
    <MudPaper MaxHeight="150px" Class="text-center">
        <MudText Typo="Typo.h3" Class="mx-auto">Manage contracts</MudText>

        @if (Leagues != null)
        {
            <ManagerSettings Leagues="@Leagues"
                             OnLoad="HandleSettingLoad"
                             @bind-SelectedLeagueId="leagueId"
                             @bind-OnlyActiveTeams="onlyTeams"
                             @bind-OnlyActiveDrivers="onlyDrivers"  />

            @if (isLoaded)
            {
                <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="SaveContracts" Class="pa-2 my-2">
                    Save
                </MudButton>
            }
        }
    </MudPaper>

    @if (isLoaded && EditableContracts.Any())
    {
        <MudPaper Elevation="10">
            <ManagerDropper Teams="@Teams"
                            @bind-EditableContracts="EditableContracts" />
        </MudPaper>
    }
</MudContainer>

@code {
    public List<League>? Leagues { get; set; }
    public List<Contract> Contracts { get; set; } = new();
    public List<Team> Teams { get; set; } = new();
    public List<EditContract> EditableContracts { get; set; } = new();

    private long leagueId;
    private bool onlyTeams;
    private bool onlyDrivers;
    private bool isLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        var existingLeagues = await _leagueService.GetLeagues();
        Leagues = existingLeagues.Where(e => e.Options.HasFlag(LeagueOptions.AllowContracting)).ToList();

        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: "/"),
            new BreadcrumbItem("Motorsport", href: "motorsport"),
            new BreadcrumbItem("Manager", href: "contractmanager", disabled: true),
        });
    }

    private async Task HandleSettingLoad()
    {
        List<Team> teams;
        if (onlyTeams)
            teams = await _teamService.GetLeagueTeams(leagueId);
        else
            teams = await _teamService.GetTeams();

        List<Driver> drivers;
        if (onlyDrivers)
            drivers = await _driverService.GetDriversFromLeague(leagueId);
        else
            drivers = await _driverService.GetDrivers();

        var leagueContracts = await _contractService.GetLeagueContracts(leagueId);

        var editableContracts = leagueContracts.Select(e => new EditContract(e)).ToList();
        foreach (var editable in editableContracts)
        {
            editable.Team = teams.Find(e => e.Id == editable.TeamId);
            editable.Driver = drivers.Find(e => e.Id == editable.DriverId);
        }

        foreach (var freeAgent in drivers.Where(e => !editableContracts.Select(c => c.DriverId).Contains(e.Id)))
        {
            var agentContract = new EditContract(null);
            agentContract.DriverId = freeAgent.Id;
            agentContract.Driver = freeAgent;
            agentContract.LeagueId = leagueId;
            agentContract.Duration = 1;

            editableContracts.Add(agentContract);
        }

        Teams = teams;
        EditableContracts = editableContracts
            .Where(e => e.Driver != null)
            .OrderBy(e => e.Driver!.FirstName)
            .ToList();

        isLoaded = true;
    }

    private async Task SaveContracts()
    {
        var saveableContracts = EditableContracts
                .Where(e => e.TeamId != 0 && e.Team is not null)
                .ToList();

        if (saveableContracts.Any(e => e.Duration == 0))
        {
            _snack.Add("Not all assigned contracts have an actual duration, is meaningless without ya?", Severity.Warning);
            return;
        }

        if (saveableContracts.Any(e => e.LeagueId == 0 || e.DriverId == 0))
        {
            _snack.Add("Somehow the new contracts have some invalid data, dunno man. Weird shit.", Severity.Error);
            return;
        }

        var addedContracts = saveableContracts.Select(e => e.Record).ToList();
        await _contractService.AddContracts(addedContracts);

        _nav.NavigateTo("motorsport");
    }
}
