@inject IDialogService _dialogService

<MudDialog>
    <TitleContent>
        <MudText>Single contract editor</MudText>
    </TitleContent>
    <DialogContent>
        <MudPaper MinHeight="300px" MinWidth="500px">
            @if (model.Id == 0)
            {
                <MudText>League</MudText>
                <MudSelect T="long" Label="League" Class="field-md" ValueChanged="OnLeagueSelected">
                    @foreach (var league in Leagues.OrderBy(e => e.Name))
                    {
                        <MudSelectItem Value="@league.Id">
                            <MudText>@league.Name</MudText>
                        </MudSelectItem>
                    }
                </MudSelect>

                <MudText>Team</MudText>
                <MudSelect T="long" @bind-Value="model.TeamId" Label="Team" Class="field-md">
                    @foreach (var team in Teams.OrderBy(e => e.Name))
                    {
                        <MudSelectItem Value="@team.Id">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-0">
                                <MudText>@team.Name</MudText>
                                <MudSpacer />
                                <CountryFlag Code="@team.Country" Size="ElementSize.Tiny" />
                            </MudStack>
                        </MudSelectItem>
                    }
                </MudSelect>

                @if (freeAgents != null)
                {
                    <MudText>Driver</MudText>
                    <MudSelect T="long" @bind-Value="model.DriverId" Label="Driver" Class="field-md">
                        @foreach (var driver in freeAgents.OrderBy(e => e.FirstName))
                        {
                            <MudSelectItem Value="@driver.Id">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-0">
                                    <MudText>@driver.FullName</MudText>
                                    <MudSpacer />
                                    <CountryFlag Code="@driver.Country" Size="ElementSize.Tiny" />
                                </MudStack>
                            </MudSelectItem>
                        }
                    </MudSelect>
                }
            }
            else
            {
                <MudText>LeagueId @model.LeagueId</MudText>
                <MudText>TeamId @model.TeamId</MudText>
                <MudText>DriverId @model.DriverId</MudText>
            }

            <MudDivider />

            <MudNumericField @bind-Value="@model.Duration" Label="Duration" Class="field-md" />
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? EditDialog { get; set; }

    [Parameter] public Contract? Contract { get; set; }
    [Parameter] public List<Contract> ActiveContracts { get; set; }
    [Parameter] public List<League> Leagues { get; set; }
    [Parameter] public List<Team> Teams { get; set; }
    [Parameter] public List<Driver> Drivers { get; set; }

    private EditContract model;
    private List<Driver>? freeAgents;

    protected override void OnInitialized()
    {
        model = new EditContract(Contract);
    }

    private void OnLeagueSelected(long leagueId)
    {
        model.LeagueId = leagueId;

        var signedDrivers = ActiveContracts
            .Where(e => e.LeagueId == leagueId)
            .Select(e => e.DriverId)
            .ToArray();

        freeAgents = Drivers.Where(e => !signedDrivers.Contains(e.Id)).ToList();
    }

    private async Task Submit()
    {
        if (!model.IsDirty)
            return;

        if (model.SetToZero)
        {
            // Don't save a new contract without a duration
            if (model.Id == 0)
                return;

            bool? confirm = await _dialogService.ShowMessageBox(
                "Warning",
                "Are you sure you want to break the contract of this driver?",
                yesText: "Jawöhl", cancelText: "Nein mann");

            if (confirm != true)
                return;
        }

        EditDialog?.Close(DialogResult.Ok(model.Record));
    }

    private void Cancel() => EditDialog?.Cancel();
}
