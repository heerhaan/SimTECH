@inject ContractService _contractService
@inject DriverService _driverService
@inject LeagueService _leagueService
@inject TeamService _teamService
@inject NavigationManager _nav
@inject IDialogService _dialogService

<MudPaper MinHeight="60px">
    <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4">
        <MudText Typo="Typo.h3">Contracts</MudText>
        <MudSpacer />
        <MudButtonGroup Variant="Variant.Outlined" Color="Color.Tertiary">
            <MudButton OnClick="GoToManager" Class="btn-md">Manager</MudButton>
            <MudButton OnClick="ToggleExpired" Class="btn-md">
                @(showingExpired ? "Active" : "Expired")
            </MudButton>
            <MudButton OnClick="AddItem" Class="btn-md">New</MudButton>
        </MudButtonGroup>
    </MudStack>
</MudPaper>
<MudDataGrid T="Contract" Items="@contracts" Dense="true">
    <Columns>
        <PropertyColumn Property="e => e!.League.Name" Title="League" />
        <PropertyColumn Property="e => e!.Team.Name" Title="Team" />
        <PropertyColumn Property="e => e!.Driver.FullName" Title="Driver" />
        <PropertyColumn Property="e => e!.Duration" />
        <TemplateColumn>
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                               Size="Size.Small"
                               OnClick="@(async () => await UpdateItem(context.Item))" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Contract" />
    </PagerContent>
</MudDataGrid>

@code {
    private List<Contract> contracts = new();

    private bool showingExpired = false;

    protected override async Task OnInitializedAsync()
    {
        contracts = await _contractService.GetExtendedContracts();
    }

    private async Task ToggleExpired()
    {
        if (showingExpired)
            contracts = await _contractService.GetExtendedContracts(false);
        else
            contracts = await _contractService.GetExtendedContracts(true);

        showingExpired = !showingExpired;
    }

    private async Task AddItem() => await UpdateItem(null);
    private async Task UpdateItem(Contract? item)
    {
        var leagues = (await _leagueService.GetLeagues()).Where(e => e.Options.HasFlag(LeagueOptions.AllowContracting)).ToList();
        var teams = await _teamService.GetTeams();
        var drivers = await _driverService.GetDrivers();

        var parameters = new DialogParameters
            {
                ["Contract"] = item,
                ["ActiveContracts"] = contracts,
                ["Leagues"] = leagues,
                ["Teams"] = teams,
                ["Drivers"] = drivers,
            };

        var dialog = await _dialogService.ShowAsync<ContractEditor>("Modify contract", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Contract updatedItem)
        {
            await _contractService.UpdateContract(updatedItem);
            contracts = await _contractService.GetExtendedContracts();
        }
    }

    private void GoToManager() => _nav.NavigateTo("contractmanager");
}
