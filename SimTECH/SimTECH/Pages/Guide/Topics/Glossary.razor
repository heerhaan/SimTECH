<MudText Typo="Typo.h6">Race</MudText>
<MudDivider Class="my-1" />

<MudTable T="GlossaryItem" Items="@GlossaryTerms.OrderBy(e => e.Term)" Dense="true">
    <HeaderContent>
        <MudTh>Term</MudTh>
        <MudTh>Explain</MudTh>
        <MudTh>Synonyms</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudText>@context.Term</MudText>
        </MudTd>
        <MudTd>
            <MudText Typo="Typo.body2">@context.Explain</MudText>
        </MudTd>
        <MudTd>
            <MudText>@(string.Join(", ", context.Synonyms))</MudText>
        </MudTd>
    </RowTemplate>
</MudTable>

<MudText Typo="Typo.subtitle1" Class="mt-2">Abbreviations</MudText>
<MudDivider Class="my-1" />

<MudSimpleTable>
    <thead>
        <tr>
            <th>Abbreviation</th>
            <th>Meaning</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var abb in Abbreviations.OrderBy(e => e.Key))
        {
            <tr>
                <td>@abb.Key</td>
                <td>@abb.Value</td>
            </tr>
        }
    </tbody>
</MudSimpleTable>

@code {
    private static readonly GlossaryItem[] GlossaryTerms = new GlossaryItem[]
        {
            new GlossaryItem("Advance",
                @"A single round of calculation for every driver during a race. Equivalent for a certain distance 
                traveled during a race (default is 10km).",
                "Calculation"),
            new GlossaryItem("Session",
                @"The sessions during a race week which occur before the race. 
                Usually refers to practice and qualifying."),
        };

    private static readonly Dictionary<string, string> Abbreviations = new()
    {
        { "CHA", "Chassis" },
        { "LB", "Life bonus" },
        { "PTS", "Points" },
        { "TGT", "Target" },
        { "ENG", "Engine" },
        { "PWR", "Power" },
        { "REL", "Reliability" },
        { "RNG", "Ask jesus for this" },
        { "STP", "Setup" },
        { "SUP", "Tyre supplier" },
        { "AER", "Aero" },
        { "POW", "Powertrain" },
    };

    internal class GlossaryItem
    {
        internal GlossaryItem(string? term, string? explain, params string[] synonyms)
        {
            Term = term ?? string.Empty;
            Explain = explain ?? string.Empty;
            Synonyms = synonyms ?? Array.Empty<string>();
        }

        public string Term { get; set; }
        public string Explain { get; set; }
        public string[] Synonyms { get; set; }
    }
}