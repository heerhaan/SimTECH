@inject IOptions<SimConfig> _config

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">Tyre editor</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField T="string" @bind-Value="model.Name" Label="Name" Class="field-md" />
        <MudColorPicker @bind-Text="model.Colour" Label="Colour" Placeholder="Select colour pls" Class="field-md" />

        <MudNumericField T="int" @bind-Value="model.LifeBonus" Label="Life Bonus" Class="field-md" />
        <MudNumericField T="int" @bind-Value="model.MinimumLife" Label="Minimum life" Class="field-md" />
        <MudNumericField T="int" @bind-Value="model.PitWhenBelow" Label="Pit when life is below" Class="field-md" />

        <MudStack Row="true" Justify="Justify.FlexStart" Spacing="4">
            <MudNumericField T="int" @bind-Value="model.WearMin" Min="0" Label="Minimum wear" Class="field-sm" />
            <MudNumericField T="int" @bind-Value="model.WearMax" Min="@model.WearMin" Label="Maximum wear" Class="field-sm" />
        </MudStack>

        <MudStack Row="true" Justify="Justify.FlexStart" Spacing="4">
            <MudNumericField T="int" @bind-Value="model.DistanceMin" Min="0" Label="DistanceMin" Class="field-sm" />
            <MudNumericField T="int" @bind-Value="model.DistanceMax" Min="@model.DistanceMin" Label="DistanceMax" Class="field-sm" />
        </MudStack>

        <MudSwitch @bind-Checked="model.ForWet" Label="For wet conditions" Color="Color.Tertiary" />

        <MudStack Row="true" Justify="Justify.SpaceBetween">
            <MudPaper Elevation="5" Class="text-center px-2 py-1">
                <MudText Typo="Typo.subtitle2">Preview tyre</MudText>
                <MudDivider />
                @if (!string.IsNullOrEmpty(model.Name))
                {
                    <TyreElement Colour="@model.Colour">
                        @model.Name.ElementAt(0)
                    </TyreElement>
                }
            </MudPaper>
            <MudPaper Elevation="5" Class="text-center px-2 py-1">
                <MudText Typo="Typo.subtitle2">AVG length to 0</MudText>
                <MudDivider />
                <MudText Typo="Typo.body2">@(model.ExpectedLength(advanceLength))km</MudText>
            </MudPaper>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? TyreDialog { get; set; }
    [Parameter] public Tyre? Tyre { get; set; }

    EditTyreModel model;
    int advanceLength;

    protected override void OnInitialized()
    {
        model = new EditTyreModel(Tyre);
        advanceLength = _config.Value.CalculationDistance;
    }

    private void Submit()
    {
        if (model.IsDirty)
        {
            var modTyre = model.Record;
            TyreDialog?.Close(DialogResult.Ok(modTyre));
        }
    }

    private void Cancel() => TyreDialog?.Cancel();
}
