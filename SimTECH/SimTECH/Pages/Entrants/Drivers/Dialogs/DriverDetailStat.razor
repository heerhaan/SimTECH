@inject LeagueService _leagueService
@inject ResultService _resultService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">Detailed statistics for @Driver?.FullName</MudText>
    </TitleContent>
    <DialogContent>
        <MudPaper MinWidth="900px" MinHeight="400px" Class="pa-2">
            @if (!loading)
            {
                <MudPaper>
                    <MudText Typo="Typo.subtitle1">Grab data from a league:</MudText>
                    <MudRadioGroup T="long" Value="@SelectedLeagueId" ValueChanged="OnChangeSelectedLeague">
                        <MudRadio T="long"
                                  Value="default"
                                  Color="Color.Primary"
                                  UnCheckedColor="Color.Default">
                            All
                        </MudRadio>
                        @foreach (var league in Leagues)
                        {
                            <MudRadio T="long"
                                      Value="@league.Id"
                                      Color="Color.Primary"
                                      UnCheckedColor="Color.Default">
                                @league.Name
                            </MudRadio>
                        }
                    </MudRadioGroup>
                </MudPaper>

                @if (PositionData != null && PositionData.DataPoints.Any())
                {
                    <ApexCharts.ApexChart @ref="PositionChart"
                                          TItem="DataPoint"
                                          Title="Position results"
                                          Options="@positionOptions"
                                          Height="500">
                        <ApexCharts.ApexPointSeries TItem="DataPoint"
                                                    Items="@PositionData.DataPoints"
                                                    XValue="@(e => e.XData)"
                                                    YValue="@(e => e.YData)"
                                                    PointColor="@_colourSetter"
                                                    SeriesType="ApexCharts.SeriesType.Bar" />
                    </ApexCharts.ApexChart>
                }
                else
                {
                    <div>No data found!</div>
                }
            }
        </MudPaper>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? StatDialog { get; set; }

    [Parameter, EditorRequired] public Driver Driver { get; set; }

    private List<Result> DriverResults { get; set; } = new();

    private List<League> Leagues { get; set; } = new();

    private DataSet PositionData { get; set; } = new DataSet { Label = "Scored positions" };

    private ApexCharts.ApexChart<DataPoint> PositionChart { get; set; }

    private ApexCharts.ApexChartOptions<DataPoint> positionOptions = Globals.CreateDefaultChartOptions;

    private long SelectedLeagueId { get; set; }

    private bool loading = true;

    private Func<DataPoint, string> _colourSetter => dataPoint =>
    {
        if (!int.TryParse(dataPoint.XData.ToString(), out int parsedPosition))
            return "#4098DB";

        switch (parsedPosition)
        {
            case 1:
                return "#FFD700";
            case 2:
                return "#C0C0C0";
            case 3:
                return "#CD7F32";
            case < 11:
                return "#04DB21";
            default:
                return "#4098DB";
        }
    };

    protected override async Task OnInitializedAsync()
    {
        DriverResults = await _resultService.GetAllResultsOfDriver(Driver.Id);
        Leagues = await _leagueService.GetLeagues();

        CreatePositionChart();

        loading = false;
    }

    private void CreatePositionChart()
    {
        if (DriverResults == null || DriverResults.Count == 0)
            return;

        PositionData.DataPoints = new();

        var highestPositionScored = DriverResults.Select(e => e.Position).Max();

        for (int i = 1; i <= highestPositionScored; i++)
        {
            PositionData.DataPoints.Add(
                new DataPoint($"{i}", DriverResults.Count(e => e.Position == i)));
        }
    }

    private async Task OnChangeSelectedLeague(long leagueId)
    {
        SelectedLeagueId = leagueId;

        if (leagueId == default)
            DriverResults = await _resultService.GetAllResultsOfDriver(Driver.Id);
        else
            DriverResults = await _resultService.GetAllDriverResultsForLeague(Driver.Id, leagueId);

        CreatePositionChart();

        await PositionChart.UpdateSeriesAsync();
    }
}
