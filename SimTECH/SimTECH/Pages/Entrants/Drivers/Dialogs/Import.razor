@inject RealityDataProvider _realityProvider

<!--

<MudDataGrid T="RealDriver"
                             Items="RealDrivers"
                             RowsPerPage="15"
                             Dense="true"
                             MultiSelection="true"
                             SelectedItemsChanged="SetSelected">
                    <Columns>
                        <PropertyColumn Property="e => e.Code" />
                        <PropertyColumn Property="e => e.Number" />
                        <PropertyColumn Property="e => e.Forename" />
                        <PropertyColumn Property="e => e.Surname" />
                        <PropertyColumn Property="e => e.Dob" />
                        <PropertyColumn Property="e => e.Nationality" />
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="RealDriver" />
                    </PagerContent>
                </MudDataGrid>
-->

<MudDialog>
    <TitleContent>
        <MudText>Import real life drivers</MudText>
    </TitleContent>
    <DialogContent>
        @if (firstStep)
        {
            @if (RealDrivers?.Any() == true)
            {
                

                <MudTable T="RealDriver"
                          @ref="realTable"
                          Items="@RealDrivers"
                          RowsPerPage="15"
                          Dense="true"
                          MultiSelection="true"
                          Hover="true"
                          @bind-SelectedItems="SelectedDrivers">
                    <HeaderContent>
                        <MudTh>Code</MudTh>
                        <MudTh>Number</MudTh>
                        <MudTh>Forename</MudTh>
                        <MudTh>Surname</MudTh>
                        <MudTh>Dob</MudTh>
                        <MudTh>Nationality</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Code</MudTd>
                        <MudTd>@context.Number</MudTd>
                        <MudTd>@context.Forename</MudTd>
                        <MudTd>@context.Surname</MudTd>
                        <MudTd>@context.Dob</MudTd>
                        <MudTd>@context.Nationality</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudPagination SelectedChanged="PageChange" Count="@((realTable.GetFilteredItemsCount() + realTable.RowsPerPage - 1) / realTable.RowsPerPage)"
                                       Variant="Variant.Outlined"
                                       Class="pa-4" />
                    </PagerContent>
                </MudTable>
            }
        }
        else
        {
            <MudTable Items="@ImportDrivers" >
                <HeaderContent>
                    <MudTh>FirstName</MudTh>
                    <MudTh>LastName</MudTh>
                    <MudTh>Abbreviation</MudTh>
                    <MudTh>DoB</MudTh>
                    <MudTh>Country</MudTh>
                    <MudTh>Mark</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <MudTextField @bind-Value="@context.FirstName" Class="dense-field" />
                    </MudTd>
                    <MudTd>
                        <MudTextField @bind-Value="@context.LastName" Class="dense-field" />
                    </MudTd>
                    <MudTd>
                        <MudTextField @bind-Value="@context.Abbreviation" Class="dense-field" />
                    </MudTd>
                    <MudTd>
                        <MudDatePicker @bind-Date="@context.TempDob"
                                       DisableToolbar="true"
                                       DateFormat="yyyy"
                                       FixDay="1" FixMonth="1" OpenTo="OpenTo.Year"
                                       PickerVariant="PickerVariant.Dialog"
                                       Editable="true"
                                       Class="field-sm"
                                       Required="true" />
                    </MudTd>
                    <MudTd>
                        <CountrySelect @bind-Value="context.Country"
                                       Class="field-md" />
                    </MudTd>
                    <MudTd>
                        <MudSwitch @bind-Checked="context.Mark"
                                   Color="Color.Secondary" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        @if (firstStep)
        {
            <MudButton Color="Color.Primary" OnClick="Next">Next</MudButton>
        }
        else
        {
            <MudButton Color="Color.Primary" OnClick="Submit">Save</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? ImportDialog { get; set; }

    private List<RealDriver>? RealDrivers { get; set; }

    private HashSet<RealDriver> SelectedDrivers { get; set; } = new();

    private List<Driver> ImportDrivers { get; set; } = new();

    private MudTable<RealDriver> realTable;

    private bool firstStep = true;

    protected override async Task OnInitializedAsync()
    {
        RealDrivers = await _realityProvider.GetExistingDrivers();

        if (firstStep == true)
            return;
    }

    private void SetSelected(HashSet<RealDriver> selection) => SelectedDrivers = selection;

    private void PageChange(int index)
    {
        realTable.NavigateTo(index - 1);
    }

    private Driver ParseRealDriver(RealDriver realDriver)
    {
        return new Driver
        {
            FirstName = realDriver.Forename,
            LastName = realDriver.Surname,
            Abbreviation = realDriver.Code,
            DateOfBirth = realDriver.Dob,
            TempDob = realDriver.Dob,
            Country = Globals.DefaultCountry,
        };
    }

    private void Next()
    {
        if (SelectedDrivers == null || SelectedDrivers.Count == 0)
        {
            // NOTE: warning?
            return;
        }

        ImportDrivers = SelectedDrivers
            .Select(e => ParseRealDriver(e))
            .ToList();

        firstStep = false;
    }

    private void Submit()
    {
        foreach (var driver in ImportDrivers)
            driver.DateOfBirth = driver.TempDob.GetValueOrDefault();

        // NOTE: check if all valid?

        ImportDialog?.Close(DialogResult.Ok(ImportDrivers));
    }

    private void Cancel() => ImportDialog?.Cancel();
}
