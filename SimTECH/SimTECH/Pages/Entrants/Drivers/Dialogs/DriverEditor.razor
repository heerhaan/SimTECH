<MudDialog>
    <TitleContent>
        <MudText>Driver moment</MudText>
    </TitleContent>
    <DialogContent>
        <MudPaper MinWidth="700px">
            <MudForm @bind-Errors="@errors">
                <MudGrid>
                    <MudItem xs="8">
                        <MudPaper Elevation="15" Class="pa-2 mud-height-full">
                            <MudStack>
                                <MudStack Row="true" Spacing="4">
                                    <MudTextField @bind-Value="Model.FirstName"
                                                  Label="First Name"
                                                  Class="field-sm"
                                                  Required="true"
                                                  RequiredError="First name is required" />
                                    <MudTextField @bind-Value="Model.LastName"
                                                  Label="Last Name"
                                                  Class="field-sm"
                                                  TextChanged="AutoUpdateAbbreviation"
                                                  Required="true"
                                                  RequiredError="Last name is required" />
                                </MudStack>
                                <MudTextField @bind-Value="Model.Abbreviation"
                                              Label="Abbreviation"
                                              Class="field-sm"
                                              Required="true" />

                                <MudDatePicker @bind-Date="Model.DateSetter"
                                               DisableToolbar="true"
                                               DateFormat="yyyy"
                                               FixDay="1" FixMonth="1" OpenTo="OpenTo.Year"
                                               PickerVariant="PickerVariant.Dialog"
                                               Editable="true"
                                               Label="Born in"
                                               Class="field-sm"
                                               Required="true" />

                                <CountrySelect @bind-Value="Model.Country"
                                               Class="field-md" />

                                <MudTextField @bind-Value="Model.Biography"
                                              T="string"
                                              Label="Biography"
                                              Lines="5"
                                              Validation="@(new Func<string, string?>(TestValidation))" />

                                <MudText Typo="Typo.subtitle1">Options</MudText>
                                <MudDivider />
                                <MudSwitchM3 @bind-Checked="Model.Mark"
                                             Label="Mark"
                                             Color="Color.Secondary"
                                             ThumbIcon="@Icons.Material.Filled.Done"
                                             ThumbOffIcon="@Icons.Material.Filled.Close" />
                            </MudStack>
                        </MudPaper>
                    </MudItem>

                    <MudItem xs="4">
                        <MudPaper Elevation="15" Class="pa-2 mud-height-full">
                            <MudText Typo="Typo.subtitle1">Traits</MudText>
                            <MudDivider />
                            <MudChipSet @bind-SelectedValues="@selectedTraits" MultiSelection="true" Filter="true">
                                @foreach (var trait in selectableTraits)
                                {
                                    <MudChip Text="@trait.Name" Value="@trait.Id" Color="Color.Primary"></MudChip>
                                }
                            </MudChipSet>

                            @if (errors.Any())
                            {
                                <MudText Typo="Typo.subtitle1">Errors</MudText>
                                @foreach (var error in errors)
                                {
                                    <MudText Color="@Color.Error">@error</MudText>
                                }
                            }
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? DriverDialog { get; set; }

    [Parameter] public Driver? Driver { get; set; }
    [Parameter] public List<Trait> Traits { get; set; } = new();

    private EditDriverModel Model;
    private List<Trait> selectableTraits;
    private ICollection<object>? selectedTraits { get; set; }

    private string[] errors = { };

    protected override void OnInitialized()
    {
        Model = new EditDriverModel(Driver);

        var driverTraitIds = Model.DriverTraits.Select(e => e.TraitId).ToList();

        selectableTraits = Traits.Where(e => e.State == State.Active || driverTraitIds.Contains(e.Id)).ToList();
        selectedTraits = driverTraitIds.Cast<object>().ToList();
    }

    void AutoUpdateAbbreviation()
    {
        if (Model.LastName?.Length > 2 == true)
            Model.Abbreviation = Model.LastName.Substring(0, 3).ToUpperInvariant();
    }

    private string? TestValidation(string? text)
    {
        if (text?.Contains("cringe") ?? false)
            return "Sorry, this is too cringe";

        return null;
    }

    private void Submit()
    {
        if (selectedTraits != null)
        {
            Model.DriverTraits = selectedTraits
                .Cast<long>()
                .Select(e => new EditDriverTraitModel { DriverId = Model.Id, TraitId = e })
                .ToList();
        }

        if (Model.IsDirty)
            DriverDialog?.Close(DialogResult.Ok(Model.Record));
    }

    private void Cancel() => DriverDialog?.Cancel();
}
