@page "/test"
@inject BreadcrumbProvider _bread
@inject ProtectedLocalStorage _storage
@inject NavigationManager _nav
@inject IOptions<SimConfig> _config

<PageTitle>Test</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="mt-16 px-8">
    <MudGrid>
        <MudItem xs="9">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudPaper Elevation="2" MinHeight="300px" Class="pa-4">
                        ΩΩΩΩΩΩλλλλλλλλλλλλλλ
                        ΩΩΩΩΩΩλλλλλλλλλλλλλλ
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudPaper Elevation="2" MinHeight="300px" Class="pa-4">
                        <MudText Typo="Typo.h1">Head1</MudText>
                        <MudText Typo="Typo.h2">Head2</MudText>
                        <MudText Typo="Typo.h3">Head3</MudText>
                        <MudText Typo="Typo.h4">Head4</MudText>
                        <MudText Typo="Typo.h5">Head5</MudText>
                        <MudText Typo="Typo.h6">Head6</MudText>
                        <MudText Typo="Typo.subtitle1">Subtitle 1</MudText>
                        <MudText Typo="Typo.subtitle2">Subtitle 2</MudText>
                        <MudText Typo="Typo.body1">Body 1</MudText>
                        <MudText Typo="Typo.body2">Body 2</MudText>
                        <MudText Typo="Typo.button">Button</MudText>
                        <MudText Typo="Typo.caption">Caption</MudText>
                        <MudText Typo="Typo.overline">Overline</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudPaper Elevation="2" MinHeight="200px" Class="pa-4">
                        <MudStack>
                            <MudText Typo="Typo.h5">Examples</MudText>
                            <div>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="SetExample">
                                    Set local stored info
                                </MudButton>
                                <MudText>@exampleStore</MudText>
                            </div>

                            <MudDivider />

                            <MudText Typo="Typo.overline">Custom emblems</MudText>
                            <Emblem Icon="@IconCollection.Polygon" Colour="#49f2e7" Accent="#bf34fa" />

                            <MudDivider />

                            <MudText Typo="Typo.overline">Muted backgrounds</MudText>
                            <MudStack Row="true">
                                <MudPaper Class="pa-3 muted-background-primary"></MudPaper>
                                <MudPaper Class="pa-3 muted-background-secondary"></MudPaper>
                                <MudPaper Class="pa-3 muted-background-tertiary"></MudPaper>
                                <MudPaper Class="pa-3 fallback-muted-background-primary"></MudPaper>
                                <MudPaper Class="pa-3 fallback-muted-background-secondary"></MudPaper>
                                <MudPaper Class="pa-3 fallback-muted-background-tertiary"></MudPaper>
                            </MudStack>

                            <MudText>Arrows</MudText>
                            <MudStack>
                                <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-0">
                                    <MudText Typo="Typo.caption">5</MudText>
                                    <MudIcon Icon="@IconCollection.ArrowBadgeRight"></MudIcon>
                                    <MudText Typo="Typo.caption">5</MudText>
                                </MudStack>
                                <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-0">
                                    <MudText Typo="Typo.caption">5</MudText>
                                    <MudIcon Icon="@IconCollection.ArrowBigRight"></MudIcon>
                                    <MudText Typo="Typo.caption">5</MudText>
                                </MudStack>
                                <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-0">
                                    <MudText Typo="Typo.caption">5</MudText>
                                    <MudIcon Icon="@IconCollection.ArrowBigRightLines"></MudIcon>
                                    <MudText Typo="Typo.caption">5</MudText>
                                </MudStack>
                                <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-0">
                                    <MudText Typo="Typo.caption">5</MudText>
                                    <MudIcon Icon="@IconCollection.ArrowNarrowRight"></MudIcon>
                                    <MudText Typo="Typo.caption">5</MudText>
                                </MudStack>
                                <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-0">
                                    <MudText Typo="Typo.caption">5</MudText>
                                    <MudIcon Icon="@IconCollection.ArrowRight"></MudIcon>
                                    <MudText Typo="Typo.caption">5</MudText>
                                </MudStack>
                            </MudStack>
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudPaper Elevation="2" MinHeight="200px" Class="pa-4">
                        <MudSimpleTable>
                            <thead>
                                <tr>
                                    <th>#</th>
                                    <th>Looks rating</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>
                                        <MudText Typo="Typo.h6" Style="@(ViewHelper.SetTextNumberStyle("red", "yellow"))">01</MudText>
                                    </td>
                                    <td>3.5/5</td>
                                </tr>
                                <tr>
                                    <td>
                                        <MudText Typo="Typo.h6" Style="-webkit-text-stroke: 1px red; color:yellow">03</MudText>
                                    </td>
                                    <td>2/5</td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <MudStack Row="true" Spacing="0" Class="mud-width-full pa-0" Style="height:8px">
                                            <span class="py-1" style="width:25%; background-color:red"></span>
                                            <span class="py-1" style="width:25%; background-color:green"></span>
                                            <span class="py-1" style="width:25%; background-color:green"></span>
                                            <span class="py-1" style="width:25%; background-color:yellow"></span>
                                        </MudStack>
                                    </td>
                                </tr>
                            </tbody>
                        </MudSimpleTable>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudPaper>
                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                            <div>
                                <MudText Typo="Typo.body2">@(string.Join(", ", randomOld))</MudText>
                                <MudText>Deviation old: @(deviateOld.ToString("F2"))</MudText>
                                <MudText>Avg: @(randomOld.Average().ToString("F2"))</MudText>
                            </div>
                            <MudDivider Vertical="true" />
                            <div>
                                <MudText Typo="Typo.body2">@(string.Join(", ", randomNew))</MudText>
                                <MudText>Deviation new: @(deviateNew.ToString("F2"))</MudText>
                                <MudText>Avg: @(randomNew.Average().ToString("F2"))</MudText>
                            </div>
                        </MudStack>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="3">
            <MudPaper Elevation="2" MinHeight="300px" Class="pa-4">
                <MudText Typo="Typo.h5">Config settings</MudText>
                <MudDivider />

                <MudListExtended T="string" Dense="true">
                    <MudListItemExtended T="string" Text="@config.CalculationDistance.ToString()" SecondaryText="Calculation distance" />
                    <MudListItemExtended T="string" Text="@config.DisqualifyChance.ToString()" SecondaryText="Disqualification odds" />
                    <MudListItemExtended T="string" Text="@config.FatalityChance.ToString()" SecondaryText="Fatality odds" />
                    <MudListItemExtended T="string" Text="@config.SafetyCarChance.ToString()" SecondaryText="Safety car odds" />
                    <MudListItemExtended T="string" Text="@config.SafetyCarGap.ToString()" SecondaryText="Safety car gap" />
                    <MudListItemExtended T="string" Text="@config.SafetyCarReturnChance.ToString()" SecondaryText="Safety car return odds" />
                    <MudListItemExtended T="string" Text="@config.SafetyPitstopSubtracter.ToString()" SecondaryText="Pit cost during caution subtract" />
                    <MudListItemExtended T="string" Text="@config.MistakeAmountRolls.ToString()" SecondaryText="Mistake rolls" />
                    <MudListItemExtended T="string" Text="@config.MistakeLowerValue.ToString()" SecondaryText="Mistake lower RNG" />
                    <MudListItemExtended T="string" Text="@config.MistakeUpperValue.ToString()" SecondaryText="Mistake upper RNG" />
                    <MudListItemExtended T="string" Text="@config.BattleRng.ToString()" SecondaryText="Battle RNG" />
                    <MudListItemExtended T="string" Text="@config.CarDriverStatusModifier.ToString()" SecondaryText="Team status modifier" />
                    <MudListItemExtended T="string" Text="@config.MinimumTyreLife.ToString()" SecondaryText="Minimum tyre life" />
                    <MudListItemExtended T="string" Text="@config.GapMarge.ToString()" SecondaryText="Time score equivalent" />
                    <MudListItemExtended T="string" Text="@config.PersonalNumbersEnabled.ToString()" SecondaryText="Apply personal numbers" />
                </MudListExtended>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    string activeCustomIcon = IconCollection.BrandToyota;
    string[] customIcons = IconCollection.ArrayOfIcons;
    int iconCycler = 0;
    string? exampleStore;
    string newExampleString = "Stored and retrieved from the local storage";
    SimConfig config;

    List<int> randomOld = new();
    List<int> randomNew = new();
    double deviateOld;
    double deviateNew;

    protected override void OnInitialized()
    {
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: "/"),
        });

        for (int i = 0; i < 30; i++)
        {
            randomOld.Add(NumberHelper.OldRandom(100));
            randomNew.Add(NumberHelper.RandomInt(100));
        }

        double oldAvg = randomOld.Average();
        double newAvg = randomNew.Average();
        deviateOld = Math.Sqrt(randomOld.Average(e => Math.Pow(e - oldAvg, 2)));
        deviateNew = Math.Sqrt(randomNew.Average(e => Math.Pow(e - newAvg, 2)));

        config = _config.Value;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var storedExample = await _storage.GetAsync<string>("example");
            if (storedExample.Success)
                exampleStore = storedExample.Value;
        }
    }

    void CycleCustomIcon()
    {
        iconCycler++;
        iconCycler %= customIcons.Length;

        activeCustomIcon = customIcons[iconCycler];
    }

    private async Task SetExample()
    {
        await _storage.SetAsync("example", newExampleString);
    }
}
