@inject ISnackbar _snack

<MudPaper Elevation="25">
    <MudButton Variant="Variant.Outlined" Color="Color.Success" FullWidth="true" OnClick="Next" Class="my-2">
        @(finalize ? "Save" : "Next")
    </MudButton>
    @if (!finalize)
    {
        <MudDropContainer T="EditContract"
                          @ref="dropzone"
                          Items="@EditableContracts"
                          ItemIsDisabled="@((contract) => contract.Id != 0)"
                          ItemsSelector="@((item, dropzone) => $"{item.TeamId}" == dropzone)"
                          ItemDropped="DriverDropped"
                          ApplyDropClassesOnDragStarted="true"
                          CanDropClass="mud-border-success">
            <ChildContent>
                <MudStack Row="true" Style="max-height: 1100px">
                    <MudPaper MaxHeight="100%" Width="300px">
                        <MudDropZone T="EditContract"
                                     Identifier="0"
                                     Class="mud-width-full mud-height-full rounded-lg border-2 border-solid mud-border-lines-default pa-4"
                                     Style="overflow-y:scroll">
                            <MudText Typo="Typo.subtitle1">Free agents</MudText>
                        </MudDropZone>
                    </MudPaper>
                    <MudPaper MaxHeight="100%" MaxWidth="100%">
                        <MudStack Row="true" Class="pa-0 flex-wrap" Style="max-height:100%; overflow-y:scroll">
                            @foreach (var team in Teams.OrderBy(e => e.Name))
                            {
                                <MudPaper MinHeight="250px" Width="300px" Class="ma-2">
                                    <MudDropZone T="EditContract"
                                                 Identifier="@($"{team.Id}")"
                                                 Class="mud-width-full mud-height-full rounded-lg border-2 border-solid mud-border-lines-default pa-4">
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-0">
                                            <MudText Class="overflow-hider">@team.Name</MudText>
                                            <MudSpacer />
                                            <CountryFlag Code="@team.Country" Size="ElementSize.Small" />
                                        </MudStack>
                                    </MudDropZone>
                                </MudPaper>
                            }
                        </MudStack>
                    </MudPaper>
                </MudStack>
            </ChildContent>
            <ItemRenderer>
                <MudPaper Class="mud-width-full border-2 border-dashed mud-border-tertiary pa-1 my-2" Style="@IsDisabledStyles(context.Id)">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-0 mx-1">
                        <MudText Class="overflow-hider">@(context.Duration) - @(context.Driver?.FullName ?? "[Unknown]")</MudText>
                        <MudSpacer />
                        <CountryFlag Code="@(context.Driver?.Country ?? Constants.DefaultCountry)" Size="ElementSize.Small" />
                    </MudStack>
                </MudPaper>
            </ItemRenderer>
        </MudDropContainer>
    }
    else
    {
        <MudText Color="Color.Warning">Make this prettier, you idiot</MudText>

        <MudTable T="EditContract"
                  Items="@EditableContracts"
                  GroupBy="@_contractDefinition"
                  GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
                  EditTrigger="TableEditTrigger.EditButton"
                  Dense="true">
            <HeaderContent>
                <MudTh>Driver</MudTh>
                <MudTh>Duration</MudTh>
            </HeaderContent>
            <GroupHeaderTemplate>
                <MudTh Class="mud-table-cell-custom-group" colspan="10">
                    <MudText>@context.GroupName - @context.Key</MudText>
                </MudTh>
            </GroupHeaderTemplate>
            <RowTemplate>
                <MudTd>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText>@(context.Driver?.FullName ?? "[Unknown driver]")</MudText>
                        <MudSpacer />
                        <CountryFlag Code="@(context.Driver?.Country ?? Constants.DefaultCountry)" Size="ElementSize.Small" />
                    </MudStack>
                </MudTd>
                <MudTd>
                    <MudText Typo="Typo.caption">@context.Duration</MudText>
                </MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText>@(context.Driver?.FullName ?? "[Unknown driver]")</MudText>
                        <MudSpacer />
                        <CountryFlag Code="@(context.Driver?.Country ?? Constants.DefaultCountry)" Size="ElementSize.Small" />
                    </MudStack>
                </MudTd>
                <MudTd>
                    <MudNumericField @bind-Value="@context.Duration" Min="1" Class="field-sm" />
                </MudTd>
            </RowEditingTemplate>
            <EditButtonContent Context="button">
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" />
            </EditButtonContent>
        </MudTable>
    }
</MudPaper>

@code {
    [Parameter, EditorRequired] public long LeagueId { get; set; }
    [Parameter, EditorRequired] public List<Contract> Contracts { get; set; } = new();
    [Parameter, EditorRequired] public List<Team> Teams { get; set; } = new();
    [Parameter, EditorRequired] public List<Driver> Drivers { get; set; } = new();
    [Parameter, EditorRequired] public EventCallback<List<Contract>> OnSave { get; set; }

    private List<EditContract> EditableContracts { get; set; } = new();

    private MudDropContainer<EditContract> dropzone;

    private bool finalize = false;

    protected override void OnInitialized()
    {
        var editContracts = Contracts.Select(e => new EditContract(e)).ToList();
        foreach (var editable in editContracts)
        {
            editable.Team = Teams.Find(e => e.Id == editable.TeamId);
            editable.Driver = Drivers.Find(e => e.Id == editable.DriverId);
        }

        foreach (var freeAgent in Drivers.Where(e => !editContracts.Select(c => c.DriverId).Contains(e.Id)))
        {
            var agentContract = new EditContract(null);
            agentContract.DriverId = freeAgent.Id;
            agentContract.Driver = freeAgent;
            agentContract.LeagueId = LeagueId;
            agentContract.Duration = 1;

            editContracts.Add(agentContract);
        }

        EditableContracts = editContracts
            .Where(e => e.Driver != null)
            .OrderBy(e => e.Driver!.FirstName)
            .ToList();

        //StateHasChanged();
    }

    private void DriverDropped(MudItemDropInfo<EditContract> dropItem)
    {
        if (dropItem.Item != null)
        {
            var teamId = long.Parse(dropItem.DropzoneIdentifier);
            dropItem.Item.TeamId = teamId;
            dropItem.Item.Team = Teams.Find(e => e.Id == teamId);
        }
    }

    private string IsDisabledStyles(long contractId)
    {
        if (contractId != 0)
        {
            return @"color: var(--mud-palette-action-disabled) !important;
                     cursor: default !important;
                     pointer-events: none !important;";
        }

        return string.Empty;
    }

    private async Task Next()
    {
        if (!finalize)
        {
            // Do we need validations after the dropper?
            EditableContracts = EditableContracts
                .Where(e => e.Id == 0 && e.TeamId != 0 && e.Team != null)
                .ToList();
            finalize = true;
            return;
        }

        if (EditableContracts.Any(e => e.Duration == 0))
        {
            _snack.Add("Add an actual duration or something?", Severity.Warning);
            return;
        }

        if (EditableContracts.Any(e => e.LeagueId == 0 || e.DriverId == 0))
        {
            _snack.Add("Somehow the new contracts have some invalid data, dunno man. Weird shit.", Severity.Error);
        }

        var contractEntities = EditableContracts.Select(e => e.Record).ToList();
        await OnSave.InvokeAsync(contractEntities);
    }

    private TableGroupDefinition<EditContract> _contractDefinition = new()
        {
            GroupName = "Team",
            Selector = (e) => e.Team!.Name
        };
}
