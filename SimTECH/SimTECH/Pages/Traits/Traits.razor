@page "/traits"
@inject TraitService TraitService
@inject BreadcrumbProvider _bread
@inject NavigationManager _nav
@inject IDialogService DialogService

<PageTitle>Traits</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudPaper MinHeight="60px" Width="100%">
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4">
            <MudText Typo="Typo.h3">Traits</MudText>

            <MudSpacer />

            <MudButtonGroup Variant="Variant.Outlined" Color="Color.Tertiary">
                <MudButton OnClick="GoToTraitAssign">Assign</MudButton>
                <MudButton OnClick="AddTrait">New</MudButton>
            </MudButtonGroup>
        </MudStack>
    </MudPaper>
    <MudDataGrid T="Trait" Items="@TraitData" RowsPerPage="15" Dense="true">
        <Columns>
            <HierarchyColumn T="Trait" />
            <PropertyColumn Property="e => e!.Name" />
            <PropertyColumn Property="e => e!.Type" Filterable="true" />
            <PropertyColumn Property="e => e!.ForWetConditions" Title="Wet" />
            <TemplateColumn T="Trait" Sortable="false">
                <CellTemplate>
                    <MudButtonGroup>
                        <StateTogglerButton CallbackToggled="@(async (bool toggled) => await OnToggleChange(context.Item, toggled))"
                                            Default="@(context.Item.State == State.Active)" />
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateTrait(context.Item))" />
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            <MudPaper Class="pa-2">
                <MudStack Class="pa-0 mud-width-full">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-0 mud-width-full" Style="height:75px">
                        <MudText Typo="Typo.h6">Details for @context.Item.Name</MudText>
                        <MudSpacer />
                        <MudText>@(context.Item.Description)</MudText>
                        <MudSpacer />

                        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-0">
                            <MudText>Only when wet:</MudText>
                            @if (context.Item.ForWetConditions)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success" />
                            }
                            else
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Block" Color="Color.Error" />
                            }
                        </MudStack>
                    </MudStack>

                    <MudDivider />

                    <MudText Typo="Typo.subtitle1">Modifiers</MudText>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        @foreach (var modifier in context.Item.RetrieveNotZeroValues())
                        {
                            <MudPaper Elevation="5" Class="px-2 py-1">
                                <MudStack AlignItems="AlignItems.Center">
                                    <MudText>@modifier.Key</MudText>
                                    <MudText Typo="Typo.caption">@modifier.Value</MudText>
                                </MudStack>
                            </MudPaper>
                        }
                    </MudStack>

                    <MudDivider />

                    <MudText Typo="Typo.subtitle1">Used by:</MudText>
                    <MudText Color="Color.Warning">Todo</MudText>
                </MudStack>
            </MudPaper>
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="Trait" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    private List<Trait> TraitData;

    protected override async Task OnInitializedAsync()
    {
        TraitData = await TraitService.GetTraits();

        _bread.Reset();
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Traits", href: "traits", disabled: true),
        });
    }

    async Task AddTrait() => await UpdateTrait(null);
    async Task UpdateTrait(Trait? item)
    {
        var parameters = new DialogParameters { ["Trait"] = item };

        var dialog = await DialogService.ShowAsync<TraitEditor>("Modify trait", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Trait updatedItem)
        {
            await TraitService.UpdateTrait(updatedItem);
            TraitData = await TraitService.GetTraits();
        }
    }

    async Task OnToggleChange(Trait trait, bool toggled) => await ToggleState(trait, (toggled ? State.Active : State.Closed));
    async Task ToggleState(Trait trait, State target)
    {
        await TraitService.ChangeState(trait, target);
        TraitData = await TraitService.GetTraits();
    }

    void GoToTraitAssign() => _nav.NavigateTo("traitassign");
}
