@page "/traits"

@using SimTECH.Pages.Traits.Dialogs

@inject TraitService _traitService
@inject BreadcrumbProvider _bread
@inject NavigationManager _nav
@inject IDialogService _dialogService

<PageTitle>Traits</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper MinHeight="60px">
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4">
            <MudText Typo="Typo.h3">Traits</MudText>

            <MudSpacer />

            <MudButtonGroup Variant="Variant.Outlined" Color="Color.Tertiary" Size="Size.Small">
                <MudButton StartIcon="@Icons.Material.Filled.Archive"
                           IconSize="Size.Small"
                           OnClick="GoToTraitAssign"
                           Class="btn-md">
                    Assign
                </MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Add"
                           IconSize="Size.Small"
                           OnClick="AddItem"
                           Class="btn-md">
                    New
                </MudButton>
            </MudButtonGroup>
        </MudStack>
    </MudPaper>
    <MudDataGrid T="Trait" Items="@Traits" RowsPerPage="15" Dense="true">
        <Columns>
            <HierarchyColumn T="Trait" />
            <PropertyColumn Property="e => e.Name" />
            <PropertyColumn Property="e => e.Type" Filterable="true" />
            <PropertyColumn Property="e => e.ForWetConditions" Title="Wet" />
            <TemplateColumn T="Trait" Sortable="false">
                <CellTemplate>
                    <MudButtonGroup>
                        <StateTogglerButton CallbackToggled="@(async (bool toggled) => await OnToggleChange(context.Item, toggled))"
                                            Default="@(context.Item.State == State.Active)" />
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateItem(context.Item))" />
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            <MudPaper Class="pa-2">
                <MudStack Class="pa-0 mud-width-full">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-0 mud-width-full" Style="height:75px">
                        <MudText Typo="Typo.h6">Details for @context.Item.Name</MudText>
                        <MudSpacer />
                        <MudText>@context.Item.Description</MudText>
                        <MudSpacer />
                        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-0">
                            <MudText>Only when wet:</MudText>
                            @if (context.Item.ForWetConditions)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success" />
                            }
                            else
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Block" Color="Color.Error" />
                            }
                        </MudStack>
                    </MudStack>

                    <MudDivider />

                    <MudText Typo="Typo.subtitle1">Modifiers</MudText>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        @foreach (var modifier in context.Item.RetrieveNotZeroValues())
                        {
                            <MudPaper Elevation="5" Class="px-2 py-1">
                                <MudStack AlignItems="AlignItems.Center">
                                    <MudText>@modifier.Key</MudText>
                                    <MudText Typo="Typo.caption">@modifier.Value</MudText>
                                </MudStack>
                            </MudPaper>
                        }
                    </MudStack>

                    <MudDivider />

                    <MudText Typo="Typo.subtitle1">Used by:</MudText>
                    <MudText Color="Color.Warning">idk man i just work here</MudText>
                </MudStack>
            </MudPaper>
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="Trait" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    private List<Trait> Traits { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Traits = await _traitService.GetTraits();

        _bread.Reset();
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Traits", href: "traits", disabled: true),
        });
    }

    private async Task AddItem() => await UpdateItem(null);
    private async Task UpdateItem(Trait? item)
    {
        var parameters = new DialogParameters { ["Trait"] = item };

        var dialog = await _dialogService.ShowAsync<TraitEditor>("Modify trait", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Trait updatedItem)
        {
            await _traitService.UpdateTrait(updatedItem);
            Traits = await _traitService.GetTraits();
        }
    }

    private async Task OnToggleChange(Trait trait, bool toggled) =>
        await ToggleState(trait, (toggled ? State.Active : State.Closed));

    private async Task ToggleState(Trait trait, State target)
    {
        await _traitService.ChangeState(trait, target);
        Traits = await _traitService.GetTraits();
    }

    private void GoToTraitAssign() => _nav.NavigateTo("traitassignlegacy");
}
