@page "/traitassign"

@using SimTECH.PageModels.Traits
@using SimTECH.Pages.Traits.Assignment.Dialogs

@inject DriverService _driverService
@inject LeagueService _leagueService
@inject TeamService _teamService
@inject TrackService _trackService
@inject TraitService _traitService
@inject BreadcrumbProvider _bread
@inject IDialogService _dialogService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Elevation="15" MaxHeight="150px" Class="d-flex flex-column justify-center align-center pa-4">
                <MudText Typo="Typo.h3">Assign traits</MudText>

                <MudText Color="Color.Error">HEY THERE IS SOME ONGOING DEVELOPMENT FOR THIS PAGE GOING ON, THIS AINT GONNA WORK RN</MudText>
                <MudStack Row="true"
                          Justify="Justify.SpaceBetween"
                          AlignItems="AlignItems.Center"
                          Class="trait-assignment-menu-bar">
                    <div>
                        <MudText Typo="Typo.h5">For entrants</MudText>
                        <MudChipSet SelectedChipChanged="RetrieveEntrants" Mandatory="true">
                            <MudChip Color="Color.Primary" Value="Entrant.Driver">Driver</MudChip>
                            <MudChip Color="Color.Primary" Value="Entrant.Team">Team</MudChip>
                            <MudChip Color="Color.Primary" Value="Entrant.Track">Track</MudChip>
                        </MudChipSet>
                    </div>
                    
                    @if (ShowLeagueSelector)
                    {
                        <MudSelect T="long"
                                   Value="@leagueFilter"
                                   ValueChanged="FilterEntrantsByLeague"
                                   Variant="Variant.Outlined"
                                   Label="League"
                                   Placeholder="All leagues"
                                   Class="field-sm">
                            @foreach (var league in Leagues)
                            {
                                <MudSelectItem Value="@league.Id">
                                    <MudText>@league.Name</MudText>
                                </MudSelectItem>
                            }
                        </MudSelect>
                    }

                    <div>
                        <MudText>Percentage chance of gaining a trait.</MudText>
                        <MudNumericField @bind-Value="@additionOdds"
                                         Min="1"
                                         Max="100"
                                         Class="field-sm"/>
                        @* <MudSlider @bind-Value="@additionOdds"
                                   Min="1"
                                   Max="100"
                                   TickMarks="true"
                                   Step="1"
                                   Variant="Variant.Filled"
                                   Color="Color.Secondary" /> *@
                    </div>

                    <div>
                        <MudSwitchM3 @bind-Value="@allowRemoval"
                                     ThumbIcon="@Icons.Material.Filled.Done"
                                     ThumbOffIcon="@Icons.Material.Filled.Close"
                                     Label="Include a random % chance to remove a trait instead"
                                     Color="Color.Error" />

                        @if (allowRemoval)
                        {
                            <MudNumericField @bind-Value="@removalOdds"
                                             Min="1"
                                             Max="100"
                                             Class="field-sm" />

                            @* <MudSlider @bind-Value="@removalOdds"
                                       Min="1"
                                       Max="100"
                                       TickMarks="true"
                                       Step="1"
                                       Variant="Variant.Filled"
                                       Color="Color.Secondary" />

                            <MudSlider @bind-Value="@removalOdds"
                                       Min="1"
                                       Max="100"
                                       TickMarks="true"
                                       Step="1"
                                       Variant="Variant.Text"
                                       Color="Color.Secondary" /> *@
                        }
                    </div>

                    <MudButtonGroup Variant="Variant.Outlined" Color="Color.Primary">
                        <MudButton>
                            Reset
                        </MudButton>
                        <MudButton Disabled="@(CanAssignTraits == false)"
                                   OnClick="StartAssigningTraits">
                            Assign
                        </MudButton>
                    </MudButtonGroup>
                </MudStack>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper Class="pa-2">
                <MudText Typo="Typo.body2" Color="Color.Info">
                    Select which traits to assign.
                </MudText>
                @if (AssignableTraits.Any())
                {
                    <MudTable T="AssignableTrait"
                              Items="@AssignableTraits"
                              @bind-SelectedItems="@selectedTraits"
                              MultiSelection="true"
                              Dense="true"
                              FixedHeader="true">
                        <ToolBarContent>
                            <MudText Typo="Typo.h5">Traits</MudText>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>
                                <MudTableSortLabel T="EntrantAssignee"
                                                   SortBy="@(e => e.Name)"
                                                   InitialDirection="SortDirection.Ascending">
                                    Name
                                </MudTableSortLabel>
                            </MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>
                                <MudText>@context.Name</MudText>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper Class="pa-2">
                <MudText Typo="Typo.body2" Color="Color.Info">
                    Select for whom we're assigning traits
                </MudText>
                @if (Entrants.Any())
                {
                    <MudTable T="EntrantAssignee"
                              Items="@Entrants"
                              @bind-SelectedItems="@selectedEntrants"
                              MultiSelection="true"
                              Dense="true"
                              FixedHeader="true">
                        <ToolBarContent>
                            <MudText Typo="Typo.h5">Entrants</MudText>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>
                                <MudTableSortLabel T="EntrantAssignee"
                                                   SortBy="@(e => e.Name)"
                                                   InitialDirection="SortDirection.Ascending">
                                    Name
                                </MudTableSortLabel>
                            </MudTh>
                            <MudTh>Current trait(s)</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>
                                <MudText>@context.Name</MudText>
                            </MudTd>
                            <MudTd>
                                @foreach (var traitId in context.ExistingTraitIds)
                                {
                                    <MudText Typo="Typo.body2">@(GetReadableTrait(traitId))</MudText>
                                }
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<Trait> AllTraits { get; set; }
    private List<AssignableTrait> AssignableTraits { get; set; } = [];
    private List<EntrantAssignee> Entrants { get; set; } = [];
    private List<EntrantAssignee> AssignedEntrants { get; set; } = [];
    private List<League> Leagues { get; set; } = [];

    private Dictionary<long, string> traitBook;

    private HashSet<AssignableTrait>? selectedTraits;
    private HashSet<EntrantAssignee>? selectedEntrants;

    private Entrant activeEntrant = Entrant.None;
    private long leagueFilter;
    private bool allowRemoval;
    private int additionOdds = 100;
    private int removalOdds = 50;

    private bool ShowLeagueSelector => activeEntrant == Entrant.Driver || activeEntrant == Entrant.Team;

    private bool CanAssignTraits => selectedEntrants?.Any() == true && (selectedTraits?.Any() == true || allowRemoval);

    protected override async Task OnInitializedAsync()
    {
        _bread.Reset();
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Traits", href: "traits"),
            new BreadcrumbItem("Assign traits", href: "traitassign", disabled: true),
        });

        AllTraits = await _traitService.GetTraits(StateFilter.Active);
        Leagues = await _leagueService.GetLeagues();

        traitBook = AllTraits.ToDictionary(e => e.Id, e => e.Name);
    }

    private async Task RetrieveEntrants(MudChip? chip)
    {
        if (chip == null || chip.Value is not Entrant selectedEntrant)
            return;

        activeEntrant = selectedEntrant;

        await LoadEntrants();
    }

    private async Task FilterEntrantsByLeague(long leagueId)
    {
        leagueFilter = leagueId;

        await LoadEntrants();
    }

    // TODO: Remnant of an older implementation, refactor this to something more readable later on
    private async Task LoadEntrants()
    {
        switch (activeEntrant)
        {
            case Entrant.Driver:
                {
                    List<Driver> drivers;
                    if (leagueFilter != default)
                        drivers = await _driverService.GetDriversFromLeague(leagueFilter);
                    else
                        drivers = await _driverService.GetDrivers();

                    Entrants = drivers.Select(e => new EntrantAssignee(e)).ToList();
                }
                break;
            case Entrant.Team:
                {
                    List<Team> teams;
                    if (leagueFilter != default)
                        teams = await _teamService.GetTeamsFromLeague(leagueFilter);
                    else
                        teams = await _teamService.GetTeams();

                    Entrants = teams.Select(e => new EntrantAssignee(e)).ToList();
                }
                break;
            case Entrant.Track:
                {
                    var tracks = await _trackService.GetTracks();

                    Entrants = tracks.Select(e => new EntrantAssignee(e)).ToList();
                }
                break;
            default:
                throw new InvalidOperationException("wtf unexpected entrant added to develop?");
        }

        AssignedEntrants = new();

        AssignableTraits = AllTraits
            .Where(e => e.Type == activeEntrant)
            .Select(e => new AssignableTrait
                {
                    Id = e.Id,
                    Name = e.Name,
                })
            .ToList();
    }

    private string GetReadableTrait(long id) => AllTraits.Find(e => e.Id == id)?.Name ?? "Unknown";

    private async Task StartAssigningTraits()
    {
        var assignableTraits = selectedTraits?.ToList() ?? new();
        var assignableEntrants = selectedEntrants?.ToList() ?? new();

        if (!assignableEntrants.Any())
            return;
        if (!assignableTraits.Any() && allowRemoval == false)
            return;

        foreach (var entry in assignableEntrants)
        {
            var availableTraits = assignableTraits.Where(e => !entry.ExistingTraitIds.Contains(e.Id)).ToList();

            if (availableTraits.Any() && NumberHelper.RandomInt(100) < additionOdds)
            {
                var randomTrait = availableTraits.TakeRandomItem();
                entry.AssignedTraitIds.Add(randomTrait.Id);
            }

            if (entry.ExistingTraitIds.Any() && NumberHelper.RandomInt(100) < removalOdds)
            {
                var randomRemoval = entry.ExistingTraitIds.TakeRandomItem();
                entry.RemovedTraitIds.Add(randomRemoval);
            }
        }

        AssignedEntrants = assignableEntrants.Where(e => e.AssignedTraitIds.Any() || e.RemovedTraitIds.Any()).ToList();

        var parameters = new DialogParameters
            {
                ["Entrants"] = AssignedEntrants,
            };

        var dialog = await _dialogService.ShowAsync<AssignmentResult>("Assignment result", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await PersistAssignedTraits();
        }
    }

    private void AssignRandomTrait() => AssignRandomTrait(Entrants.TakeRandomItem());
    private void AssignRandomTrait(EntrantAssignee item)
    {
        var relevantTraits = AllTraits.Where(e => e.Type == activeEntrant).ToList();

        var assignee = AssignedEntrants.FirstOrDefault(e => e == item);

        if (assignee == null)
        {
            assignee = item;
            AssignedEntrants.Add(assignee);
        }

        var availableTraits = relevantTraits.Where(e => !assignee.ExistingTraitIds.Contains(e.Id)).ToList();
        if (!availableTraits.Any())
            return;

        var randomTrait = availableTraits.TakeRandomItem();

        assignee.AssignedTraitIds.Add(randomTrait.Id);
        assignee.ExistingTraitIds.Add(randomTrait.Id);
    }

    private async Task RemoveAssignedTrait(TableRowClickEventArgs<EntrantAssignee> rowItem)
    {
        bool? confirm = await _dialogService.ShowMessageBox(
            "Warning",
            $"Are you sure you want to remove these assigned traits for {rowItem.Item.Name}?",
            yesText: "Yep", cancelText: "Nope");

        if (confirm == true)
        {
            foreach (var assignedId in rowItem.Item.AssignedTraitIds)
                rowItem.Item.ExistingTraitIds.Remove(assignedId);

            rowItem.Item.AssignedTraitIds.Clear();

            AssignedEntrants.Remove(rowItem.Item);
        }
    }

    private async Task PersistAssignedTraits()
    {
        if (activeEntrant == Entrant.None || !AssignedEntrants.Any())
            return;

        switch (activeEntrant)
        {
            case Entrant.Driver:
                await _traitService.AssignDriverTraits(AssignedEntrants);
                break;
            case Entrant.Team:
                await _traitService.AssignTeamTraits(AssignedEntrants);
                break;
            case Entrant.Track:
                await _traitService.AssignTrackTraits(AssignedEntrants);
                break;
            default:
                throw new InvalidOperationException("wtf unexpected entrant added to develop?");
        }

        await LoadEntrants();
    }
}
