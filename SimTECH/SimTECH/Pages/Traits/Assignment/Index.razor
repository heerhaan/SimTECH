@page "/traitassign"

@using SimTECH.PageModels.Traits
@using SimTECH.Pages.Traits.Assignment.Dialogs

@inject DriverService _driverService
@inject LeagueService _leagueService
@inject TeamService _teamService
@inject TrackService _trackService
@inject TraitService _traitService
@inject BreadcrumbProvider _breadcrumb
@inject IDialogService _dialogService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Elevation="15" MaxHeight="150px" Class="d-flex flex-column justify-center align-center pa-4">
                <MudText Typo="Typo.h3">Assign traits</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <div class="setting-column-wrapper">
                <MudPaper Class="pa-2">
                    <MudText Typo="Typo.h5">Assignment settings</MudText>
                    <MudStack Class="trait-assignment-menu-bar">
                        <div class="d-flex justify-space-between">
                            <div>
                                <MudText Typo="Typo.h5">For entrants</MudText>
                                <MudChipSet SelectedChipChanged="RetrieveEntrants" Mandatory="true">
                                    <MudChip Color="Color.Primary" Value="Entrant.Driver">Driver</MudChip>
                                    <MudChip Color="Color.Primary" Value="Entrant.Team">Team</MudChip>
                                    <MudChip Color="Color.Primary" Value="Entrant.Track">Track</MudChip>
                                </MudChipSet>
                            </div>
                            <div>
                                @if (ActiveEntrant is Entrant.Driver or Entrant.Team)
                                {
                                    <MudText Typo="Typo.h5">Filter by active league</MudText>
                                    <MudSelect T="long"
                                               Value="@LeagueFilter"
                                               ValueChanged="FilterEntrantsByLeague"
                                               ToStringFunc="@LeagueNameOrAll"
                                               Variant="Variant.Outlined"
                                               Placeholder="All leagues"
                                               Class="field-sm">
                                        @foreach (var league in Leagues)
                                        {
                                            <MudSelectItem Value="@league.Id">
                                                <MudText>@league.Name</MudText>
                                            </MudSelectItem>
                                        }
                                    </MudSelect>
                                }
                            </div>
                        </div>
                        <div>
                            <MudText>Odds (%) of gaining a trait</MudText>
                            <MudNumericField @bind-Value="@AdditionOdds"
                                             Min="0"
                                             Max="100"
                                             Class="field-sm" />
                        </div>
                        <div>
                            <MudText>Odds (%) of losing a trait</MudText>
                            <MudNumericField @bind-Value="@RemovalOdds"
                                             Min="0"
                                             Max="100"
                                             Label="Yo angelo"
                                             Variant="Variant.Filled"
                                             Class="field-sm" />
                        </div>
                        <MudButtonGroup Variant="Variant.Outlined" Color="Color.Primary">
                            <MudButton Disabled="true">
                                Reset
                            </MudButton>
                            <MudButton Disabled="@(!CanAssignTraits)"
                                       OnClick="StartAssigningTraits">
                                Assign
                            </MudButton>
                        </MudButtonGroup>
                    </MudStack>
                </MudPaper>
                <MudPaper Class="pa-2">
                    <MudText Typo="Typo.h4">Available traits</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Info">
                        Select which traits to assign.
                    </MudText>
                    @if (AssignableTraits.Any())
                    {
                        <MudTable T="AssignableTrait"
                                  Items="@AssignableTraits"
                                  @bind-SelectedItems="@selectedTraits"
                                  MultiSelection="true"
                                  Dense="true"
                                  FixedHeader="true">
                            <HeaderContent>
                                <MudTh>
                                    <MudTableSortLabel T="EntrantAssignee"
                                                       SortBy="@(e => e.Name)"
                                                       InitialDirection="SortDirection.Ascending">
                                        Name
                                    </MudTableSortLabel>
                                </MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>
                                    <MudText>@context.Name</MudText>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    }
                </MudPaper>
            </div>
        </MudItem>
        <MudItem xs="6">
            <MudPaper Class="pa-2">
                <MudText Typo="Typo.subtitle1">Available entrants</MudText>
                <MudText Typo="Typo.body2" Color="Color.Info">
                    Select for whom we're assigning traits
                </MudText>
                @if (Entrants.Any())
                {
                    <MudTable T="EntrantAssignee"
                              Items="@Entrants"
                              @bind-SelectedItems="@selectedEntrants"
                              MultiSelection="true"
                              Dense="true"
                              FixedHeader="true">
                        <HeaderContent>
                            <MudTh>
                                <MudTableSortLabel T="EntrantAssignee"
                                                   SortBy="@(e => e.Name)"
                                                   InitialDirection="SortDirection.Ascending">
                                    Name
                                </MudTableSortLabel>
                            </MudTh>
                            <MudTh>Current traits</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>
                                <MudText>@context.Name</MudText>
                            </MudTd>
                            <MudTd>
                                @foreach (var traitId in context.ExistingTraitIds)
                                {
                                    <MudText Typo="Typo.body2">@(GetReadableTrait(traitId))</MudText>
                                }
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<Trait> ActiveTraits { get; set; }
    private List<AssignableTrait> AssignableTraits { get; set; } = [];
    private List<EntrantAssignee> Entrants { get; set; } = [];
    private List<League> Leagues { get; set; } = [];

    private Dictionary<long, string> traitBook;

    private HashSet<AssignableTrait>? selectedTraits;
    private HashSet<EntrantAssignee>? selectedEntrants;

    private Entrant ActiveEntrant { get; set; } = Entrant.None;

    private long LeagueFilter { get; set; }
    private int AdditionOdds { get; set; } = 100;
    private int RemovalOdds { get; set; } = 0;

    private bool CanAssignTraits => selectedEntrants?.Any() == true && (selectedTraits?.Any() == true);

    protected override async Task OnInitializedAsync()
    {
        _breadcrumb.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Traits", href: "traits"),
            new BreadcrumbItem("Assign traits", href: "traitassign", disabled: true),
        });

        ActiveTraits = await _traitService.GetTraits(StateFilter.Active);
        Leagues = await _leagueService.GetLeagues();

        traitBook = ActiveTraits.ToDictionary(e => e.Id, e => e.Name);
    }

    private Func<long, string> LeagueNameOrAll => (leagueId) =>
    {
        if (leagueId == 0)
            return "Any league";

        return Leagues.Find(e => e.Id == leagueId)?.Name ?? "Unknown";
    };

    private string GetReadableTrait(long id) => ActiveTraits.Find(e => e.Id == id)?.Name ?? "Unknown";

    private async Task RetrieveEntrants(MudChip? chip)
    {
        if (chip == null || chip.Value is not Entrant selectedEntrant)
            return;

        ActiveEntrant = selectedEntrant;

        await ReloadEntrants();
    }

    private async Task FilterEntrantsByLeague(long leagueId)
    {
        LeagueFilter = leagueId;

        await ReloadEntrants();
    }

    // TODO: Remnant of an older implementation, refactor this to something more readable later on
    private async Task ReloadEntrants()
    {
        switch (ActiveEntrant)
        {
            case Entrant.Driver:
                {
                    var drivers = LeagueFilter == default
                        ? await _driverService.GetDrivers()
                        : await _driverService.GetDriversFromLeague(LeagueFilter);

                    Entrants = drivers.Select(e => new EntrantAssignee(e)).ToList();
                }
                break;
            case Entrant.Team:
                {
                    var teams = LeagueFilter == default
                        ? await _teamService.GetTeams()
                        : await _teamService.GetTeamsFromLeague(LeagueFilter);

                    Entrants = teams.Select(e => new EntrantAssignee(e)).ToList();
                }
                break;
            case Entrant.Track:
                {
                    var tracks = await _trackService.GetTracks();

                    Entrants = tracks.Select(e => new EntrantAssignee(e)).ToList();
                }
                break;
            default:
                throw new InvalidOperationException("wtf unexpected entrant added to develop?");
        }

        foreach (var entrant in Entrants)
        {
            if (entrant.ExistingTraits.Count == 0)
                continue;

            entrant.ExistingTraits = ActiveTraits
                .Where(e => entrant.ExistingTraitIds.Contains(e.Id))
                .Select(e => new AssignableTrait(e))
                .ToList();
        }

        AssignableTraits = ActiveTraits
            .Where(e => e.Type == ActiveEntrant)
            .Select(e => new AssignableTrait(e))
            .ToList();
    }

    private async Task StartAssigningTraits()
    {
        var assignableTraits = selectedTraits?.ToList() ?? new();
        var assignableEntrants = selectedEntrants?.ToList() ?? new();

        if (assignableEntrants.Count == 0 || assignableTraits.Count == 0)
            return;

        foreach (var entry in assignableEntrants)
        {
            var availableTraits = assignableTraits.Where(e => !entry.ExistingTraits.Contains(e)).ToList();

            if (availableTraits.Count > 0 && NumberHelper.RandomInt(100) < AdditionOdds)
            {
                var randomTrait = availableTraits.TakeRandomItem();
                entry.AssignedTraits.Add(randomTrait);
            }

            if (entry.ExistingTraitIds.Count > 0 && NumberHelper.RandomInt(100) < RemovalOdds)
            {
                var randomRemoval = entry.ExistingTraits.TakeRandomItem();
                entry.RemovedTraits.Add(randomRemoval);
            }
        }

        var assignedEntrants = assignableEntrants.Where(e => e.AssignedTraits.Count != 0 || e.RemovedTraits.Count != 0).ToList();

        var parameters = new DialogParameters
            {
                ["Entrants"] = assignedEntrants,
            };

        var dialog = await _dialogService.ShowAsync<AssignmentResult>("Assignment result", parameters);

        var result = await dialog.Result;

        if (!result.Canceled)
            await PersistAssignedTraits(assignedEntrants);
        else
            await ReloadEntrants();
    }

    private void AssignRandomTrait() => AssignRandomTrait(Entrants.TakeRandomItem());
    private void AssignRandomTrait(EntrantAssignee item)
    {
        var availableTraits = AssignableTraits.Where(e => !item.ExistingTraits.Contains(e)).ToList();
        if (availableTraits.Count == 0)
            return;

        var randomTrait = availableTraits.TakeRandomItem();

        item.AssignedTraits.Add(randomTrait);
        item.ExistingTraits.Add(randomTrait);
    }

    private async Task RemoveAssignedTrait(TableRowClickEventArgs<EntrantAssignee> rowItem)
    {
        bool confirm = await _dialogService.ShowMessageBox("Warning",
            $"Are you sure you want to remove these assigned traits for {rowItem.Item.Name}?",
            yesText: "Yep", cancelText: "Nope")
            ?? false;

        if (confirm)
        {
            foreach (var trait in rowItem.Item.AssignedTraits)
                rowItem.Item.ExistingTraits.Remove(trait);

            rowItem.Item.AssignedTraits = new();
        }
    }

    private async Task PersistAssignedTraits(List<EntrantAssignee> assignedEntrants)
    {
        if (ActiveEntrant == Entrant.None || assignedEntrants.Count == 0)
            return;

        switch (ActiveEntrant)
        {
            case Entrant.Driver:
                await _traitService.AssignDriverTraits(assignedEntrants);
                break;
            case Entrant.Team:
                await _traitService.AssignTeamTraits(assignedEntrants);
                break;
            case Entrant.Track:
                await _traitService.AssignTrackTraits(assignedEntrants);
                break;
            default:
                throw new InvalidOperationException("wtf unexpected entrant added to develop?");
        }

        await ReloadEntrants();
    }
}
