@page "/traitassign"
@inject DriverService _driverService
@inject TeamService _teamService
@inject TrackService _trackService
@inject TraitService _traitService
@inject BreadcrumbProvider _bread
@inject IDialogService _dialogService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Elevation="15" Height="100px" Class="d-flex flex-column justify-center align-center pa-4">
                <MudText Typo="Typo.h3">Trait assigner</MudText>
                <MudText Color="Color.Error">Page as a whole is very much too simplistic and crude but it works!</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="4">
            <MudPaper Class="pa-2">
                <MudStack>
                    <MudText Typo="Typo.subtitle1">For entrants</MudText>
                    <MudDivider />

                    <MudChipSet @bind-SelectedChip="@entrantChip" Mandatory="true">
                        <MudChip Color="Color.Primary" Value="Entrant.Driver">Driver</MudChip>
                        <MudChip Color="Color.Primary" Value="Entrant.Team">Team</MudChip>
                        <MudChip Color="Color.Primary" Value="Entrant.Track">Track</MudChip>
                    </MudChipSet>

                    <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="LoadEntrants">Load</MudButton>

                    <MudText Typo="Typo.subtitle1" Class="mt-2">Assignment settings</MudText>
                    <MudDivider />

                    <MudText Color="Color.Warning">Todo select which traits to assign</MudText>
                    <MudText Color="Color.Warning">Todo random removal option</MudText>

                    @if (RelevantTraits?.Any() == true)
                    {
                        <MudText Typo="Typo.subtitle1" Color="Color.Success">Relevant traits</MudText>
                        <MudDivider />
                        @foreach (var trait in RelevantTraits)
                        {
                            <MudTooltip Text="@(trait.Description)" Color="Color.Primary">
                                <MudText Color="Color.Primary">@(trait.Name) - [@(trait.Id)]</MudText>
                            </MudTooltip>
                        }

                        <MudListExtended T="string" Dense="true">
                            @foreach (var trait in RelevantTraits)
                            {
                                <MudListItemExtended T="string"
                                                     Text="@trait.Name"
                                                     SecondaryText="@trait.Description" />
                            }
                        </MudListExtended>
                    }
                </MudStack>
            </MudPaper>
        </MudItem>
        <MudItem xs="4">
            <MudPaper Class="pa-2">
                <MudText>Click on the button 'Random' to assign a random trait to a random entrant</MudText>
                <MudText>Click on a driver to assign a random trait to them</MudText>
                <MudTable T="EntrantAssignee"
                          Items="@Entrants"
                          Dense="true"
                          Hover="true"
                          OnRowClick="OnClickAssignRandomTrait">
                    <ToolBarContent>
                        <MudText Typo="Typo.h5">Entrants</MudText>
                        <MudSpacer />
                        <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="RandomEntrantAssignTrait" Class="btn-md">Random</MudButton>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Current trait(s)</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudText>@context.Name</MudText>
                        </MudTd>
                        <MudTd>
                            @foreach (var traitId in context.ExistingTraitIds)
                            {
                                <MudText Typo="Typo.body2">@(GetReadableTrait(traitId))</MudText>
                            }
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
        <MudItem xs="4">
            <MudPaper Class="pa-2">
                <MudText>Click on persist to save all the assigned traits</MudText>
                <MudText>Click on a row to remove the entrant</MudText>
                @if (AssignedEntrants.Any())
                {
                    <MudTable T="EntrantAssignee" Items="@AssignedEntrants" Dense="true" Hover="true"
                            OnRowClick="RemoveAssignedTrait">
                        <ToolBarContent>
                            <MudText Typo="Typo.h5">Newly assigned traits</MudText>
                            <MudSpacer />
                            <MudButton Color="Color.Success" OnClick="PersistAssignedTraits" Class="btn-md">Save</MudButton>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>Traits</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>
                                <MudText>@context.Name</MudText>
                            </MudTd>
                            <MudTd>
                                @foreach (var traitId in context.AssignedTraitIds)
                                {
                                    <MudText Typo="Typo.body2">@(GetReadableTrait(traitId))</MudText>
                                }
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    List<Trait> AllTraits { get; set; }
    List<Trait>? RelevantTraits { get; set; }
    List<EntrantAssignee> Entrants { get; set; } = new();
    List<EntrantAssignee> AssignedEntrants { get; set; } = new();

    MudChip? entrantChip;

    Entrant activeEntrant = Entrant.None;

    protected override async Task OnInitializedAsync()
    {
        _bread.Reset();
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Traits", href: "traits"),
            new BreadcrumbItem("Assign traits", href: "traitassign", disabled: true),
        });

        AllTraits = await _traitService.GetTraits(StateFilter.Active);
    }

    async Task LoadEntrants()
    {
        if (entrantChip == null)
            return;

        activeEntrant = (Entrant)entrantChip.Value;

        switch (activeEntrant)
        {
            case Entrant.Driver:
                {
                    var drivers = await _driverService.GetDrivers();
                    Entrants = drivers.Select(e => new EntrantAssignee(e)).ToList();
                }
                break;
            case Entrant.Team:
                {
                    var teams = await _teamService.GetTeams();
                    Entrants = teams.Select(e => new EntrantAssignee(e)).ToList();
                }
                break;
            case Entrant.Track:
                {
                    var tracks = await _trackService.GetTracks();
                    Entrants = tracks.Select(e => new EntrantAssignee(e)).ToList();
                }
                break;
            default: throw new InvalidOperationException("wtf unexpected entrant added to develop?");
        }

        RelevantTraits = AllTraits.Where(e => e.Type == activeEntrant).ToList();
    }

    private string GetReadableTrait(long id) => AllTraits.Find(e => e.Id == id)?.Name ?? "Unknown";

    private void RandomEntrantAssignTrait()
    {
        if (Entrants != null)
            AssignRandomTrait(Entrants.TakeRandomItem());
    }
    private void OnClickAssignRandomTrait(TableRowClickEventArgs<EntrantAssignee> rowItem) => AssignRandomTrait(rowItem.Item);
    private void AssignRandomTrait(EntrantAssignee item)
    {
        if (RelevantTraits == null)
            return;

        var assignee = AssignedEntrants.FirstOrDefault(e => e == item);

        if (assignee == null)
        {
            assignee = item;
            AssignedEntrants.Add(assignee);
        }

        var availableTraits = RelevantTraits.Where(e => !assignee.ExistingTraitIds.Contains(e.Id)).ToList();
        if (!availableTraits.Any())
            return;

        var randomTrait = availableTraits.TakeRandomItem();

        assignee.AssignedTraitIds.Add(randomTrait.Id);
        assignee.ExistingTraitIds.Add(randomTrait.Id);
    }

    private async Task RemoveAssignedTrait(TableRowClickEventArgs<EntrantAssignee> rowItem)
    {
        bool? confirm = await _dialogService.ShowMessageBox(
            "Warning",
            $"Are you sure you want to remove these assigned traits for {rowItem.Item.Name}?",
            yesText: "Yep", cancelText: "Nope");

        if (confirm == true)
        {
            foreach (var assignedId in rowItem.Item.AssignedTraitIds)
                rowItem.Item.ExistingTraitIds.Remove(assignedId);

            rowItem.Item.AssignedTraitIds.Clear();

            AssignedEntrants.Remove(rowItem.Item);
        }
    }

    async Task PersistAssignedTraits()
    {
        if (activeEntrant == Entrant.None || !AssignedEntrants.Any())
            return;

        switch (activeEntrant)
        {
            case Entrant.Driver:
                await _traitService.AssignDriverTraits(AssignedEntrants);
                break;
            case Entrant.Team:
                await _traitService.AssignTeamTraits(AssignedEntrants);
                break;
            case Entrant.Track:
                await _traitService.AssignTrackTraits(AssignedEntrants);
                break;
            default:
                throw new InvalidOperationException("wtf unexpected entrant added to develop?");
        }

        AssignedEntrants.Clear();
        await LoadEntrants();
    }
}
