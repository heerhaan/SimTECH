<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">
            @(Model.IsNew ? "Add new trait" : $"Modify {Model.Name}")
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm>
            <MudGrid Spacing="2">
                <MudItem xs="6">
                    <MudStack Justify="Justify.SpaceBetween" Class="pa-0">
                        <MudTextField @bind-Value="Model.Name" Label="Name" Class="field-md" />
                        <div>
                            <MudText Typo="Typo.subtitle2">Entrant type</MudText>
                            @if (Model.IsNew)
                            {
                                <MudChipSet @bind-SelectedChip="entrantChip">
                                    @foreach (var entrant in EntrantEnumHelper.GetEntrantSelection)
                                    {
                                        <MudChip Value="@entrant.Key" Color="Color.Primary">@entrant.Value</MudChip>
                                    }
                                </MudChipSet>
                            }
                            else
                            {
                                <MudText>@Model.Type.ToString()</MudText>
                            }
                        </div>
                        <div>
                            <MudSwitchM3 @bind-Checked="Model.ForWetConditions"
                                         ThumbIcon="@Icons.Material.Filled.Done"
                                         ThumbOffIcon="@Icons.Material.Filled.Close"
                                         Label="Only when conditions are wet"
                                         LabelPosition="LabelPosition.End"
                                         Color="Color.Tertiary" />
                        </div>
                    </MudStack>
                </MudItem>
                <MudItem xs="6">
                    <MudTextField @bind-Value="Model.Description"
                                  Label="Description"
                                  Variant="Variant.Outlined"
                                  Lines="5" />
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6">Modifiers</MudText>
                    <MudDivider />
                </MudItem>
                <MudItem xs="6">
                    <MudStack Class="pa-0">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-0">
                            <MudNumericField T="int" @bind-Value="Model.QualifyingPace" Label="Pace (qualifying)" />
                            <MudNumericField T="int" @bind-Value="Model.RacePace" Label="Pace (race)" />
                        </MudStack>
                        <MudStack Row="true" AlignItems="AlignItems.Center">
                            <MudNumericField T="int" @bind-Value="Model.Attack" Label="Attack" />
                            <MudNumericField T="int" @bind-Value="Model.Defense" Label="Defense" />
                        </MudStack>
                        <div>
                            <MudText Typo="Typo.subtitle1">Reliability</MudText>
                            <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-0">
                                <MudNumericField T="int" @bind-Value="Model.DriverReliability" Label="Driver" />
                                <MudNumericField T="int" @bind-Value="Model.CarReliability" Label="Car" />
                                <MudNumericField T="int" @bind-Value="Model.EngineReliability" Label="Engine" />
                            </MudStack>
                        </div>
                    </MudStack>
                </MudItem>
                <MudItem xs="6">
                    <MudRangeSlider @bind-Value="Model.WearMin"
                                    @bind-UpperValue="Model.WearMax"
                                    Size="Size.Large"
                                    Variant="Variant.Filled"
                                    Range="true"
                                    TickMarks="true"
                                    Color="Color.Tertiary"
                                    Step="1"
                                    Min="-5"
                                    Max="5"
                                    MinDistance="0">
                        <MudText Typo="Typo.subtitle1">Tyre wear</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Info">Wear is subtracted from tyre. Higher value = more wear.</MudText>
                    </MudRangeSlider>
                    <div class="d-flex flex-row justify-center">
                        <MudText Typo="Typo.caption">[@Model.WearMin - @Model.WearMax]</MudText>
                    </div>

                    <MudRangeSlider @bind-Value="Model.RngMin"
                                    @bind-UpperValue="Model.RngMax"
                                    Size="Size.Large"
                                    Variant="Variant.Outlined"
                                    Range="true"
                                    TickMarks="true"
                                    Display="true"
                                    Color="Color.Tertiary"
                                    Step="1"
                                    Min="-10"
                                    Max="10"
                                    MinDistance="0">
                        <MudText Typo="Typo.subtitle2">RNG per advance</MudText>
                    </MudRangeSlider>
                    <div class="d-flex flex-row justify-center">
                        <MudText Typo="Typo.caption">[@Model.RngMin - @Model.RngMax]</MudText>
                    </div>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? TraitDialog { get; set; }

    [Parameter] public Trait? Trait { get; set; }

    private EditTraitModel Model { get; set; }

    private MudChip? entrantChip;

    protected override void OnInitialized()
    {
        Model = new EditTraitModel(Trait);
    }

    private void Submit()
    {
        if (Model.Id == 0)
        {
            // Perhaps own warning/validation message
            if (entrantChip == null)
                return;

            Model.Type = (Entrant)entrantChip.Value;
        }

        if (Model.IsDirty)
        {
            var modTrait = Model.Record;
            TraitDialog?.Close(DialogResult.Ok(modTrait));
        }
    }

    private void Cancel() => TraitDialog?.Cancel();
}
