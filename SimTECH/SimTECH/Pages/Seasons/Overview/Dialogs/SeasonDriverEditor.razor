@inject SeasonDriverService _seasonDriverService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5" Color="Color.Secondary">Modify in-season driver</MudText>
    </TitleContent>
    <DialogContent>
        <div style="min-width: 500px">
            <MudStack>
                @if (Model.Id == 0 && Drivers != null)
                {
                    <MudSelectExtended T="Driver"
                                       ItemCollection="@Drivers.ToList()"
                                       Label="Driver"
                                       Variant="Variant.Outlined"
                                       SearchBox="true"
                                       SearchFunc="SearchDrivers"
                                       Value="@Model.Driver"
                                       ValueChanged="LookupDriverData"
                                       ToStringFunc="@_driverToString">
                        <ItemTemplate>
                            <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-0">
                                <MudText>@context.Value.FullName</MudText>
                                <MudSpacer />
                                <CountryFlag Code="@context.Value.Country" Size="ElementSize.Tiny" />
                            </MudStack>
                        </ItemTemplate>
                    </MudSelectExtended>

                    @if (PastSetups?.Any() == true)
                    {
                        <MudSelectExtended T="PreviousEntrantSetup<SeasonDriver>"
                                           ItemCollection="@PastSetups"
                                           Label="Previous driver season configurations"
                                           Variant="Variant.Outlined"
                                           ValueChanged="OnSelectedPastSetup"
                                           ToStringFunc="@_previousToString">
                            <ItemTemplate>
                                <div class="select-detail-block">
                                    <MudText Typo="Typo.subtitle1">
                                        @context.Value.LeagueName - @context.Value.SeasonYear
                                    </MudText>
                                    <div class="select-detail-configured">
                                        <span>NO: @context.Value.Entrant.Number</span>
                                        <span>SKL: @context.Value.Entrant.Skill</span>
                                        <span>REL: @context.Value.Entrant.Reliability</span>
                                        <span>ATT: @context.Value.Entrant.Attack</span>
                                        <span>DEF: @context.Value.Entrant.Defense</span>
                                    </div>
                                </div>
                            </ItemTemplate>
                        </MudSelectExtended>
                    }
                }

                <MudNumericField @bind-Value="Model.Number" Label="Number" Validation="@_numberValidation" />
                <MudNumericField @bind-Value="Model.Skill" Label="Skill" />
                <MudNumericField @bind-Value="Model.Reliability" Label="Reliability" />
                <MudNumericField @bind-Value="Model.Attack" Label="Attack" />
                <MudNumericField @bind-Value="Model.Defense" Label="Defense" />

                <MudSwitchM3 @bind-Value="isDropped"
                             ThumbIcon="@Icons.Material.Filled.Done"
                             ThumbOffIcon="@Icons.Material.Filled.Close"
                             Label="Drop driver from team"
                             Color="Color.Error" />

                @if (!isDropped)
                {
                    <MudSelect T="long" @bind-Value="seasonTeamId" Label="Team">
                        @foreach (var team in SeasonTeams.OrderBy(e => e.Name))
                        {
                            <MudSelectItem Value="@team.Id">@team.Name</MudSelectItem>
                        }
                    </MudSelect>

                    <MudSelect T="TeamRole" @bind-Value="Model.TeamRole" Label="Team role">
                        @foreach (var select in TeamRoleEnumHelper.GetTeamRoleSelection)
                        {
                            <MudSelectItem Value="@select.Key">@select.Value</MudSelectItem>
                        }
                    </MudSelect>
                }
            </MudStack>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">OK</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    protected MudDialogInstance? DriverDialog { get; set; }

    [Parameter, EditorRequired]
    public long SeasonId { get; set; }

    [Parameter, EditorRequired]
    public List<SeasonTeam> SeasonTeams { get; set; }

    [Parameter]
    public IEnumerable<Driver> Drivers { get; set; } = Enumerable.Empty<Driver>();

    [Parameter]
    public SeasonDriver? SeasonDriver { get; set; }

    [Parameter]
    public int[] TakenNumbers { get; set; }

    private EditSeasonDriverModel Model { get; set; }

    private List<PreviousEntrantSetup<SeasonDriver>>? PastSetups { get; set; }

    private long seasonTeamId;
    private bool loading = true;
    private bool isDropped = false;

    private Func<int, string?> _numberValidation => number =>
    {
        if (TakenNumbers.Contains(number))
            return $"Number {number} is already in use, pick something else.";

        return null;
    };

    private Func<Driver, string> _driverToString => driver =>
    {
        if (driver == null)
            return "Please select a driver";

        return $"{driver.FullName} {driver.Country.CountryCodeToEmoji()}";
    };

    private Func<PreviousEntrantSetup<SeasonDriver>, string> _previousToString => setup =>
    {
        if (setup == null)
            return "Select the league and year to take the configuration from";

        return $"{setup.LeagueName} - {setup.SeasonYear}";
    };

    protected override void OnInitialized()
    {
        Model = new EditSeasonDriverModel(SeasonDriver);
        Model.SeasonId = SeasonId;
        seasonTeamId = Model.SeasonTeamId.GetValueOrDefault();

        Model.Number = 2;
        if (TakenNumbers?.Any() == true)
            Model.Number = TakenNumbers.Max() + 1;

        loading = false;
    }

    private bool SearchDrivers(Driver driver, string searchText)
    {
        if (string.IsNullOrWhiteSpace(searchText))
            return true;

        var driverName = driver.FullName.ToLowerInvariant();

        return driverName.Contains(searchText.ToLowerInvariant());
    }

    private async Task LookupDriverData(Driver driver)
    {
        Model.DriverId = driver.Id;
        Model.Driver = driver;

        var previousSetups = await _seasonDriverService.PreviousDriverSetups(driver.Id);

        PastSetups = previousSetups.OrderByDescending(e => e.SeasonYear).ToList();
    }

    private void OnSelectedPastSetup(PreviousEntrantSetup<SeasonDriver> setup)
    {
        Model.Number = setup.Entrant.Number;
        Model.Skill = setup.Entrant.Skill;
        Model.Reliability = setup.Entrant.Reliability;
        Model.Attack = setup.Entrant.Attack;
        Model.Defense = setup.Entrant.Defense;

        var pastTeam = SeasonTeams.Find(e => e.TeamId == setup.MemberId);

        if (pastTeam == null)
            return;

        seasonTeamId = pastTeam.Id;
    }

    private void Submit()
    {
        Model.SeasonTeamId = isDropped ? null : seasonTeamId;

        if (Model.IsDirty)
        {
            DriverDialog?.Close(DialogResult.Ok(Model.Record));
        }
    }

    private void Cancel() => DriverDialog?.Cancel();
}
