@inject ClimateService _climateService
@inject ISnackbar _snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5" Color="Color.Secondary">Modify race</MudText>
    </TitleContent>
    <DialogContent>
        <MudPaper MinHeight="300px" Class="pa-4">
            <MudTextField @bind-Value="Model.Name" Label="Name" Class="field-lg" />

            <div>
                <MudText Typo="Typo.subtitle2">Weather</MudText>
                <MudChipSet T="long" @bind-SelectedChip="ClimateChip" SelectionMode="SelectionMode.SingleSelection">
                    @foreach (var climate in Climates)
                    {
                        <MudChip Value="@climate.Id" Icon="@climate.Icon" Default="@(Model.ClimateId == climate.Id)">
                            @climate.Terminology
                        </MudChip>
                    }
                </MudChipSet>
            </div>

            <MudSwitch T="bool" @bind-Value="HasOwnRaceLength" Label="Variable race length" />

            @if (HasOwnRaceLength)
            {
                <MudNumericField T="int"
                                 @bind-Value="Model.RaceLength"
                                 Step="10"
                                 Label="RaceLength"
                                 HelperText="Should round to nearest ten"
                                 Class="field-md" />
            }
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? RaceDialog { get; set; }

    [Parameter] public Race? Race { get; set; }

    [Parameter] public long SeasonId { get; set; }

    private List<Climate> Climates { get; set; } = [];

    private MudChip<long>? ClimateChip { get; set; }

    private EditRaceModel Model { get; set; }

    private bool HasOwnRaceLength { get; set; }

    private int backupRaceLength;

    protected override async Task OnInitializedAsync()
    {
        if (Race == null || Race.Id == 0)
            throw new InvalidOperationException("Only updating races is supported for this dialog");

        Model = new EditRaceModel(Race) { SeasonId = SeasonId };

        backupRaceLength = Model.RaceLength;

        Climates = await _climateService.GetClimates(StateFilter.Active);
    }

    private void Submit()
    {
        if (ClimateChip != null)
            Model.ClimateId = ClimateChip.Value;
        else if (Model.ClimateId == 0)
            Model.ClimateId = Climates.TakeRandomClimate().Id;

        if (!HasOwnRaceLength)
            Model.RaceLength = backupRaceLength;

        var validations = Model.RunValidations();
        if (validations.Any())
        {
            _snackbar.Add(validations.First(), Severity.Error);
            return;
        }

        if (Model.IsDirty)
        {
            var modRace = Model.Record;
            RaceDialog?.Close(DialogResult.Ok(modRace));
        }
    }

    private void Cancel() => RaceDialog?.Cancel();
}
