<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5" Color="Color.Secondary">Modify race</MudText>
    </TitleContent>
    <DialogContent>
        <MudPaper MinHeight="300px" Class="pa-4">
            <MudTextField @bind-Value="model.Name" Label="Name" Class="field-lg" />

            <div>
                <MudText Typo="Typo.subtitle2">Weather</MudText>
                <MudChipSet @bind-SelectedChip="climateChip" Mandatory="true">
                    @foreach (var climate in Climates)
                    {
                        <MudChip Value="@climate.Id" Icon="@climate.Icon" Default="@(model.ClimateId == climate.Id)">
                            @climate.Terminology
                        </MudChip>
                    }
                </MudChipSet>
            </div>

            <MudSwitch @bind-Checked="variableRaceLength" Label="Variable race length" />

            @if (variableRaceLength)
            {
                <MudNumericField T="int"
                                 @bind-Value="model.RaceLength"
                                 Step="10"
                                 Label="RaceLength"
                                 HelperText="Should round to nearest ten"
                                 Class="field-md" />
            }

            @if (errorValidations.Any())
            {
                <MudList>
                    <MudListSubheader>Error messages</MudListSubheader>
                    @foreach (var error in errorValidations)
                    {
                        <MudListItem>
                            <MudText Color="Color.Error">@error</MudText>
                        </MudListItem>
                    }
                </MudList>
            }
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? RaceDialog { get; set; }

    [Parameter] public Race? Race { get; set; }
    [Parameter] public long SeasonId { get; set; }
    [Parameter] public List<Climate> Climates { get; set; }

    MudChip? climateChip;
    bool variableRaceLength;
    int backupRaceLength;
    List<string> errorValidations = new();

    EditRaceModel model;

    protected override void OnInitialized()
    {
        model = new EditRaceModel(Race) { SeasonId = SeasonId };

        if (model.Id == 0)
        {
            throw new InvalidOperationException("Can only edit races, not create");
        }

        backupRaceLength = model.RaceLength;

        if (model.ClimateId == 0)
            model.ClimateId = Climates.TakeRandomClimate().Id;
    }

    private void Submit()
    {
        if (climateChip != null)
            model.ClimateId = (long)climateChip.Value;
        else if (model.ClimateId == 0)
            model.ClimateId = Climates.TakeRandomClimate().Id;

        if (!variableRaceLength)
            model.RaceLength = backupRaceLength;

        var validations = model.RunValidations();
        if (validations.Any())
            errorValidations.AddRange(validations);

        if (model.IsDirty)
        {
            var modRace = model.Record;
            RaceDialog?.Close(DialogResult.Ok(modRace));
        }
    }

    private void Cancel() => RaceDialog?.Cancel();
}
