@using SimTECH.PageModels.Stats

@inject ContractService _contractService

<MudDialog>
    <DialogContent>
        <MudContainer>
            <MudStack Row="true" AlignItems="AlignItems.Center" Class="px-0 pb-2">
                <MudText Typo="Typo.h5" Color="Color.Secondary">Remaining contract durations</MudText>
                <MudSpacer />
                <MudButtonGroup Variant="Variant.Text" Color="Color.Secondary">
                    <ScreenshotButton TargetId="remaining-contract-durations-popup" IsIconButton="true" />
                    <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="@(() => StatDialog?.Close())" />
                </MudButtonGroup>
            </MudStack>
            <MudPaper Height="700" Width="1000" Class="px-2" id="remaining-contract-durations-popup">
                @if (!loading)
                {
                    <ApexCharts.ApexChart TItem="DataPoint" Options="@options" Width="1000" Height="700">
                        @foreach (var data in DriverContractDurations)
                        {
                            <ApexCharts.ApexPointSeries TItem="DataPoint"
                                                        Items="@data.DataPoints"
                                                        Name="@data.Label"
                                                        XValue="@(e => e.XData)"
                                                        SeriesType="ApexCharts.SeriesType.Bar"
                                                        YValue="@(e => e.YData)" />
                        }
                    </ApexCharts.ApexChart>
                }
            </MudPaper>
        </MudContainer>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? StatDialog { get; set; }

    [Parameter] public long LeagueId { get; set; }
    [Parameter] public IEnumerable<SeasonDriver> SeasonDrivers { get; set; } = Enumerable.Empty<SeasonDriver>();
    [Parameter] public IEnumerable<SeasonTeam> SeasonTeams { get; set; } = Enumerable.Empty<SeasonTeam>();

    private List<Contract> Contracts { get; set; } = [];

    private List<ChartData> DriverContractDurations { get; set; } = [];

    ApexCharts.ApexChartOptions<DataPoint> options = new()
        {
            Chart = new()
            {
                Animations = new() { Enabled = false },
                Background = "#080808",
                Toolbar = new() { Show = false },
            },
            PlotOptions = new ApexCharts.PlotOptions
            {
                Bar = new ApexCharts.PlotOptionsBar
                {
                    Horizontal = true,
                },
            },
            Theme = new()
            {
                Mode = ApexCharts.Mode.Dark,
            },
        };

    bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        Contracts = await _contractService.GetLeagueContracts(LeagueId);

        LoadContractData();

        loading = false;
    }

    // TODO: Data collection here is not properly working, or at least the rendering to the chart
    private void LoadContractData()
    {
        foreach (var driver in SeasonDrivers)
        {
            if (driver.SeasonTeamId == null)
                continue;

            var seasonTeam = SeasonTeams.First(e => e.Id == driver.SeasonTeamId);
            var dataSet = new ChartData()
                {
                    Label = driver.Driver.FullName,
                    Stroke = new ApexCharts.SeriesStroke() { Color = seasonTeam.Colour },
                };

            var contractDurationLeft = Contracts
                .FirstOrDefault(e => e.DriverId == driver.DriverId && e.TeamId == seasonTeam.TeamId)?
                .Duration ?? 0;

            dataSet.DataPoints.Add(new DataPoint(seasonTeam.Name, contractDurationLeft));

            DriverContractDurations.Add(dataSet);
        }
    }
}
