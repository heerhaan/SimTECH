<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper Elevation="15">
        <MudText Color="Color.Tertiary">Current driver count: @(Model.BaseDrivers.Count)</MudText>
        <MudTable @ref="_table"
                  @bind-SelectedItems="Model.BaseDrivers"
                  T="Driver"
                  Items="@Drivers"
                  MultiSelection="true"
                  RowsPerPage="15"
                  Dense="true"
                  Hover="true"
                  Class="extra-dense">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Age</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText>@context.FullName</MudText>
                        <MudSpacer />
                        <CountryFlag Code="@context.Country" Size="ElementSize.Small" />
                    </MudStack>
                </MudTd>
                <MudTd>
                    <MudText Typo="Typo.caption">@(Year - context.DateOfBirth.Year)</MudText>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudPagination SelectedChanged="PageChange"
                               Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)"
                               Variant="Variant.Outlined"
                               Class="pa-4" />
            </PagerContent>
        </MudTable>
    </MudPaper>
</MudContainer>

@code {
    [CascadingParameter] public AddEntrantsModel Model { get; set; }

    [Parameter, EditorRequired] public IEnumerable<Driver> Drivers { get; set; } = Enumerable.Empty<Driver>();
    [Parameter, EditorRequired] public int Year { get; set; }
    [Parameter] public IList<Contract>? Contracts { get; set; }

    private MudTable<Driver> _table;

    protected override void OnInitialized()
    {
        if (Contracts?.Any() == true)
            Preselect();
    }

    private void Preselect()
    {
        if (Contracts == null)
            return;

        var contractedDriverIds = Contracts.Select(e => e.DriverId).ToArray();
        var preselectedDrivers = Drivers.Where(e => contractedDriverIds.Contains(e.Id)).ToArray();

        foreach (var driver in preselectedDrivers)
            Model.BaseDrivers.Add(driver);
    }

    private void PageChange(int index)
    {
        _table.NavigateTo(index - 1);
    }
}
