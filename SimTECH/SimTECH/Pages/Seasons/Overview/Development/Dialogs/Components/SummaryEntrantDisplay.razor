<MudTable T="EntrantDevelopLog"
          Items="@EntrantSummary.EntrantLogs.OrderBy(e => e.Name)"
          FixedHeader="true"
          Bordered="true"
          Dense="true"
          Class="extra-dense"
          id="@EntrantSummary.SummaryElementId">
    <ToolBarContent>
        <MudText Typo="Typo.h5" Color="Color.Tertiary">@EntrantSummary.EntrantGroup.ToString()</MudText>
        <MudDivider Vertical="true" Class="mx-2" />
        <MudText Typo="Typo.h5">Boing</MudText>
        <MudSpacer />
        <ScreenshotIconButton TargetId="@EntrantSummary.SummaryElementId" />
    </ToolBarContent>
    <HeaderContent>
        <MudTd>Name</MudTd>
        @foreach (var (asp, index) in EntrantAspects.WithIndex())
        {
            <MudTh Class="@($"overflow-hider {InspectTheWheel(index)}")">
                @asp.GetReadableAspect()
            </MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Name</MudTd>
        @foreach (var (asp, index) in EntrantAspects.WithIndex())
        {
            <MudTd Class="@(InspectTheWheel(index))">
                @{
                    var developed = context.DevelopedAspects[asp];
                }
                <MudStack Row="true"
                          Spacing="0"
                          AlignItems="AlignItems.Center"
                          Justify="Justify.Center">
                    <MudText Typo="Typo.caption"
                             Style="color:white !important">
                        @(developed.Item2 - developed.Item1)
                    </MudText>
                    <MudIcon Icon="@IconCollection.ArrowNarrowRight" Size="Size.Small" />
                    <GradientColour Min="@EntrantSummary.MinMaxValues[asp].Item1"
                                    Max="@EntrantSummary.MinMaxValues[asp].Item2"
                                    Value="@developed.Item1">
                        <MudText Typo="Typo.caption">@developed.Item1</MudText>
                    </GradientColour>
                    <MudIcon Icon="@IconCollection.ArrowNarrowRight" Size="Size.Small" />
                    <MudText Typo="Typo.caption" Style="color:white !important">@developed.Item2</MudText>
                </MudStack>
            </MudTd>
        }
    </RowTemplate>
</MudTable>

@code {
    [Parameter]
    public DevelopSummary EntrantSummary { get; set; }

    [Parameter]
    public Aspect[] EntrantAspects { get; set; }

    private static readonly string[] cycleWheel = new[]
    {
        "muted-background-primary",
        "muted-background-secondary",
        "muted-background-tertiary"
    };

    private string InspectTheWheel(int numCycle)
    {
        numCycle %= cycleWheel.Length;
        return cycleWheel[numCycle];
    }
}
