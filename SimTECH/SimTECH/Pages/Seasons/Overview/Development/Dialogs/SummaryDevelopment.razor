@using SimTECH.Pages.Seasons.Overview.Development.Dialogs.Components;
@using SimTECH.PageModels.Seasons.Development;

<MudDialog>
    <DialogContent>
        <MudPaper>
            <MudStack Row="true" AlignItems="AlignItems.Center">
                <MudIcon Icon="@Icons.Material.Filled.SsidChart" />
                <MudText Typo="Typo.h5">Summary of season developments</MudText>
                <MudSpacer />
                <MudButtonGroup Variant="Variant.Text" Color="Color.Secondary">
                    <ScreenshotIconButton TargetId="developed-summary" />
                    <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="@(() => DevelopDialog?.Close())" />
                </MudButtonGroup>
            </MudStack>
            <div class="d-flex flex-row align-center justify-space-between">
                <MudText Typo="Typo.body2" Color="Color.Info">OLD - CHANGE - NEW</MudText>
                <MudChipSet SelectedChipChanged="SelectRound" Mandatory="true">
                    <MudChip Default="true">All</MudChip>
                    @foreach (var round in Rounds)
                    {
                        <MudChip Value="@round">@round</MudChip>
                    }
                </MudChipSet>
            </div>
        </MudPaper>
        <MudPaper id="developed-summary">
            <MudStack Row="true" Spacing="0" Justify="Justify.SpaceBetween">
                <MudPaper Elevation="15" Class="px-4 py-2">
                    @if (DriverSummary != null)
                    {
                        <SummaryEntrantDisplay EntrantSummary="@DriverSummary" EntrantAspects="@DriverAspects" />
                    }
                </MudPaper>
                <MudPaper Elevation="15" Class="px-4 py-2">
                    <MudStack Justify="Justify.SpaceBetween" Class="pa-0">
                        @if (TeamSummary != null)
                        {
                            <SummaryEntrantDisplay EntrantSummary="@TeamSummary" EntrantAspects="@TeamAspects" />
                        }

                        @if (EngineSummary != null)
                        {
                            <SummaryEntrantDisplay EntrantSummary="@EngineSummary" EntrantAspects="@EngineAspects" />
                        }
                    </MudStack>
                </MudPaper>
            </MudStack>
        </MudPaper>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? DevelopDialog { get; set; }

    [Parameter] public IEnumerable<DevelopmentLog> DevelopmentLog { get; set; } = Enumerable.Empty<DevelopmentLog>();
    [Parameter] public IEnumerable<SeasonDriver> SeasonDrivers { get; set; } = Enumerable.Empty<SeasonDriver>();
    [Parameter] public IEnumerable<SeasonTeam> SeasonTeams { get; set; } = Enumerable.Empty<SeasonTeam>();
    [Parameter] public IEnumerable<SeasonEngine> SeasonEngines { get; set; } = Enumerable.Empty<SeasonEngine>();

    private static readonly Aspect[] DriverAspects = [Aspect.Skill, Aspect.Reliability, Aspect.Attack, Aspect.Defense];
    private static readonly Aspect[] TeamAspects = [Aspect.BaseCar, Aspect.Reliability, Aspect.Aero, Aspect.Chassis, Aspect.Powertrain];
    private static readonly Aspect[] EngineAspects = [Aspect.Engine, Aspect.Reliability];

    private DevelopSummary? DriverSummary;
    private DevelopSummary? TeamSummary;
    private DevelopSummary? EngineSummary;

    private List<int> Rounds { get; set; } = new();

    private int? SelectedRound { get; set; }

    protected override void OnInitialized()
    {
        // Build summaries first
        BuildSummaries();

        foreach (var round in DevelopmentLog.Select(e => e.AfterRound).Distinct())
            Rounds.Add(round);
    }

    private void SelectRound(MudChip? chip)
    {
        if (chip == null)
            return;

        if (chip.Value is int number)
            SelectedRound = number;
        else
            SelectedRound = null;

        BuildSummaries();

        StateHasChanged();
    }

    private void BuildSummaries()
    {
        foreach (var entrantSummary in DevelopmentLog
            .Where(e => SelectedRound == null || e.AfterRound == SelectedRound.Value)
            .GroupBy(e => e.EntrantGroup))
        {
            var entrantLog = new List<EntrantDevelopLog>();

            // Iterates through the logs of a single entrant
            foreach (var developed in entrantSummary.ToArray().GroupBy(e => e.EntrantId))
            {
                EntrantDevelopLog? currentLog;
                var developedLogs = developed.ToArray();

                switch (entrantSummary.Key)
                {
                    case Entrant.Driver:
                        currentLog = CreateDriverLog(developed.Key, developedLogs);
                        break;
                    case Entrant.Team:
                        currentLog = CreateTeamLog(developed.Key, developedLogs);
                        break;
                    case Entrant.Engine:
                        currentLog = CreateEngineLog(developed.Key, developedLogs);
                        break;
                    default:
                        currentLog = null;
                        break;
                }

                if (currentLog != null)
                    entrantLog.Add(currentLog);
            }

            var minMaxPerAspect = new Dictionary<Aspect, (int, int)>();
            foreach (var allChanged in entrantLog.SelectMany(e => e.DevelopedAspects).GroupBy(e => e.Key))
            {
                var lowest = allChanged.Select(e => e.Value.Item1).Min();
                var highest = allChanged.Select(e => e.Value.Item1).Max();

                minMaxPerAspect.Add(allChanged.Key, (lowest, highest));
            }

            var developedSummary = new DevelopSummary
                {
                    EntrantGroup = entrantSummary.Key,
                    EntrantLogs = entrantLog,
                    MinMaxValues = minMaxPerAspect,
                };

            switch (entrantSummary.Key)
            {
                case Entrant.Driver:
                    DriverSummary = developedSummary;
                    break;
                case Entrant.Team:
                    TeamSummary = developedSummary;
                    break;
                case Entrant.Engine:
                    EngineSummary = developedSummary;
                    break;
            }
        }
    }

    private EntrantDevelopLog? CreateDriverLog(long driverId, DevelopmentLog[] logs)
    {
        var matchingDriver = SeasonDrivers?.FirstOrDefault(e => e.Id == driverId);

        if (matchingDriver == null)
            return null;

        var driverDeveloped = new Dictionary<Aspect, (int, int)>();

        foreach (var asp in DriverAspects)
        {
            var valueChanged = logs.Where(e => e.DevelopedAspect == asp).Select(e => e.Change).Sum();
            var actualValue = matchingDriver.RetrieveAspectValue(asp);

            driverDeveloped.Add(asp, (valueChanged, actualValue));
        }

        // var developedAspects = logs
        //     .GroupBy(e => e.DevelopedAspect)
        //     .ToDictionary(e =>
        //         e.Key,
        //         e => (e.Select(x => x.Change).Sum(), matchingDriver.RetrieveAspectValue(e.Key)));

        return new EntrantDevelopLog
            {
                EntrantId = driverId,
                Entrant = Entrant.Driver,
                Name = matchingDriver.Driver.FullName,
                Nationality = matchingDriver.Driver.Country,
                DevelopedAspects = driverDeveloped,
            };
    }

    private EntrantDevelopLog? CreateTeamLog(long teamId, DevelopmentLog[] logs)
    {
        var matchingTeam = SeasonTeams?.FirstOrDefault(e => e.Id == teamId);

        if (matchingTeam == null)
            return null;

        var teamDeveloped = new Dictionary<Aspect, (int, int)>();

        foreach (var asp in TeamAspects)
        {
            var valueChanged = logs.Where(e => e.DevelopedAspect == asp).Select(e => e.Change).Sum();
            var actualValue = matchingTeam.RetrieveAspectValue(asp);

            teamDeveloped.Add(asp, (valueChanged, actualValue));
        }

        return new EntrantDevelopLog
            {
                EntrantId = teamId,
                Entrant = Entrant.Team,
                Name = matchingTeam.Name,
                Nationality = matchingTeam.Team.Country,
                DevelopedAspects = teamDeveloped,
            };
    }

    private EntrantDevelopLog? CreateEngineLog(long engineId, DevelopmentLog[] logs)
    {
        var matchingEngine = SeasonEngines?.FirstOrDefault(e => e.Id == engineId);

        if (matchingEngine == null)
            return null;

        var engineDeveloped = new Dictionary<Aspect, (int, int)>();

        foreach (var asp in EngineAspects)
        {
            var valueChanged = logs.Where(e => e.DevelopedAspect == asp).Select(e => e.Change).Sum();
            var actualValue = matchingEngine.RetrieveAspectValue(asp);

            engineDeveloped.Add(asp, (valueChanged, actualValue));
        }

        return new EntrantDevelopLog
            {
                EntrantId = engineId,
                Entrant = Entrant.Engine,
                Name = matchingEngine.Name,
                DevelopedAspects = engineDeveloped,
            };
    }
}
