@page "/developer/{SeasonId:long}"

@using SimTECH.Pages.Seasons.Overview.Development.Components
@using SimTECH.Pages.Seasons.Overview.Development.Dialogs

@inject LeagueService _leagueService
@inject SeasonEntrantService _entrantService
@inject SeasonService _seasonService
@inject BreadcrumbProvider _bread
@inject IDialogService _dialogService
@inject ISnackbar _snack

<PageTitle>Development</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <CascadingValue Value="@DevelopModel">
        <MudGrid Spacing="1">
            <MudItem xs="12">
                <MudPaper Elevation="15" MinHeight="60px" Class="pa-2 text-center">
                    <MudText Typo="Typo.h3">Entrant development</MudText>
                </MudPaper>
            </MudItem>
            @if (!loading)
            {
                <MudItem xs="3">
                    <MudPaper Class="pa-2">
                        <MudText Typo="Typo.h5">Settings</MudText>
                        <MudDivider />

                        <MudStack>
                            <DevelopSettings RaceClasses="@RaceClasses" OnChipChanged="ChipChanged" />

                            @if (DevelopModel.ActiveQuantifier == Quantifier.Range)
                            {
                                <div>
                                    <MudDivider />
                                </div>

                                <MudStack Spacing="1">
                                    <MudText Typo="Typo.subtitle1">Development range</MudText>
                                    <MudNumericField T="int" Label="MIN" ValueChanged="ApplyMinRange" Class="field-sm" />
                                    <MudNumericField T="int" Label="MAX" ValueChanged="ApplyMaxRange" Class="field-sm" />
                                </MudStack>
                            }
                        </MudStack>

                        <MudDivider />

                        <MudButtonGroup VerticalAlign="true" Variant="Variant.Outlined" Color="Color.Secondary" Class="mt-4">
                            <MudButton FullWidth="true"
                                       OnClick="ShowWeightedDevelopmentRanges">
                                <span>SET ranges for @DevelopModel.ActiveEntrant & @DevelopModel.ActiveAspect</span>
                            </MudButton>
                            <MudButton FullWidth="true"
                                       OnClick="ShowDevelopmentSummary">
                                <span>Season summary</span>
                            </MudButton>
                        </MudButtonGroup>
                    </MudPaper>
                </MudItem>
                <MudItem xs="9">
                    <MudPaper>
                        <DevelopEntrant DevelopedEntrants="@DevelopedEntrants">
                            <MudText Typo="Typo.h5">Development</MudText>
                            <MudDivider Vertical="true" Class="mx-2" />
                            <MudText Typo="Typo.h5">@DevelopModel.ActiveAspect.ReadableAspect()</MudText>
                            <MudSpacer />
                            <MudButtonGroup Color="Color.Tertiary" Variant="Variant.Text">
                                @if (ranDevelop)
                                {
                                    <MudTooltip Text="Save development" Placement="Placement.Top" Color="Color.Tertiary">
                                        <MudIconButton Icon="@Icons.Material.Filled.Save"
                                                       OnClick="SaveDevelopment"
                                                       Class="btn-sm" />
                                    </MudTooltip>
                                }
                                <MudTooltip Text="Run development" Placement="Placement.Top" Color="Color.Tertiary">
                                    <MudIconButton Icon="@Icons.Material.Filled.Recycling"
                                                   OnClick="RunDevelop"
                                                   Class="btn-sm" />
                                </MudTooltip>
                                <ScreenshotIconButton TargetId="development-results" Class="btn-sm" />
                            </MudButtonGroup>
                        </DevelopEntrant>
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
    </CascadingValue>
</MudContainer>

@code {
    [Parameter] public long SeasonId { get; set; }

    public DevelopModel DevelopModel { get; set; } = new();
    public List<DevelopedEntrant> DevelopedEntrants { get; set; } = new();
    public List<RaceClass>? RaceClasses { get; set; }

    private List<SeasonEngine> SeasonEngines { get; set; }
    private List<SeasonTeam> SeasonTeams { get; set; }
    private List<SeasonDriver> SeasonDrivers { get; set; }
    private List<DevelopmentRange> LeagueDevelopmentRanges { get; set; }

    bool loading = true;
    bool ranDevelop;
    int currentYear;
    int currentMinRange = 0;
    int currentMaxRange = 0;

    protected override async Task OnInitializedAsync()
    {
        await RetrieveEntrants();

        var season = await _seasonService.GetSeasonById(SeasonId);

        if (season.HasRaceClasses)
            RaceClasses = season.RaceClasses.ToList();

        currentYear = season.Year;
        LeagueDevelopmentRanges = await _leagueService.GetLeagueDevelopmentRanges(season.LeagueId);

        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Seasons", href: "seasons"),
            new BreadcrumbItem("Overview", href: $"overview/{SeasonId}"),
            new BreadcrumbItem("Development", href: $"developer/{SeasonId}", disabled: true),
        });

        LoadEntrants();

        loading = false;
    }

    private async Task RetrieveEntrants()
    {
        SeasonEngines = await _entrantService.GetSeasonEngines(SeasonId);
        SeasonTeams = await _entrantService.GetSeasonTeams(SeasonId);
        SeasonDrivers = await _entrantService.GetSeasonDrivers(SeasonId);
    }

    private void LoadEntrants()
    {
        ranDevelop = false;

        switch (DevelopModel.ActiveEntrant)
        {
            case Entrant.Driver:
                DevelopDrivers();
                break;
            case Entrant.Team:
                DevelopTeams();
                break;
            case Entrant.Engine:
                DevelopEngines();
                break;
            default:
                throw new InvalidOperationException("wtf unexpected entrant added to develop? (how)");
        }

        if (DevelopModel.ActiveAspect == Aspect.Reliability)
        {
            foreach (var entrant in DevelopedEntrants)
                entrant.ValueMaximumLimit = 1000;
        }
    }

    private void DevelopDrivers()
    {
        var allowedTeamIds = SeasonTeams
            .Where(e => DevelopModel.ActiveRaceClassId == default || e.ClassId == DevelopModel.ActiveRaceClassId)
            .Select(e => e.Id)
            .ToList();

        DevelopedEntrants = SeasonDrivers
            .Where(e => e.SeasonTeamId.HasValue && allowedTeamIds.Contains(e.SeasonTeamId.Value))
            .Select(e => new DevelopedEntrant
                {
                    Id = e.Id,
                    Name = e.Driver.FullName,
                    Nationality = e.Driver.Country,
                    Optional = currentYear - e.Driver.DateOfBirth.Year,
                    Old = e.RetrieveAspectValue(DevelopModel.ActiveAspect),
                    Mark = e.Driver.Mark
                })
            .ToList();

        DevelopModel.IsOptionalColumnVisible = true;
    }

    private void DevelopTeams()
    {
        DevelopedEntrants = SeasonTeams
            .Where(e => DevelopModel.ActiveRaceClassId == default || e.ClassId == DevelopModel.ActiveRaceClassId)
            .Select(e => new DevelopedEntrant
                {
                    Id = e.Id,
                    Name = e.Name,
                    Nationality = e.Team.Country,
                    Optional = null,
                    Old = e.RetrieveAspectValue(DevelopModel.ActiveAspect),
                    Mark = e.Team.Mark
                })
            .ToList();

        DevelopModel.IsOptionalColumnVisible = false;
    }

    private void DevelopEngines()
    {
        var allowedEngineIds = SeasonTeams
            .Where(e => DevelopModel.ActiveRaceClassId == default || e.ClassId == DevelopModel.ActiveRaceClassId)
            .Select(e => e.SeasonEngineId)
            .Distinct()
            .ToList();

        DevelopedEntrants = SeasonEngines
            .Where(e => allowedEngineIds.Contains(e.Id))
            .Select(e => new DevelopedEntrant
                {
                    Id = e.Id,
                    Name = e.Name,
                    Nationality = null,
                    Optional = null,
                    Old = e.RetrieveAspectValue(DevelopModel.ActiveAspect),
                })
            .ToList();

        DevelopModel.IsOptionalColumnVisible = false;
    }

    private void ChipChanged(bool reloadEntrants)
    {
        if (reloadEntrants)
            LoadEntrants();

        ApplyCommon();
    }

    private void ApplyCommon()
    {
        if (DevelopModel.ActiveQuantifier == Quantifier.Set)
        {
            ApplyDefaultRanges();
        }
        else if (DevelopModel.ActiveQuantifier == Quantifier.Range && currentMinRange != currentMaxRange)
        {
            ApplyMinRange(currentMinRange);
            ApplyMaxRange(currentMaxRange);
        }
    }

    private void ApplyDefaultRanges()
    {
        List<DevelopmentRange> setCompareRange = LeagueDevelopmentRanges.GetAspectRanges(DevelopModel.ActiveAspect);
        List<DevelopmentRange>? additionalCompareRange = LeagueDevelopmentRanges.GetAspectRanges(Aspect.Age);

        // I know, I know this is awful
        if (DevelopModel.ActiveEntrant != Entrant.Driver || DevelopModel.ActiveAspect != Aspect.Skill)
            additionalCompareRange = null;

        if (!setCompareRange.Any() && !(additionalCompareRange?.Any() == true))
        {
            // Fallback minimum and maximum with the defaults
            foreach (var entrant in DevelopedEntrants)
            {
                entrant.Min = -2;
                entrant.Max = 2;
            }

            return;
        }

        foreach (var entrant in DevelopedEntrants)
        {
            int min = 0;
            int max = 0;

            var matchRange = setCompareRange.FirstOrDefault(e => e.Comparer >= entrant.Old);

            if (matchRange == null)
                matchRange = setCompareRange[setCompareRange.Count - 1];

            min = matchRange.Minimum;
            max = matchRange.Maximum;

            if (additionalCompareRange?.Any() == true && entrant.Optional.HasValue)
            {
                var optRange = additionalCompareRange.FirstOrDefault(e => e.Comparer >= entrant.Optional.Value);

                if (optRange != null)
                {
                    min += optRange.Minimum;
                    max += optRange.Maximum;
                }
            }

            entrant.Min = min;
            entrant.Max = max;
        }
    }

    private void ApplyMinRange(int newMin)
    {
        currentMinRange = newMin;

        foreach (var entrant in DevelopedEntrants)
            entrant.Min = newMin;
    }

    private void ApplyMaxRange(int newMax)
    {
        currentMaxRange = newMax;

        foreach (var entrant in DevelopedEntrants)
            entrant.Max = newMax;
    }

    private void RunDevelop()
    {
        foreach (var entrant in DevelopedEntrants)
        {
            if (entrant.Min > entrant.Max)
            {
                _snack.Add("oi you cunt, a minimum should be less than the maximum. you better fix that shit first", Severity.Error);
                return;
            }

            entrant.Change = NumberHelper.RandomInt(entrant.Min, entrant.Max);
            entrant.New = entrant.Old + entrant.Change;

            // Sets the minimum and maximum value limit if those are set
            if (entrant.New < entrant.ValueMinimumLimit)
                entrant.New = entrant.ValueMinimumLimit;
            else if (entrant.New > entrant.ValueMaximumLimit)
                entrant.New = entrant.ValueMaximumLimit;

            // Reapply the change one more time in the case a min/max-limit was set
            entrant.Change = entrant.New - entrant.Old;
        }

        var allChanges = DevelopedEntrants.Select(e => e.Change).Where(e => e != 0).ToArray();

        if (allChanges.Any())
        {
            DevelopModel.MinChange = allChanges.Min();
            DevelopModel.MaxChange = allChanges.Max();

            ranDevelop = true;
        }
    }

    private async Task SaveDevelopment()
    {
        var developedValues = DevelopedEntrants.ToDictionary(e => e.Id, e => e.New);

        switch (DevelopModel.ActiveEntrant)
        {
            case Entrant.Driver:
                await _entrantService.SaveDriverDevelopment(developedValues, DevelopModel.ActiveAspect);
                break;
            case Entrant.Team:
                await _entrantService.SaveTeamDevelopment(developedValues, DevelopModel.ActiveAspect);
                break;
            case Entrant.Engine:
                await _entrantService.SaveEngineDevelopment(developedValues, DevelopModel.ActiveAspect);
                break;
        }

        await RetrieveEntrants();
        await _entrantService.SaveDevelopmentLog(CreateLog);

        LoadEntrants();
    }

    private List<DevelopmentLog> CreateLog => DevelopedEntrants.Select(e =>
        new DevelopmentLog
            {
                EntrantId = e.Id,
                EntrantGroup = DevelopModel.ActiveEntrant,
                DevelopedAspect = DevelopModel.ActiveAspect,
                Change = e.Change,
                SeasonId = SeasonId,
            })
        .ToList();

    private async Task ShowWeightedDevelopmentRanges()
    {
        var aspectRanges = new Dictionary<Aspect, List<DevelopmentRange>>();
        var activeRanges = LeagueDevelopmentRanges.GetAspectRanges(DevelopModel.ActiveAspect);
        var ageRanges = LeagueDevelopmentRanges.GetAspectRanges(Aspect.Age);

        // TODO: As of now there is no easy way to get all the development ranges meant for a certain entrant

        if (activeRanges?.Any() == true)
            aspectRanges.Add(DevelopModel.ActiveAspect, activeRanges);

        if (DevelopModel.ActiveEntrant == Entrant.Driver && ageRanges?.Any() == true)
            aspectRanges.Add(Aspect.Age, ageRanges);

        var parameters = new DialogParameters
        {
            ["ForEntrant"] = DevelopModel.ActiveEntrant,
            ["AspectRanges"] = aspectRanges
        };

        await _dialogService.ShowAsync<WeightedDevelopRanges>("Weighted development ranges", parameters, Globals.StatisticDialogDefaultOptionsXl);
    }

    private async Task ShowDevelopmentSummary()
    {
        var developmentLog = await _entrantService.GetDevelopmentLog(SeasonId);

        var parameters = new DialogParameters
            {
                ["DevelopmentLog"] = developmentLog,
                ["SeasonDrivers"] = SeasonDrivers,
                ["SeasonTeams"] = SeasonTeams,
                ["SeasonEngines"] = SeasonEngines
            };

        await _dialogService.ShowAsync<SummaryDevelopment>("Summary development", parameters, Globals.StatisticDialogDefaultOptionsXl);
    }
}
