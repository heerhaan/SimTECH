@using SimTECH.Pages.Seasons.Overview.Tabs.StandingsTab.Dialogs
@using SimTECH.Pages.Seasons.Overview.Tabs.StandingsTab.Components

@inject IDialogService _dialogService

<MudPaper Elevation="15">
    <MudTable Items="@StandingDrivers" Dense="true" Class="extra-dense" id="wdc-season-results">
        <ToolBarContent>
            <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4 mud-width-full">
                <MudText Typo="Typo.h5">World Drivers Championship @OverviewModel.Season.Year</MudText>
                <MudSpacer />
                <MudButtonGroup Color="Color.Tertiary" Variant="Variant.Text">
                    <MudIconButton Icon="@Icons.Material.Outlined.InsertChart" OnClick="ShowWdcResultGraph" />
                    <ScreenshotIconButton TargetId="wdc-season-results" Colour="Color.Tertiary" />
                </MudButtonGroup>
            </MudStack>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Class="number-col"></MudTh>
            <MudTh Class="accent-cell"></MudTh>
            <MudTh Style="width: 220px">Driver</MudTh>
            <MudTh Class="number-col">NO</MudTh>
            <MudTh>PTS</MudTh>
            @foreach (var round in CountryRounds.OrderBy(e => e.Key))
            {
                <MudTh>
                    <CountryFlag Code="@round.Value" Size="ElementSize.Small" />
                </MudTh>
            }
            <MudTh Class="number-col">AVG</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Class="number-col">
                <DriverPosition Number="@context.Position" Colour="@context.Colour" Accent="@context.Accent" />
            </MudTd>
            <MudTd Class="accent-cell">
                <SmolAccent Colour="@context.Colour" />
            </MudTd>
            <MudTd Class="overflow-hider">
                <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                    <MudText Class="overflow-hider" Style="@(context.Mark ? "text-decoration: underline" : "")">@context.Name</MudText>
                    <MudSpacer />
                    <CountryFlag Code="@context.Nationality" Size="ElementSize.Small" />
                </MudStack>
            </MudTd>
            <MudTd Class="number-col-lg">
                <NumberDisplay Colour="@context.Colour" Accent="@context.Accent">@context.Number</NumberDisplay>
            </MudTd>
            <MudTd>
                <MudText Typo="Typo.caption">@context.Points</MudText>
            </MudTd>
            @foreach (var round in CountryRounds.OrderBy(e => e.Key))
            {
                var resultCell = context.ResultCells.Find(e => e.Round == round.Key);

                <MudTd Class="result-cell" Style="@(resultCell?.GetResultStyle(lowestScoringPosition) ?? string.Empty)">
                    <ResultLabel Text="@(resultCell?.GetResultText() ?? "-")"
                                 HasFastestLap="@(resultCell?.FL ?? false)"
                                 HasPole="@(resultCell?.Pole ?? false)" />
                </MudTd>
            }
            <MudTd>
                <MudText Typo="Typo.caption">@context.Average.ToString("F1")</MudText>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    [CascadingParameter] public OverviewModel OverviewModel { get; set; }

    [Parameter] public Dictionary<int, Country> CountryRounds { get; set; }

    private List<StandingDriverModel> StandingDrivers { get; set; } = new();

    private int lowestScoringPosition = 10;

    protected override void OnInitialized()
    {
        int indexer = 0;

        StandingDrivers = OverviewModel.ClassDrivers()
            .OrderByDescending(e => e.Points)
                .ThenByDescending(e => e.HiddenPoints)
            .Select(e =>
                ToDriverResultModel(e, OverviewModel.ClassResults().Where(r => r.SeasonDriverId == e.Id).ToList(), ++indexer))
            .ToList();

        if (OverviewModel.Season?.PointAllotments?.Any() == true)
            lowestScoringPosition = OverviewModel.Season.PointAllotments.Max(e => e.Position);
    }

    private StandingDriverModel ToDriverResultModel(SeasonDriver driver, List<Result> results, int position)
    {
        var team = OverviewModel.SeasonTeams.FirstOrDefault(e => e.Id == driver.SeasonTeamId);

        return new StandingDriverModel
            {
                Id = driver.Id,
                Position = position,
                Name = driver.Driver.FullName,
                Number = driver.Number,
                Nationality = driver.Driver.Country,
                Colour = team?.Colour ?? "var(--mud-palette-primary)",
                Accent = team?.Accent ?? "var(--mud-palette-primary-text)",
                Points = driver.Points,
                HiddenPoints = driver.HiddenPoints,
                Mark = driver.Driver.Mark,
                SeasonTeamId = driver.SeasonTeamId,
                Team = team?.Team?.Name ?? "None",

                ResultCells = results
                    .Select(res => res.MapToResultCell(OverviewModel.Races.Single(e => e.Id == res.RaceId).Round))
                    .ToList(),
            };
    }

    private async Task ShowWdcResultGraph()
    {
        var parameters = new DialogParameters { ["Drivers"] = StandingDrivers, ["Season"] = OverviewModel.Season };

        _ = await _dialogService.ShowAsync<WdcResultChart>("WDC results chart", parameters, Globals.StatisticDialogDefaultOptionsXl);
    }
}
