@using SimTECH.Pages.Seasons.Overview.Dialogs

@inject IDialogService _dialogService

<MudTable Items="@StandingConstructors" Dense="true" id="wcc-season-results">
    <ToolBarContent>
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4 mud-width-full">
            <MudText Typo="Typo.h5">World Constructors Championship @(OverviewModel.Season.Year)</MudText>
            <MudSpacer />
            <MudButtonGroup Color="Color.Tertiary" Variant="Variant.Text">
                <MudButton StartIcon="@Icons.Material.Outlined.InsertChart"
                           IconSize="Size.Small"
                           OnClick="ShowWccResultGraph">
                    Chart
                </MudButton>
                <ScreenshotButton TargetId="wcc-season-results" Colour="Color.Tertiary" />
            </MudButtonGroup>
        </MudStack>
    </ToolBarContent>
    <HeaderContent>
        <MudTh Class="number-col"></MudTh>
        <MudTh Class="accent-cell"></MudTh>
        <MudTh Style="width: 220px">Team</MudTh>
        <MudTh Style="width: 220px">Principal</MudTh>
        <MudTh>PTS</MudTh>
        @foreach (var round in CountryRounds.OrderBy(e => e.Key))
        {
            <MudTh Class="number-col-lg">
                <CountryFlag Code="@round.Value" Size="ElementSize.Small" />
            </MudTh>
        }
        <MudTh>AVG</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Class="number-col">
            <DriverPosition Number="@context.Position" Colour="@context.Colour" Accent="@context.Accent" />
        </MudTd>
        <MudTd Class="accent-cell">
            <SmolAccent Colour="@context.Colour" />
        </MudTd>
        <MudTd Class="overflow-hider" Style="@(ViewHelper.SetBorderRightStyle(context.Colour))">
            <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                <MudText Class="overflow-hider" Style="@(context.Mark ? "text-decoration: underline" : "")">@context.Name</MudText>
                <MudSpacer />
                <CountryFlag Code="@context.Nationality" Size="ElementSize.Small" />
            </MudStack>
        </MudTd>
        <MudTd Class="overflow-hider">
            <MudText>@context.Principal</MudText>
        </MudTd>
        <MudTd>
            <MudText Typo="Typo.caption">@context.Points</MudText>
        </MudTd>
        @foreach (var round in CountryRounds.OrderBy(e => e.Key))
        {
            var teamResults = context.ResultCells.Where(e => e.Round == round.Key).ToList();

            <MudTd Class="result-cell">
                @if (teamResults.Any())
                {
                    @foreach (var result in teamResults)
                    {
                        <ResultLabel Text="@result.GetResultText()"
                                     Style="@result.GetResultStyle(lowestScoringPosition)" />
                    }
                }
                else
                {
                    <MudText>-</MudText>
                }
            </MudTd>
        }
        <MudTd>
            <MudText Typo="Typo.caption">@context.Average.ToString("F1")</MudText>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    [CascadingParameter]
    public OverviewModel OverviewModel { get; set; }

    [Parameter]
    public Dictionary<int, Country> CountryRounds { get; set; }

    [Parameter]
    public List<StandingTeamModel> StandingConstructors { get; set; }

    private int lowestScoringPosition
    {
        get
        {
            var lowest = 10;

            if (OverviewModel.Season?.PointAllotments?.Any() == true)
                lowest = OverviewModel.Season.PointAllotments.Max(e => e.Position);

            return lowest;
        }
    }

    private async Task ShowWccResultGraph()
    {
        var parameters = new DialogParameters { ["Teams"] = StandingConstructors, ["Season"] = OverviewModel.Season };

        _ = await _dialogService.ShowAsync<WccResultChart>("WCC results chart", parameters, Globals.StatisticDialogDefaultOptionsXl);
    }
}
