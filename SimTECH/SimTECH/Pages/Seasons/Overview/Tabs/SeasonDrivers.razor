@inject TraitService _traitService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="px-0">
    <MudPaper MinHeight="60px">
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4">
            <MudText Typo="Typo.h3">Drivers</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Outlined"
                       Color="Color.Success"
                       Size="Size.Small"
                       StartIcon="@Icons.Material.Outlined.Add"
                       OnClick="AddItem"
                       Class="btn-md">
                New
            </MudButton>
        </MudStack>
    </MudPaper>
    <MudDataGrid T="SeasonDriverList" Items="@DriverItems" Dense="true" Loading="@loading">
        <Columns>
            <TemplateColumn T="SeasonDriverList" Sortable="false" Class="accent-cell">
                <CellTemplate>
                    <SmolAccent Colour="@context.Item.Colour" />
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="SeasonDriverList" Title="Name" SortBy="e => e.Name" CellClass="font-body1">
                <CellTemplate>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText Class="overflow-hider">@context.Item.Name</MudText>
                        <MudSpacer />
                        <CountryFlag Code="@context.Item.Country" Size="ElementSize.Small" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="e => e.Age" CellClass="font-caption" />
            <TemplateColumn T="SeasonDriverList" SortBy="e => e.Number" Title="NO" HeaderClass="number-col hide-sort-icons" CellClass="number-col">
                <CellTemplate>
                    <NumberDisplay Colour="@context.Item.Colour" Accent="@context.Item.Accent">@context.Item.Number</NumberDisplay>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="e => e.Skill" CellClass="font-caption" />
            <PropertyColumn Property="e => e.Reliability" Title="REL" CellClass="font-caption" />
            <PropertyColumn Property="e => e.Attack" Title="ATT" CellClass="font-caption" />
            <PropertyColumn Property="e => e.Defense" Title="DEF" CellClass="font-caption" />
            <PropertyColumn Property="e => e.Role" Title="Role" />
            <PropertyColumn Property="e => e.Team" CellClass="font-body1" />
            <TemplateColumn T="SeasonDriverList" Title="Traits">
                <CellTemplate>
                    <div class="d-flex flex-column">
                        @foreach (var trait in context.Item.TraitNames)
                        {
                            <p class="tiny-text-list-item">@trait</p>
                        }
                    </div>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="SeasonDriverList" Sortable="false">
                <CellTemplate>
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateItem(context.Item.SeasonDriver))" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudContainer>

@code {
    [CascadingParameter] private OverviewModel OverviewModel { get; set; }

    [Parameter] public EventCallback<SeasonDriver?> OnEditorOpen { get; set; }

    private List<SeasonDriverList> DriverItems { get; set; } = new();

    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await RestoreSeasonDrivers();
    }

    private async Task RestoreSeasonDrivers()
    {
        loading = true;

        DriverItems.Clear();

        foreach (var driver in OverviewModel.ClassDrivers)
        {
            var team = OverviewModel.SeasonTeams.FirstOrDefault(e => e.Id == driver.SeasonTeamId);

            var listing = new SeasonDriverList
                {
                    Name = driver.Driver.FullName,
                    Age = driver.GimmeAge(OverviewModel.Season.Year),
                    Number = driver.Number,
                    Country = driver.Driver.Country,
                    Role = driver.TeamRole,
                    Skill = driver.Skill,
                    Reliability = driver.Reliability,
                    Attack = driver.Attack,
                    Defense = driver.Defense,
                    Team = team?.Team?.Name ?? "DROPPED",
                    Colour = team?.Colour ?? Globals.DefaultColour,
                    Accent = team?.Accent ?? Globals.DefaultAccent,

                    SeasonDriver = driver
                };

            // Making such calls repeately is ultimately cleaner than pre-gathering stuff
            var entrantTraits = await _traitService.GetEntrantTraits(driver.DriverId, team?.TeamId ?? 0);

            listing.TraitNames = entrantTraits.Select(e => e.Name).ToList();

            DriverItems.Add(listing);
        }

        loading = false;
    }

    private async Task AddItem() => await UpdateItem(null);
    private async Task UpdateItem(SeasonDriver? item)
    {
        await OnEditorOpen.InvokeAsync(item);

        await RestoreSeasonDrivers();
    }
}
