@inject NavigationManager _nav
@inject ISnackbar _snackbar

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="px-0" id="current-season-calendar-races-overview">
    <MudPaper MinHeight="60px">
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4">
            <MudText Typo="Typo.h3">Races</MudText>
            <MudSpacer />
            @if (OverviewModel.Season.State == State.Concept)
            {
                <MudButton StartIcon="@Icons.Material.Outlined.CarRepair"
                           IconColor="Color.Primary"
                           Variant="Variant.Outlined"
                           Color="Color.Primary"
                           Size="Size.Small"
                           OnClick="AddRaces"
                           Class="btn-md">
                    Add races
                </MudButton>
            }
            <ScreenshotIconButton TargetId="current-season-calendar-races-overview" Colour="Color.Tertiary" />
        </MudStack>
    </MudPaper>
    <MudTable T="CalendarList" Items="@SeasonCalendar.OrderBy(e => e.Round)" Dense="true" Loading="@loading">
        <HeaderContent>
            <MudTh Class="number-col">Round</MudTh>
            <MudTh>Country</MudTh>
            <MudTh>Race</MudTh>
            <MudTh>Weather</MudTh>
            <MudTh>Polesitter</MudTh>
            <MudTh Class="number-col">NO</MudTh>
            <MudTh>Winner driver</MudTh>
            <MudTh Class="number-col">NO</MudTh>
            <MudTh>Winner team</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Class="number-col">
                <MudText Typo="Typo.h5">@context.Round</MudText>
            </MudTd>
            <MudTd>
                <CountryNamedFlag Code="@context.Country" Size="ElementSize.Small" Reverse="true" Class="overflow-hider" />
            </MudTd>
            <MudTd Style="max-width:300px">
                <MudText Class="overflow-hider">@context.Name</MudText>
            </MudTd>
            <MudTd>
                <CustomIcon Icon="@context.WeatherIcon" Colour="@context.WeatherColour">
                    <MudText Color="Color.Default">@context.Weather</MudText>
                </CustomIcon>
            </MudTd>

            @if (context.PoleSitter != null)
            {
                <MudTd Class="overflow-hider">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Style="max-width:250px">
                        <MudText Class="overflow-hider">@context.PoleSitter.Name</MudText>
                        <MudSpacer />
                        <CountryFlag Code="@context.PoleSitter.Country" Size="ElementSize.Small" />
                    </MudStack>
                </MudTd>
                <MudTd Class="number-col">
                    <NumberDisplay Colour="@context.PoleSitter.Colour" Accent="@context.PoleSitter.Accent">@context.PoleSitter.Number</NumberDisplay>
                </MudTd>
            }
            else
            {
                <MudTd></MudTd>
                <MudTd Class="number-col"></MudTd>
            }

            @if (context.DriverWinner != null)
            {
                <MudTd Class="overflow-hider">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Style="max-width:250px">
                        <MudText Class="overflow-hider">@context.DriverWinner.Name</MudText>
                        <MudSpacer />
                        <CountryFlag Code="@context.DriverWinner.Country" Size="ElementSize.Small" />
                    </MudStack>
                </MudTd>
                <MudTd Class="number-col">
                    <NumberDisplay Colour="@context.DriverWinner.Colour" Accent="@context.DriverWinner.Accent">@context.DriverWinner.Number</NumberDisplay>
                </MudTd>
            }
            else
            {
                <MudTd Class="number-col"></MudTd>
                <MudTd></MudTd>
            }

            <MudTd Class="overflow-hider" Style="max-width:250px">
                @if (context.TeamWinner != null)
                {
                    <MudText Typo="Typo.button">@context.TeamWinner.Name</MudText>
                }
            </MudTd>
            <MudTd>
                <MudButtonGroup Size="@Size.Small">
                    @if (OverviewModel.Season.State == State.Active && (context.Round == nextRound))
                    {
                        <MudIconButton Icon="@Icons.Material.Outlined.Logout" OnClick="@(() => GoToRace(context.Round))" />
                    }
                    else if (context.State == State.Closed)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Flag" OnClick="@(() => GoToRace(context.Round))" />
                    }
                    else if (OverviewModel.Season.State != State.Closed)
                    {
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateRace(context.Race))" />
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(async () => await DeleteRace(context.RaceId))" />
                    }
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    [CascadingParameter] public OverviewModel OverviewModel { get; set; }

    [Parameter] public IEnumerable<Climate> Climates { get; set; } = Enumerable.Empty<Climate>();
    [Parameter] public EventCallback OnAddRaces { get; set; }
    [Parameter] public EventCallback<Race?> OnEditorOpen { get; set; }
    [Parameter] public EventCallback<long> OnDelete { get; set; }

    private List<CalendarList> SeasonCalendar { get; set; } = new();

    private bool loading = true;
    private int nextRound;

    protected override void OnParametersSet()
    {
        loading = true;

        RestoreCalendar();

        loading = false;
    }

    private void RestoreCalendar()
    {
        nextRound = OverviewModel.Races.FindNext()?.Round ?? 0;
        SeasonCalendar.Clear();

        var classResults = OverviewModel.ClassResults;
        var classDrivers = OverviewModel.ClassDrivers;
        var classTeams = OverviewModel.ClassTeams;

        foreach (var race in OverviewModel.Races)
        {
            var climate = Climates.First(e => e.Id == race.ClimateId);

            var listing = new CalendarList
                {
                    RaceId = race.Id,
                    Round = race.Round,
                    Name = race.Name,
                    Country = race.Track.Country,
                    State = race.State,
                    Weather = climate.Terminology,
                    WeatherIcon = climate.Icon,
                    WeatherColour = climate.Colour ?? "#FFFFFF",
                    TrackId = race.TrackId,

                    Race = race
                };

            var polesitter = classResults.FirstOrDefault(e => e.RaceId == race.Id && e.Grid == 1);
            if (polesitter != null)
            {
                var poleDriver = classDrivers.FirstOrDefault(e => e.Id == polesitter.SeasonDriverId);
                var poleTeam = classTeams.FirstOrDefault(e => e.Id == polesitter.SeasonTeamId);

                if (poleDriver != null && poleTeam != null)
                {
                    listing.PoleSitter = new CompactDriver
                        {
                            Name = poleDriver.Driver.FullName,
                            Country = poleDriver.Driver.Country,
                            Number = poleDriver.Number,
                            Colour = poleTeam.Colour,
                            Accent = poleTeam.Accent
                        };
                }
            }

            var winner = classResults.FirstOrDefault(e => e.RaceId == race.Id && e.Position == 1);
            if (winner != null)
            {
                var winnerDriver = classDrivers.FirstOrDefault(e => e.Id == winner.SeasonDriverId);
                var winnerTeam = classTeams.FirstOrDefault(e => e.Id == winner.SeasonTeamId);

                if (winnerDriver != null && winnerTeam != null)
                {
                    listing.PoleSitter = new CompactDriver
                        {
                            Name = winnerDriver.Driver.FullName,
                            Country = winnerDriver.Driver.Country,
                            Number = winnerDriver.Number,
                            Colour = winnerTeam.Colour,
                            Accent = winnerTeam.Accent
                        };

                    listing.DriverWinner = new CompactDriver
                        {
                            Name = winnerDriver.Driver.FullName,
                            Country = winnerDriver.Driver.Country,
                            Number = winnerDriver.Number,
                            Colour = winnerTeam.Colour,
                            Accent = winnerTeam.Accent
                        };

                    listing.TeamWinner = new CompactTeam
                        {
                            Name = winnerTeam.Name,
                            Country = winnerTeam.Team.Country,
                            Colour = winnerTeam.Colour,
                            Accent = winnerTeam.Accent
                        };
                }
            }

            SeasonCalendar.Add(listing);
        }
    }

    private async Task AddRaces() => await OnAddRaces.InvokeAsync();

    private void GoToRace(int round)
    {
        var race = OverviewModel.Races.FirstOrDefault(e => e.Round == round);
        if (race == null)
        {
            _snackbar.Add("can't find the next race, you sure it exists lad?");
            return;
        }

        _nav.NavigateTo($"/raceweek/{race.Id}");
    }

    private async Task UpdateRace(Race? item) => await OnEditorOpen.InvokeAsync(item);

    private async Task DeleteRace(long raceId) => await OnDelete.InvokeAsync(raceId);
}
