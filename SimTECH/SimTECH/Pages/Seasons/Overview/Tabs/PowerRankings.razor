@inject TraitService _traitService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="px-0" id="power-rankings-overview">
    <MudPaper MinHeight="60px">
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="pa-4">
            <MudText Typo="Typo.h3">Power rankings</MudText>
            <ScreenshotButton TargetId="power-rankings-overview" Colour="Color.Tertiary" />
        </MudStack>
    </MudPaper>
    <MudDataGrid T="PowerRankingItem" Items="@PowahList" Dense="true" Loading="@Loading">
        <Columns>
            <HierarchyColumn T="PowerRankingItem" />
            <TemplateColumn T="PowerRankingItem" SortBy="e => e.DriverName" Title="Driver">
                <CellTemplate>
                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="pa-0">
                        <MudText Typo="Typo.body2" Class="overflow-hider">@context.Item.DriverName</MudText>
                        <CountryFlag Code="@context.Item.Nationality" Size="ElementSize.Small" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="PowerRankingItem"
                            SortBy="e => e.DriverNumber"
                            Title="NO"
                            HeaderClass="number-col hide-sort-icons"
                            CellClass="number-col">
                <CellTemplate>
                    <NumberDisplay Colour="@context.Item.Colour" Accent="@context.Item.Accent">@context.Item.DriverNumber</NumberDisplay>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="e => e.TeamName" Title="Team" CellClass="overflow-hider" CellStyleFunc="@SimpleCellStyle" />
            <PropertyColumn Property="e => e.Engine" Title="Engine" HeaderClass="hide-sort-icons" />
            <PropertyColumn Property="e => e.Manufacturer" Title="Supplier" HeaderClass="hide-sort-icons" />
            <PropertyColumn Property="e => e.QualyPower" Title="Q.PWR" HeaderClass="hide-sort-icons" CellClass="font-caption" />
            <PropertyColumn Property="e => e.RacePower" Title="R.PWR" HeaderClass="hide-sort-icons" CellClass="font-caption" />
            <TemplateColumn T="PowerRankingItem" Title="A/C/P" SortBy="e => e.CarPartAvg" HeaderClass="hide-sort-icons">
                <CellTemplate>
                    <MudText Typo="Typo.caption">@context.Item.Aero / @context.Item.Chassis / @context.Item.Powertrain</MudText>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="e => e.RelAvg" Title="REL.AVG" HeaderClass="hide-sort-icons" CellClass="font-caption" />
        </Columns>
        <ChildRowContent>
            <MudText Color="Color.Warning">Should still be designed properly</MudText>
            <MudText Color="Color.Warning">Would a complete overview of all the supporting numbers be useufl?</MudText>
            <MudStack Row="true" Spacing="1">
                <MudPaper Class="px-4 py-2">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudText>Driver reliability</MudText>
                        <MudDivider />
                        <MudText Typo="Typo.caption">@(context.Item.DriverRel)</MudText>
                    </MudStack>
                </MudPaper>
                <MudPaper Class="px-4 py-2">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudText>Car reliability</MudText>
                        <MudDivider />
                        <MudText Typo="Typo.caption">@(context.Item.CarRel)</MudText>
                    </MudStack>
                </MudPaper>
                <MudPaper Class="px-4 py-2">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudText>Engine reliability</MudText>
                        <MudDivider />
                        <MudText Typo="Typo.caption">@(context.Item.EngineRel)</MudText>
                    </MudStack>
                </MudPaper>
                <MudPaper Class="px-4 py-2">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudText>Tyre life bonus</MudText>
                        <MudDivider />
                        <MudText Typo="Typo.caption">@context.Item.LifeBonus</MudText>
                    </MudStack>
                </MudPaper>
                <MudPaper Class="px-4 py-2">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudText>Wear modifiers</MudText>
                        <MudDivider />
                        <RangeDisplay LeftValue="@context.Item.WearMin" RightValue="@context.Item.WearMax" />
                    </MudStack>
                </MudPaper>
                <MudPaper Class="px-4 py-2">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudText>RNG modifiers</MudText>
                        <MudDivider />
                        <RangeDisplay LeftValue="@context.Item.RngMin" RightValue="@context.Item.RngMax" />
                    </MudStack>
                </MudPaper>
            </MudStack>
        </ChildRowContent>
    </MudDataGrid>
</MudContainer>

@code {
    [CascadingParameter]
    public OverviewModel OverviewModel { get; set; }

    [Parameter]
    public int TeamRoleCarModifier { get; set; }

    private List<PowerRankingItem> PowahList { get; set; } = new();

    private List<Trait> Traits { get; set; } = new();

    private bool Loading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Loading = true;

        Traits = await _traitService.GetTraits(StateFilter.All);

        Loading = false;
    }

    private void RestorePowerRanking()
    {
        foreach (var driver in OverviewModel.ClassDrivers)
        {
            var team = OverviewModel.SeasonTeams.FirstOrDefault(e => e.Id == driver.SeasonTeamId);
            // Skip any driver who isn't currently part of a team
            if (team == null)
                continue;

            var engine = OverviewModel.SeasonEngines.First(e => e.Id == team.SeasonEngineId);
            var manufacturer = OverviewModel.Manufacturers.First(e => e.Id == team.ManufacturerId);

            var driverTraitIds = driver.Driver.DriverTraits?.Select(e => e.TraitId).ToList() ?? new();
            var teamTraitIds = team.Team.TeamTraits?.Select(e => e.TraitId).ToList() ?? new();

            var relevantTraits = Traits.Where(e => driverTraitIds.Contains(e.Id) || teamTraitIds.Contains(e.Id)).ToList();

            var basePower = driver.Skill
                + driver.RetrieveStatusBonus(TeamRoleCarModifier)
                + team.BaseValue + team.Aero + team.Chassis + team.Powertrain
                + engine.Power;

            var listing = new PowerRankingItem
                {
                    DriverName = driver.Driver.FullName,
                    DriverNumber = driver.Number,
                    Nationality = driver.Driver.Country,
                    TeamName = team.Team.Name,
                    Colour = team.Colour,
                    Accent = team.Accent,
                    Engine = engine.Name,
                    Manufacturer = manufacturer.Name,
                    QualyPower = basePower + relevantTraits.Sum(e => e.QualifyingPace),
                    RacePower = basePower + relevantTraits.Sum(e => e.RacePace),
                    Aero = team.Aero,
                    Chassis = team.Chassis,
                    Powertrain = team.Powertrain,
                    DriverRel = driver.Reliability,
                    CarRel = team.Reliability,
                    EngineRel = engine.Reliability,
                    LifeBonus = manufacturer.Pace,
                    WearMin = manufacturer.WearMin + relevantTraits.Sum(e => e.WearMin),
                    WearMax = manufacturer.WearMax + relevantTraits.Sum(e => e.WearMax),
                    RngMin = relevantTraits.Sum(e => e.RngMin),
                    RngMax = relevantTraits.Sum(e => e.RngMax),

                    CarPartAvg = NumberHelper.Average(team.Aero, team.Chassis, team.Powertrain),
                    RelAvg = NumberHelper.Average(driver.Reliability, team.Reliability, engine.Reliability),
                };

            PowahList.Add(listing);
        }
    }

    private Func<PowerRankingItem, string> SimpleCellStyle => power => ViewHelper.SetBorderRightStyle(power.Colour);
}
