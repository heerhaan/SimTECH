@using SimTECH.Pages.Seasons.Overview.Components
@using SimTECH.Pages.Seasons.Overview.Dialogs

<MudTabs Outlined="true" Centered="true">
    <MudTabPanel Text="Standings">
        <MudGrid Spacing="2" id="standings-numerical-overview">
            <MudItem xs="12">
                <MudPaper Height="75px" Class="pa-2">
                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h3">Season standings for @OverviewModel.Season.Year</MudText>
                        <ScreenshotIconButton TargetId="standings-numerical-overview" Colour="Color.Tertiary" />
                    </MudStack>
                </MudPaper>
            </MudItem>
            <MudItem xs="6">
                <DriverStandings StandingDrivers="@DriverResults" />
            </MudItem>
            <MudItem xs="6">
                <ConstructorStandings StandingConstructors="@TeamResults" />
            </MudItem>
        </MudGrid>
    </MudTabPanel>
    <MudTabPanel Text="WDC results">
        <DriverResults StandingDrivers="@DriverResults" CountryRounds="@CountryRounds" />
    </MudTabPanel>
    <MudTabPanel Text="WCC results">
        <ConstructorResults StandingConstructors="@TeamResults" CountryRounds="@CountryRounds" />
    </MudTabPanel>
</MudTabs>

@code {
    [CascadingParameter] public OverviewModel OverviewModel { get; set; }

    public List<StandingDriverModel> DriverResults { get; set; } = new();
    public List<StandingTeamModel> TeamResults { get; set; } = new();
    public Dictionary<int, Country> CountryRounds { get; set; } = new();

    protected override void OnInitialized()
    {
        CountryRounds.Clear();

        var classResults = OverviewModel.ClassResults;

        foreach (var round in OverviewModel.Races.OrderBy(e => e.Round))
            CountryRounds.Add(round.Round, round.Track?.Country ?? Globals.DefaultCountry);

        int indexer = 0;

        // TODO: Can we generalize these calls somehow?
        DriverResults = OverviewModel.ClassDrivers
            .OrderByDescending(e => e.Points)
                .ThenByDescending(e => e.HiddenPoints)
            .Select(e =>
                ToDriverResultModel(e, classResults.Where(r => r.SeasonDriverId == e.Id).ToList(), ++indexer))
            .ToList();

        indexer = 0;

        TeamResults = OverviewModel.ClassTeams
            .OrderByDescending(e => e.Points)
                .ThenByDescending(e => e.HiddenPoints)
            .Select(e =>
                ToTeamResultModel(e, classResults.Where(r => r.SeasonTeamId == e.Id).ToList(), ++indexer))
            .ToList();
    }

    private StandingDriverModel ToDriverResultModel(SeasonDriver driver, List<Result> results, int position)
    {
        var team = OverviewModel.SeasonTeams.FirstOrDefault(e => e.Id == driver.SeasonTeamId);

        return new StandingDriverModel
        {
            Id = driver.Id,
            Position = position,
            Name = driver.Driver.FullName,
            Number = driver.Number,
            Nationality = driver.Driver.Country,
            Colour = team?.Colour ?? "var(--mud-palette-primary)",
            Accent = team?.Accent ?? "var(--mud-palette-primary-text)",
            Points = driver.Points,
            HiddenPoints = driver.HiddenPoints,
            Mark = driver.Driver.Mark,
            SeasonTeamId = driver.SeasonTeamId,
            Team = team?.Team?.Name ?? "None",

            ResultCells = results
                .Select(res => res.MapToResultCell(OverviewModel.Races.Single(e => e.Id == res.RaceId).Round))
                .ToList(),
        };
    }

    private StandingTeamModel ToTeamResultModel(SeasonTeam team, List<Result> results, int position)
    {
        return new StandingTeamModel
        {
            Id = team.Id,
            Position = position,
            Name = team.Name,
            Principal = team.Principal,
            Nationality = team.Team.Country,
            Colour = team.Colour,
            Accent = team.Accent,
            Points = team.Points,
            HiddenPoints = team.HiddenPoints,
            Mark = team.Team.Mark,

            ResultCells = results
                .Select(res => res.MapToResultCell(OverviewModel.Races.Single(e => e.Id == res.RaceId).Round))
                .ToList(),
        };
    }
}
