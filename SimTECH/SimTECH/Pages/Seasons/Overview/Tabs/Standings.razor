@using SimTECH.Common.Mappers
@using SimTECH.Pages.Seasons.Overview.Components
@using SimTECH.Pages.Seasons.Overview.Dialogs
@using SimTECH.Pages.Seasons.Overview.Tabs.NestedTabs

<MudTabs Outlined="true" Centered="true">
    <MudTabPanel Text="Standings">
        <MudGrid Spacing="1" id="standings-numerical-overview">
            <MudItem xs="12">
                <MudPaper Height="75px" Class="pa-2">
                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h3">Season standings for @OverviewModel.Season.Year</MudText>
                        <ScreenshotButton TargetId="standings-numerical-overview" Colour="Color.Tertiary" />
                    </MudStack>
                </MudPaper>
            </MudItem>
            <MudItem xs="6">
                <DriverStandings StandingDrivers="@DriverResults" />
            </MudItem>
            <MudItem xs="6">
                <ConstructorStandings StandingConstructors="@TeamResults" />
            </MudItem>
        </MudGrid>
    </MudTabPanel>
    <MudTabPanel Text="WDC results">
        <DriverResults StandingDrivers="@DriverResults" CountryRounds="@CountryRounds" />
    </MudTabPanel>
    <MudTabPanel Text="WCC results">
        <ConstructorResults StandingConstructors="@TeamResults" CountryRounds="@CountryRounds" />
    </MudTabPanel>
</MudTabs>

@code {
    [CascadingParameter]
    private OverviewModel OverviewModel { get; set; }

    public List<StandingDriverModel> DriverResults { get; set; } = [];

    public List<StandingTeamModel> TeamResults { get; set; } = [];

    public Dictionary<int, Country> CountryRounds { get; set; } = [];

    protected override void OnInitialized()
    {
        RestoreStandingResults();
    }

    private void RestoreStandingResults()
    {
        DriverResults.Clear();
        TeamResults.Clear();
        CountryRounds.Clear();

        var classResults = OverviewModel.ClassResults;

        foreach (var round in OverviewModel.Races.OrderBy(e => e.Round))
            CountryRounds.Add(round.Round, round.Track?.Country ?? Globals.DefaultCountry);

        int indexer = 0;

        foreach (var driver in OverviewModel.ClassDrivers.OrderByDescending(e => e.Points).ThenByDescending(e => e.HiddenPoints))
        {
            var team = OverviewModel.SeasonTeams.FirstOrDefault(e => e.Id == driver.SeasonTeamId);

            var standingDriver = driver.MapToStandingDriver(team, ++indexer);

            standingDriver.ResultCells = OverviewModel.ClassResults
                .Where(e => e.SeasonDriverId == driver.Id)
                .Select(e => e.MapToStandingResult(OverviewModel.Races.Single(r => r.Id == e.RaceId).Round))
                .ToList();

            DriverResults.Add(standingDriver);
        }

        indexer = 0;

        foreach (var team in OverviewModel.ClassTeams.OrderByDescending(e => e.Points).ThenByDescending(e => e.HiddenPoints))
        {
            var standingTeam = team.MapToStandingTeam(++indexer);

            standingTeam.ResultCells = OverviewModel.ClassResults
                .Where(e => e.SeasonTeamId == team.Id)
                .Select(e => e.MapToStandingResult(OverviewModel.Races.Single(r => r.Id == e.RaceId).Round))
                .ToList();

            TeamResults.Add(standingTeam);
        }
    }
}
