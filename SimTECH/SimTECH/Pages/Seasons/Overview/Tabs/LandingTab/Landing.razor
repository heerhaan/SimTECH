@using SimTECH.Pages.Seasons.Overview.Dialogs

@inject ContractService _contractService
@inject IncidentService _incidentService
@inject NavigationManager _nav
@inject IDialogService _dialogService
@inject ISnackbar _snackbar

<MudGrid Spacing="2">
    <MudItem xs="12">
        <MudPaper Class="pa-4">
            <MudStack>
                <MudText Typo="Typo.h3">Season @OverviewModel.Season.Year</MudText>
                <MudDivider />
                <MudSpacer />
                <MudStack Row="true" Class="pa-0">
                    <MudText Typo="Typo.body2">Currenly in status: @OverviewModel.Season.State.ToString()</MudText>
                    <MudSpacer />
                    <MudText Typo="Typo.body2" Color="Color.Dark">Hello from the other side</MudText>
                </MudStack>
            </MudStack>
        </MudPaper>
    </MudItem>
    <MudItem xs="6">
        <MudPaper MinHeight="200px" Elevation="15" Class="pa-4 mud-height-full">
            <MudStack Class="mud-height-full">
                <MudText Typo="Typo.h5">Upcoming race</MudText>
                <MudDivider />
                @if (OverviewModel.Season.State == State.Active)
                {
                    @if (NextRace is null)
                    {
                        <MudText Typo="Typo.body2">No upcoming race for this season detected</MudText>
                    }
                    else
                    {
                        <CountryNamedFlag Code="@NextRace.Track.Country" Justify="Justify.FlexStart" Size="ElementSize.Normal" />
                        <MudText>Round @NextRace.Round - @NextRace.Name</MudText>

                        <MudSpacer />

                        <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Secondary" OnClick="GoToNextRace">Go</MudButton>
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2">
                        Dimwit, of course there is no next race since this season isn't even active.
                        <br />
                        Doubt anything is going to happen here so fuck off or start this bich, willy schlobberer.
                    </MudText>
                }
            </MudStack>
        </MudPaper>
    </MudItem>
    <MudItem xs="6">
        <MudPaper MinHeight="200px" Elevation="15" Class="pa-4 mud-height-full">
            <MudStack Class="mud-height-full">
                <MudText Typo="Typo.h5">Controls</MudText>
                <MudDivider />
                <MudText Typo="Typo.body2">
                    Control the world, bring ruin to all who oppose you.
                </MudText>

                <MudSpacer />

                @if (OverviewModel.Season.State == State.Concept)
                {
                    <MudButtonGroup Variant="Variant.Text" Color="Color.Primary">
                        <MudButton FullWidth="true" OnClick="TriggerStart">Start season</MudButton>
                        <MudButton FullWidth="true" OnClick="GoToAddEntrants">Add participants</MudButton>
                    </MudButtonGroup>
                }
                else if (OverviewModel.Season.State == State.Active)
                {
                    <MudButtonGroup Variant="Variant.Text" Color="Color.Primary">
                        <MudButton FullWidth="true" OnClick="GoToDeveloper">Development</MudButton>
                        <MudButton FullWidth="true" OnClick="TriggerFinish">Finish season</MudButton>
                    </MudButtonGroup>
                }
            </MudStack>
        </MudPaper>
    </MudItem>
    <MudItem xs="6">
        <MudPaper MinHeight="200px" Elevation="15" Class="pa-4 mud-height-full">
            <MudStack Class="mud-height-full">
                <MudText Typo="Typo.h5">Statistics</MudText>
                <MudDivider />
                <MudText Typo="Typo.body2">
                    Links to different statistics specific to this season (wow really?)
                </MudText>

                <MudSpacer />

                <MudButtonGroup Variant="Variant.Text" Color="Color.Secondary" Size="Size.Small">
                    <MudButton FullWidth="true" OnClick="ShowUsedComponents">Components</MudButton>
                    <MudButton FullWidth="true" OnClick="ShowQualyBattles">Q.Battles</MudButton>

                    @if (OverviewModel.Season.State == State.Active)
                    {
                        <MudButton FullWidth="true" OnClick="ShowRemainingContractDurations">Contract durations</MudButton>
                    }
                </MudButtonGroup>
            </MudStack>
        </MudPaper>
    </MudItem>
    <MudItem xs="6">
        <MudPaper MinHeight="200px" Elevation="15" Class="pa-4 mud-height-full">
            <MudStack Class="mud-height-full">
                <MudText Typo="Typo.h5">Classes</MudText>
                <MudDivider />

                @if (OverviewModel.Season.HasRaceClasses)
                {
                    <MudText Color="Color.Warning">This specific block will still be improved in terms of designing</MudText>

                    <MudRadioGroup Value="@OverviewModel.ActiveClassId"
                                   ValueChanged="OnClassSelected">
                        @foreach (var raceClass in OverviewModel.Season.RaceClasses)
                        {
                            <MudRadio Value="@raceClass.Id"
                                      Color="Color.Primary"
                                      UnCheckedColor="Color.Default">@raceClass.Name</MudRadio>
                        }
                    </MudRadioGroup>
                }
            </MudStack>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter] public OverviewModel OverviewModel { get; set; }

    [Parameter] public Race? NextRace { get; set; }
    [Parameter] public EventCallback OnStartSeason { get; set; }
    [Parameter] public EventCallback OnFinishSeason { get; set; }
    [Parameter] public EventCallback<long> OnClassSelected { get; set; }

    private async Task TriggerStart() => await OnStartSeason.InvokeAsync();
    private async Task TriggerFinish() => await OnFinishSeason.InvokeAsync();

    private async Task ShowQualyBattles()
    {
        var parameters = new DialogParameters
        {
            ["SeasonDrivers"] = OverviewModel.ClassDrivers(),
            ["SeasonTeams"] = OverviewModel.ClassTeams(),
            ["Results"] = OverviewModel.ClassResults()
        };

        _ = await _dialogService.ShowAsync<QualyBattles>("QualifyingBattles", parameters, Globals.StatisticDialogDefaultOptions);
    }

    private async Task ShowUsedComponents()
    {
        var incidents = await _incidentService.GetIncidents(StateFilter.Default);

        var parameters = new DialogParameters
            {
                ["SeasonDrivers"] = OverviewModel.ClassDrivers(),
                ["SeasonTeams"] = OverviewModel.ClassTeams(),
                ["Results"] = OverviewModel.ClassResults(),
                ["Incidents"] = incidents,
            };

        _ = await _dialogService.ShowAsync<UsedComponents>("UsedComponents", parameters, Globals.StatisticDialogDefaultOptions);
    }

    private async Task ShowRemainingContractDurations()
    {
        var activeContracts = await _contractService.GetLeagueContracts(OverviewModel.Season.LeagueId);

        var parameters = new DialogParameters
            {
                ["SeasonDrivers"] = OverviewModel.ClassDrivers(),
                ["SeasonTeams"] = OverviewModel.ClassTeams(),
                ["Contracts"] = activeContracts
            };

        _ = await _dialogService.ShowAsync<ContractLengthRemaining>("Remaining durations", parameters, Globals.StatisticDialogDefaultOptions);
    }

    private void GoToNextRace()
    {
        if (NextRace == null)
        {
            _snackbar.Add("Can't find the next race, ya sure it exists lad?");
            return;
        }

        _nav.NavigateTo($"/raceweek/{NextRace.Id}");
    }

    private void GoToAddEntrants() => _nav.NavigateTo($"/entrantwizard/{OverviewModel.Season.Id}");

    private void GoToDeveloper() => _nav.NavigateTo($"/developer/{OverviewModel.Season.Id}");

    private void GoToClassDeveloper() => _nav.NavigateTo($"/developer/{OverviewModel.Season.Id}/{OverviewModel.ActiveClassId}");
}
