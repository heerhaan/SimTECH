@using SimTECH.Pages.Seasons.Overview.Dialogs

@inject EngineService _engineService
@inject SeasonEngineService _seasonEngineService
@inject IDialogService _dialogService

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper MinHeight="60px">
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4">
            <MudText Typo="Typo.h3">Engines</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Outlined"
                       Color="Color.Success"
                       Size="Size.Small"
                       StartIcon="@Icons.Material.Outlined.Add"
                       OnClick="AddItem"
                       Class="btn-md">
                New
            </MudButton>
        </MudStack>
    </MudPaper>
    <MudDataGrid T="SeasonEngine" Items="@SeasonEnginesList" Dense="true">
        <Columns>
            <PropertyColumn Property="e => e.Name" CellClass="font-body1" />
            <PropertyColumn Property="e => e.Power" CellClass="font-caption" />
            <PropertyColumn Property="e => e.Reliability" Title="REL" CellClass="font-caption" />
            <PropertyColumn Property="e => e.Rebadged" />
            <TemplateColumn T="SeasonEngine" Sortable="false">
                <CellTemplate>
                    <MudButtonGroup>
                        <MudIconButton Size="Size.Small"
                                       Icon="@Icons.Material.Outlined.Edit"
                                       OnClick="@(() => UpdateItem(context.Item))" />
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudContainer>

@code {
    [CascadingParameter] private OverviewModel OverviewModel { get; set; }

    [Parameter] public EventCallback<SeasonEngine?> OnEditorOpen { get; set; }

    private List<SeasonEngine> SeasonEnginesList { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        SeasonEnginesList = await _seasonEngineService.GetSeasonEngines(OverviewModel.Season.Id);
    }

    private async Task AddItem() => await UpdateItem(null);
    private async Task UpdateItem(SeasonEngine? item)
    {
        var seasonId = OverviewModel.Season.Id;
        var engines = await _engineService.GetAvailableEngines(seasonId);

        var parameters = new DialogParameters
            {
                ["SeasonId"] = seasonId,
                ["Engines"] = engines,
                ["SeasonEngine"] = item,
            };

        var dialog = await _dialogService.ShowAsync<SeasonEngineEditor>("Modify in-season engine", parameters);
        var result = await dialog.Result;

        if (result == null || result.Canceled)
            return;

        if (result.Data != null && result.Data is SeasonEngine updatedEngine)
        {
            await _seasonEngineService.UpdateSeasonEngine(updatedEngine);
            SeasonEnginesList = await _seasonEngineService.GetSeasonEngines(seasonId);
        }
    }
}
