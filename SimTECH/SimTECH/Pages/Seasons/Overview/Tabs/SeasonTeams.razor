@inject SeasonEngineService _seasonEngineService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="px-0">
    <MudPaper MinHeight="60px">
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4">
            <MudText Typo="Typo.h3">Teams</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Outlined"
                       Color="Color.Success"
                       Size="Size.Small"
                       StartIcon="@Icons.Material.Outlined.Add"
                       OnClick="AddItem"
                       Class="btn-md">
                New
            </MudButton>
        </MudStack>
    </MudPaper>
    <MudDataGrid T="SeasonTeamList" Items="@TeamItems" Dense="true" Loading="@loading" Class="overflow-hider">
        <Columns>
            <TemplateColumn Sortable="false" Class="accent-cell">
                <CellTemplate>
                    <SmolAccent Colour="@context.Item?.Colour" />
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="e => e.Name" CellClass="font-body1" />
            <TemplateColumn T="SeasonTeamList" SortBy="e => e.Country" Title="Country">
                <CellTemplate>
                    <CountryNamedFlag Code="@context.Item.Country" Size="ElementSize.Small" Reverse="true" Typo="Typo.body2" />
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="e => e.Principal" CellClass="font-body1" />
            <PropertyColumn Property="e => e.BaseValue" Title="Base" CellClass="font-caption" />
            <TemplateColumn T="SeasonTeamList" Title="A/C/P" Sortable="false">
                <CellTemplate>
                    <MudText Typo="Typo.caption">@context.Item.Aero / @context.Item.Chassis / @context.Item.Powertrain</MudText>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="e => e.Reliability" CellClass="font-caption" Title="REL" />
            <PropertyColumn Property="e => e.Engine" />
            <TemplateColumn T="SeasonTeamList" SortBy="e => e.Manufacturer" Title="Manufacturer">
                <CellTemplate>
                    <SupplierDisplay Colour="@context.Item.ManColour" Accent="@context.Item.ManAccent">
                        @context.Item.Manufacturer
                    </SupplierDisplay>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="SeasonTeamList" Sortable="false">
                <CellTemplate>
                    <MudButtonGroup>
                        <MudIconButton Size="Size.Small"
                                       Icon="@Icons.Material.Outlined.Edit"
                                       OnClick="@(() => UpdateItem(context.Item.SeasonTeam))" />
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudContainer>

@code {
    [CascadingParameter] private OverviewModel OverviewModel { get; set; }

    [Parameter] public EventCallback<SeasonTeam?> OnEditorOpen { get; set; }

    private List<SeasonTeamList> TeamItems = new();

    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await RestoreSeasonTeams();
    }

    private async Task RestoreSeasonTeams()
    {
        loading = true;

        TeamItems.Clear();

        var seasonEngines = await _seasonEngineService.GetSeasonEngines(OverviewModel.Season.Id);

        foreach (var team in OverviewModel.ClassTeams)
        {
            var engine = seasonEngines.FirstOrDefault(e => e.Id == team.SeasonEngineId);
            var manufacturer = OverviewModel.Manufacturers.FirstOrDefault(e => e.Id == team.ManufacturerId);

            var listing = new SeasonTeamList
                {
                    Name = team.Name,
                    Country = team.Team.Country,
                    Principal = team.Principal,
                    Colour = team.Colour,
                    BaseValue = team.BaseValue,
                    Aero = team.Aero,
                    Chassis = team.Chassis,
                    Powertrain = team.Powertrain,
                    Reliability = team.Reliability,
                    Engine = engine?.Name ?? "[Unknown]",
                    Manufacturer = manufacturer?.Name ?? "[Unknown]",
                    ManColour = manufacturer?.Colour ?? Globals.DefaultColour,
                    ManAccent = manufacturer?.Accent ?? Globals.DefaultAccent,

                    SeasonTeam = team
                };

            TeamItems.Add(listing);
        }

        loading = false;
    }

    private async Task AddItem() => await UpdateItem(null);
    private async Task UpdateItem(SeasonTeam? item)
    {
        await OnEditorOpen.InvokeAsync(item);

        await RestoreSeasonTeams();
    }
}
