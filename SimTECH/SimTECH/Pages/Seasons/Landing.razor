<MudGrid Spacing="2">
    <MudItem xs="12">
        <MudPaper Class="pa-4">
            <MudStack>
                <MudText Typo="Typo.h3">Season @OverviewModel.Season.Year</MudText>
                <MudDivider />
                <MudSpacer />
                <MudStack Row="true" Class="pa-0">
                    <MudText Typo="Typo.body2">Currenly in status: @OverviewModel.Season.State.ToString()</MudText>
                    <MudSpacer />
                    <MudText Typo="Typo.body2" Color="Color.Dark">Hello from the other side</MudText>
                </MudStack>
            </MudStack>
        </MudPaper>
    </MudItem>

    <MudItem xs="6">
        <MudPaper MinHeight="200px" Elevation="15" Class="pa-4 mud-height-full">
            <MudStack Class="mud-height-full">
                <MudText Typo="Typo.h5">Upcoming race</MudText>
                <MudDivider />
                @if (OverviewModel.Season.State == State.Active)
                {
                    @if (NextRace is null)
                    {
                        <MudText Typo="Typo.body2">No upcoming race for this season detected</MudText>
                    }
                    else
                    {
                        <CountryNamedFlag Code="@NextRace.Track.Country" Justify="Justify.FlexStart" Size="ElementSize.Normal" />
                        <MudText>Round @NextRace.Round - @NextRace.Name</MudText>

                        <MudSpacer />

                        <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Secondary" OnClick="GoToNextRace">Go</MudButton>
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2">
                        Dimwit, of course there is no next race since this season isn't even active.
                        <br />
                        Doubt anything is going to happen here so fuck off or start this bich, willy schlobberer.
                    </MudText>
                }
            </MudStack>
        </MudPaper>
    </MudItem>

    <MudItem xs="6">
        <MudPaper MinHeight="200px" Elevation="15" Class="pa-4 mud-height-full">
            <MudStack Class="mud-height-full">
                <MudText Typo="Typo.h5">Controls</MudText>
                <MudDivider />
                <MudText Typo="Typo.body2">
                    Control the world, bring ruin to all who oppose you.
                </MudText>

                <MudSpacer />

                @if (OverviewModel.Season.State == State.Concept)
                {
                    <MudButtonGroup Variant="Variant.Text" Color="Color.Primary">
                        <MudButton FullWidth="true" OnClick="TriggerStart">Start season</MudButton>
                        <MudButton FullWidth="true" OnClick="GoToAddEntrants">Add participants</MudButton>
                    </MudButtonGroup>
                }
                else if (OverviewModel.Season.State == State.Active)
                {
                    <MudButtonGroup Variant="Variant.Text" Color="Color.Primary">
                        <MudButton FullWidth="true" OnClick="GoToDeveloper">Development</MudButton>
                        @if (!string.IsNullOrEmpty(ActiveClassName))
                        {
                            <MudButton FullWidth="true" OnClick="GoToClassDeveloper">Development for @ActiveClassName</MudButton>
                        }
                        <MudButton FullWidth="true" OnClick="TriggerFinish">Finish season</MudButton>
                    </MudButtonGroup>
                }
            </MudStack>
        </MudPaper>
    </MudItem>

    <MudItem xs="6">
        <MudPaper MinHeight="200px" Elevation="15" Class="pa-4 mud-height-full">
            <MudStack Class="mud-height-full">
                <MudText Typo="Typo.h5">Statistics</MudText>
                <MudDivider />
                <MudText Typo="Typo.body2">
                    Links to different statistics specific to this season (wow really?)
                </MudText>

                <MudSpacer />

                <MudButtonGroup Variant="Variant.Text" Color="Color.Secondary" Size="Size.Small">
                    <MudButton FullWidth="true" OnClick="OnShowComponentUsage">Components</MudButton>
                    <MudButton FullWidth="true" OnClick="ShowQualyBattles">Q.Battles</MudButton>
                    @if (OverviewModel.Season.State == State.Active)
                    {
                        <MudButton FullWidth="true" OnClick="ShowContractDurations">Contract durations</MudButton>
                    }
                </MudButtonGroup>
            </MudStack>
        </MudPaper>
    </MudItem>

    <MudItem xs="6">
        <MudPaper MinHeight="200px" Elevation="15" Class="pa-4 mud-height-full">
            <MudStack Class="mud-height-full">
                <MudText Typo="Typo.h5">Classes</MudText>
                <MudDivider />

                @if (OverviewModel.Season.HasRaceClasses)
                {
                    <MudText Color="Color.Warning">selector works, but pls more pretti</MudText>

                    <MudRadioGroup SelectedOption="@OverviewModel.ActiveClassId"
                                   SelectedOptionChanged="OnClassSelected">
                        @foreach (var raceClass in OverviewModel.Season.RaceClasses)
                        {
                            <MudRadio Option="@raceClass.Id" Color="Color.Primary" UnCheckedColor="Color.Default">@raceClass.Name</MudRadio>
                        }
                    </MudRadioGroup>
                }
            </MudStack>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter] public OverviewModel OverviewModel { get; set; }

    [Parameter] public Race? NextRace { get; set; }
    [Parameter] public EventCallback OnStartSeason { get; set; }
    [Parameter] public EventCallback OnFinishSeason { get; set; }
    [Parameter] public EventCallback OnShowComponentUsage { get; set; }
    [Parameter] public EventCallback OnShowQualyBattles { get; set; }
    [Parameter] public EventCallback OnShowContractDurations { get; set; }
    [Parameter] public EventCallback OnNextRace { get; set; }
    [Parameter] public EventCallback<long> OnClassSelected { get; set; }
    [Parameter] public EventCallback<string> OnNavigate { get; set; }

    private string? ActiveClassName { get; set; }

    protected override void OnParametersSet()
    {
        if (OverviewModel.ActiveClassId != default)
            ActiveClassName = OverviewModel.Season.RaceClasses.FirstOrDefault(e => e.Id == OverviewModel.ActiveClassId)?.Tag;
    }

    async Task TriggerStart() => await OnStartSeason.InvokeAsync();
    async Task TriggerFinish() => await OnFinishSeason.InvokeAsync();

    async Task ShowComponentUsage() => await OnShowComponentUsage.InvokeAsync();
    async Task ShowQualyBattles() => await OnShowQualyBattles.InvokeAsync();
    async Task ShowContractDurations() => await OnShowContractDurations.InvokeAsync();

    async Task GoToNextRace() => await OnNextRace.InvokeAsync();

    async Task GoToAddEntrants() => await OnNavigate.InvokeAsync($"/entrantwizard/{OverviewModel.Season.Id}");
    async Task GoToDeveloper() => await OnNavigate.InvokeAsync($"/developer/{OverviewModel.Season.Id}");
    async Task GoToClassDeveloper() => await OnNavigate.InvokeAsync($"/developer/{OverviewModel.Season.Id}/{OverviewModel.ActiveClassId}");
}
