@page "/seasons"

@using SimTECH.Pages.Seasons.Dialogs;
@using SimTECH.PageModels.Seasons;

@inject BreadcrumbProvider _bread
@inject NavigationManager _nav
@inject LeagueService _leagueService
@inject SeasonService _seasonService
@inject IDialogService _dialogService

<PageTitle>Seasons</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    @if (SeasonListItems != null)
    {
        <MudPaper MinHeight="60px">
            <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4">
                <MudText Typo="Typo.h3">Seasons</MudText>
                <MudSpacer />
                <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" Size="Size.Small" OnClick="NewSeason"
                           StartIcon="@Icons.Material.Filled.Add" IconSize="Size.Small" IconColor="Color.Tertiary" Class="btn-md">
                    New
                </MudButton>
            </MudStack>
        </MudPaper>
        <MudDataGrid T="SeasonListModel" Items="@SeasonListItems.OrderByDescending(e => e.Year)" Dense="true">
            <Columns>
                <PropertyColumn Property="e => e.Year" />
                <TemplateColumn T="SeasonListModel" Title="NO" SortBy="e => e.DriverNumber" HeaderClass="number-col hide-sort-icons" CellClass="number-col">
                    <CellTemplate>
                        <NumberDisplay Colour="@context.Item.DriverColour"
                                       Accent="@context.Item.DriverAccent">
                            @context.Item.DriverNumber
                        </NumberDisplay>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn T="SeasonListModel" Title="Leading driver">
                    <CellTemplate>
                        <MudStack Row="true" AlignItems="AlignItems.Center">
                            <MudText Class="overflow-hider">@context.Item.DriverName</MudText>
                            <MudSpacer />
                            <CountryFlag Code="context.Item.DriverNationality" Size="ElementSize.Small" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn T="SeasonListModel" Sortable="false" Class="accent-cell">
                    <CellTemplate>
                        <SmolAccent Colour="@context.Item.TeamColour" />
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn T="SeasonListModel" Title="Leading team">
                    <CellTemplate>
                        <MudStack Row="true" AlignItems="AlignItems.Center">
                            <MudText Class="overflow-hider">@context.Item.TeamName</MudText>
                            <MudSpacer />
                            <CountryFlag Code="context.Item.TeamNationality" Size="ElementSize.Small" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="e => e.League" />
                <PropertyColumn Property="e => e.State" />
                <TemplateColumn T="SeasonListModel" Sortable="false">
                    <CellTemplate>
                        <MudButtonGroup Size="@Size.Small">
                            <MudIconButton Icon="@Icons.Material.Outlined.ContentCopy" OnClick="@(() => CopySeason(context.Item.Id))" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Logout" OnClick="@(() => GoToOverview(context.Item.Id))" />
                            @if (context.Item.State == State.Concept)
                            {
                                <MudIconButton Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(async() => await DeleteSeason(context.Item.Id))" />
                            }
                        </MudButtonGroup>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="SeasonListModel" />
            </PagerContent>
        </MudDataGrid>
    }
</MudContainer>

@code {
    private List<Season> Seasons { get; set; }
    private List<League> Leagues { get; set; }
    private List<SeasonListModel> SeasonListItems { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _bread.Reset();
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Seasons", href: "seasons", disabled: true),
        });

        Seasons = await _seasonService.GetSeasons();
        Leagues = await _leagueService.GetLeagues();
        SeasonListItems = await _seasonService.GetSeasonList();
    }

    private async Task NewSeason()
    {
        EditSeasonModel model;

        var previousSeason = Seasons.OrderByDescending(e => e.Year).FirstOrDefault();

        if (previousSeason != null)
        {
            model = new EditSeasonModel(previousSeason);
            model.ResetIdentifierFields();
            model.Year++;
        }
        else
        {
            model = new EditSeasonModel(null);
        }

        await EditSeason(model);
    }

    private async Task CopySeason(long seasonId)
    {
        var copiedSeason = await _seasonService.GetSeasonById(seasonId);
        var model = new EditSeasonModel(copiedSeason);
        model.ResetIdentifierFields();
        model.Year++;

        await EditSeason(model);
    }

    private async Task EditSeason(EditSeasonModel model)
    {
        var parameters = new DialogParameters { ["Model"] = model, ["Leagues"] = Leagues };

        var dialog = await _dialogService.ShowAsync<SeasonEditor>("Modify season", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Season updatedItem)
        {
            await _seasonService.UpdateSeason(updatedItem);
            _nav.NavigateTo($"/overview/{updatedItem.Id}");
        }
    }

    private async Task DeleteSeason(long seasonId)
    {
        var result = await _seasonService.DeleteSeason(seasonId);
        if (result)
        {
            Seasons.Remove(Seasons.Single(e => e.Id == seasonId));
        }
    }

    private void GoToOverview(long seasonId) => _nav.NavigateTo($"/overview/{seasonId}");
}
