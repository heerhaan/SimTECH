<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">Modify season</MudText>
    </TitleContent>
    <DialogContent>
        <MudPaper Elevation="50" MinWidth="800px" Class="d-flex flex-row flex-nowrap">
            <MudPaper Elevation="25" Class="pa-4 mud-height-full">
                <MudStack Spacing="6">
                    <div>
                        <MudText Typo="Typo.subtitle1">Information</MudText>
                        <MudDivider />
                        <div class="d-flex flex-row align-items-center justify-space-between">
                            <MudNumericField T="int" @bind-Value="Model.Year" Label="Year" Class="field-sm" />

                            @if (Model.Id == 0)
                            {
                                <MudSelect T="long" @bind-Value="Model.LeagueId" Label="League">
                                    @foreach (var select in Leagues)
                                    {
                                        <MudSelectItem Value="@select.Id">@select.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            }
                        </div>
                        
                    </div>
                    <div>
                        <MudText Typo="Typo.subtitle1">Session setup</MudText>
                        <MudDivider />

                        <MudText Typo="Typo.body2">Qualifying format</MudText>

                        @if (hasMultipleClasses)
                        {
                            <MudAlert Severity="Severity.Info" Class="py-1">
                                Format is limited to one session due to multiple classes existing.
                            </MudAlert>
                        }
                        else
                        {
                            <MudChipSet T="QualyFormat"
                                        @bind-SelectedValue="Model.QualifyingFormat"
                                        SelectionMode="SelectionMode.SingleSelection"
                                        Class="py-1">
                                <MudChip Value="QualyFormat.TripleEliminate"
                                         Color="Color.Secondary"
                                         Default="@(Model.QualifyingFormat == QualyFormat.TripleEliminate)">
                                    Three session elimination
                                </MudChip>
                                <MudChip Value="QualyFormat.OneSession"
                                         Color="Color.Secondary"
                                         Default="@(Model.QualifyingFormat == QualyFormat.OneSession)">
                                    One session
                                </MudChip>
                            </MudChipSet>
                        }

                        @if (Model.QualifyingFormat == QualyFormat.TripleEliminate)
                        {
                            <MudStack Row="true" Spacing="1">
                                <MudNumericField @bind-Value="Model.QualifyingAmountQ2" Label="Allowed drivers in Q2" Class="field-sm" />
                                <MudNumericField @bind-Value="Model.QualifyingAmountQ3" Label="Allowed drivers in Q3" Class="field-sm" />
                            </MudStack>
                        }

                        <MudNumericField @bind-Value="Model.RunAmountSession" Label="Run count per session" Class="field-sm" />
                        <MudNumericField @bind-Value="Model.QualifyingRNG" Label="Qualifying MAX RNG" Class="field-sm" />
                    </div>
                    <div>
                        <MudText Typo="Typo.subtitle1">Race setup</MudText>
                        <MudDivider />

                        <MudNumericField @bind-Value="Model.MaximumDriversInRace" Label="MAX drivers in race" />
                        <MudNumericField @bind-Value="Model.GridBonus" Label="Bonus per grid POS" />
                        <MudNumericField @bind-Value="Model.PitCostSubtractCaution" Min="0" Label="Subtracted from pit cost during SC" />
                        <MudNumericField @bind-Value="Model.MistakeRolls" Min="0" Label="Mistake rolls" />

                        <MudRangeSlider @bind-Value="Model.PitMinimum"
                                        @bind-UpperValue="Model.PitMaximum"
                                        Size="Size.Medium"
                                        Variant="Variant.Filled"
                                        Range="true"
                                        TickMarks="true"
                                        Color="Color.Tertiary"
                                        Min="100"
                                        Max="1000"
                                        Step="50"
                                        MinDistance="50">
                            <div class="d-flex flex-row align-items-center gap-2">
                                <MudText Typo="Typo.subtitle2">Pitstop score cost</MudText>
                                <MudText Typo="Typo.caption">[@Model.PitMinimum - @Model.PitMaximum]</MudText>
                            </div>
                        </MudRangeSlider>
                        <MudRangeSlider @bind-Value="Model.RngMinimum"
                                        @bind-UpperValue="Model.RngMaximum"
                                        Size="Size.Medium"
                                        Variant="Variant.Filled"
                                        Range="true"
                                        TickMarks="true"
                                        Color="Color.Tertiary"
                                        Min="0"
                                        Max="100"
                                        Step="5"
                                        MinDistance="5">
                            <div class="d-flex flex-row align-items-center gap-2">
                                <MudText Typo="Typo.subtitle2">RNG per advance</MudText>
                                <MudText Typo="Typo.caption">[@Model.RngMinimum - @Model.RngMaximum]</MudText>
                            </div>
                        </MudRangeSlider>
                        <MudRangeSlider @bind-Value="Model.MistakeMinimum"
                                        @bind-UpperValue="Model.MistakeMaximum"
                                        Size="Size.Medium"
                                        Variant="Variant.Filled"
                                        Range="true"
                                        TickMarks="true"
                                        Color="Color.Tertiary"
                                        Min="0"
                                        Max="500"
                                        Step="25"
                                        MinDistance="25">
                            <div class="d-flex flex-row align-items-center gap-2">
                                <MudText Typo="Typo.subtitle2">Mistake score cost</MudText>
                                <MudText Typo="Typo.caption">[@Model.MistakeMinimum - @Model.MistakeMaximum]</MudText>
                            </div>
                        </MudRangeSlider>
                    </div>
                </MudStack>
            </MudPaper>
            <MudPaper Elevation="25" Width="600px" Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle1">Points</MudText>
                <MudDivider />
                <div style="width: 300px">
                    <MudText Typo="Typo.subtitle2">Per position</MudText>
                    <MudDivider />

                    <MudTable Items="@Model.PointAllotments.OrderBy(e => e.Position)"
                                Dense="true"
                                ReadOnly="false"
                                Class="extra-dense">
                        <ToolBarContent>
                            <MudButton StartIcon="@Icons.Material.Filled.Add"
                                       Variant="Variant.Outlined"
                                       Color="Color.Tertiary"
                                       OnClick="AppendAllotment"
                                       Size="Size.Small">
                                Insert position
                            </MudButton>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>POS</MudTh>
                            <MudTh>PTS</MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Position">
                                <MudNumericField @bind-Value="context.Position" Min="1" Class="field-xs dense-field" Required />
                             </MudTd>
                             <MudTd DataLabel="Points">
                                 <MudNumericField @bind-Value="context.Points" Min="1" Class="field-xs dense-field" Required />
                             </MudTd>
                             <MudTd>
                                 <MudIconButton Size="Size.Small"
                                                Icon="@Icons.Material.Outlined.Delete"
                                                Color="Color.Error"
                                                Class="pa-0"
                                                OnClick="@(() => RemoveAllotment(context))" />
                             </MudTd>
                         </RowTemplate>
                     </MudTable>
                 </div>

                 <div>
                     <MudText Typo="Typo.subtitle2">Bonus points</MudText>
                     <MudDivider />

                     <MudNumericField @bind-Value="Model.PointsPole" Label="Pole position" />
                     <MudNumericField @bind-Value="Model.PointsFastestLap" Label="Fastest lap" />
                 </div>

                <MudPaper Class="mt-2">
                    <MudText Typo="Typo.subtitle1">Race classes</MudText>
                    <MudDivider />

                    @if (Model.Id == 0)
                    {
                        <MudSwitchM3 T="bool"
                                     @bind-Checked="hasMultipleClasses"
                                     ThumbIcon="@Icons.Material.Filled.Done"
                                     ThumbOffIcon="@Icons.Material.Filled.Close"
                                     Label="Use race classes"
                                     Color="Color.Secondary"
                                     Class="my-2" />
                    }

                    @if (hasMultipleClasses)
                    {
                        <MudAlert Dense="true" Severity="Severity.Warning" Class="my-1">
                            Be wary with changing the tag of a class, this is used to auto-assign teams from previous seasons.
                        </MudAlert>

                        <MudTable Items="@Model.RaceClasses" Dense="true" Class="extra-dense">
                            <ToolBarContent>
                                <MudStack Row="true" Class="pa-0 mud-width-full">
                                    @if (Model.Id == 0)
                                    {
                                        <MudSpacer />
                                        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Outlined"
                                                   Color="Color.Tertiary" OnClick="AddClass" Size="Size.Small">
                                            Add race class
                                        </MudButton>
                                    }
                                </MudStack>
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh>Name</MudTh>
                                <MudTh>Colour</MudTh>
                                <MudTh>Tag</MudTh>
                                <MudTh></MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>
                                    <MudTextField @bind-Value="@context.Name" Class="field-sm dense-field" />
                                </MudTd>
                                <MudTd>
                                    <MudColorPicker @bind-Text="context.Colour" Placeholder="Colour" Class="field-xs dense-field" />
                                </MudTd>
                                <MudTd>
                                    <MudTextField @bind-Value="context.Tag" Class="field-sm dense-field" />
                                </MudTd>
                                <MudTd>
                                    @if (Model.Id == 0)
                                    {
                                        <MudIconButton Icon="@Icons.Material.Outlined.Delete"
                                                       Color="Color.Error"
                                                       Size="Size.Small"
                                                       OnClick="@(() => RemoveClass(context))" />
                                    }
                                </MudTd>
                            </RowTemplate>
                        </MudTable>

                        <MudStack>
                            @foreach (var raceClass in Model.RaceClasses)
                            {
                                <SupplierDisplay Colour="@raceClass.Colour">
                                    <MudText>@raceClass.Tag</MudText>
                                </SupplierDisplay>
                            }
                        </MudStack>
                    }
                </MudPaper>
            </MudPaper>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? SeasonDialog { get; set; }

    [Parameter] public EditSeasonModel Model { get; set; }
    [Parameter] public IEnumerable<League> Leagues { get; set; } = Enumerable.Empty<League>();

    private int lowestPosition;
    private bool hasMultipleClasses;

    protected override void OnInitialized()
    {
        if (Model.PointAllotments.Any())
            lowestPosition = Model.PointAllotments.Max(e => e.Position);

        hasMultipleClasses = Model.RaceClasses.Any();
    }

    private void QualyFormatChanged(QualyFormat format)
    {
        Model.QualifyingFormat = format;
    }

    private void AppendAllotment()
    {
        Model.PointAllotments.Add(new() { Position = ++lowestPosition });
    }

    private void RemoveAllotment(EditPointAllotmentModel allotment)
    {
        --lowestPosition;
        Model.PointAllotments.Remove(allotment);
    }

    private void AddClass() => Model.RaceClasses.Add(new EditRaceClassModel());

    private void RemoveClass(EditRaceClassModel model) => Model.RaceClasses.Remove(model);

    private void Submit()
    {
        if (hasMultipleClasses)
            Model.QualifyingFormat = QualyFormat.OneSession;
        else if (Model.Id == 0)
            Model.RaceClasses = new List<EditRaceClassModel>();

        if (Model.IsDirty)
        {
            var modSeason = Model.Record;
            SeasonDialog?.Close(DialogResult.Ok(modSeason));
        }
    }

    private void Cancel() => SeasonDialog?.Cancel();
}
