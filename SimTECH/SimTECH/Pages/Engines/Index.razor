@page "/engines"

@using SimTECH.Pages.Engines.Dialogs

@inject EngineService _engineService
@inject BreadcrumbProvider _bread
@inject IDialogService _dialogService

<PageTitle>Engines</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudPaper MinHeight="60px">
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4">
            <MudText Typo="Typo.h3">Engines</MudText>
            <MudSpacer />
            <MudButtonGroup Variant="Variant.Outlined" Color="Color.Tertiary" Size="Size.Small">
                <MudButton StartIcon="@Icons.Material.Filled.Archive"
                           IconSize="Size.Small"
                           OnClick="ToggleDisplayArchived"
                           Class="btn-md">
                    @(ShowingArchived ? "Active" : "Archive")
                </MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Add"
                           IconSize="Size.Small"
                           OnClick="AddEngine"
                           Class="btn-md">
                    New
                </MudButton>
            </MudButtonGroup>
        </MudStack>
    </MudPaper>
    <MudDataGrid T="Engine" Items="@Engines" RowsPerPage="15" Dense="true">
        <Columns>
            <PropertyColumn Property="e => e.Name" />
            <TemplateColumn Title="Badge" HeaderClass="number-col">
                <CellTemplate>
                    <NumberDisplay Colour="@context.Item.Colour" Accent="@context.Item.Accent" Typo="Typo.button">
                        @context.Item.Name.ElementAt(0)
                    </NumberDisplay>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="Engine">
                <CellTemplate>
                    <MudButtonGroup Size="Size.Small">
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit"
                                       OnClick="@(async () => await UpdateEngine(context.Item))" />
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete"
                                       Color="Color.Error"
                                       OnClick="@(async () => await DeleteEngine(context.Item))" />
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Engine" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    private List<Engine> Engines { get; set; } = new();

    private bool ShowingArchived { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: "/"),
            new BreadcrumbItem("Engines", href: "engines", disabled: true),
        });

        Engines = await _engineService.GetEngines();
    }

    private async Task AddEngine() => await UpdateEngine(null);
    private async Task UpdateEngine(Engine? item)
    {
        var parameters = new DialogParameters { ["Engine"] = (item) };

        var dialog = await _dialogService.ShowAsync<EngineEditor>("Modify engine", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Engine updatedItem)
        {
            await _engineService.UpdateEngine(updatedItem);
            Engines = await _engineService.GetEngines();
        }
    }

    private async Task DeleteEngine(Engine engine)
    {
        await _engineService.ArchiveEngine(engine);
        Engines.Remove(engine);
    }

    private async Task ToggleDisplayArchived()
    {
        if (ShowingArchived)
            Engines = await _engineService.GetEngines();
        else
            Engines = await _engineService.GetEngines(StateFilter.Archived);

        ShowingArchived = !ShowingArchived;
    }
}
