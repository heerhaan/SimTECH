@page "/climates"

@using SimTECH.Pages.Climates.Dialogs

@inject ClimateService _climateService
@inject BreadcrumbProvider _bread
@inject IDialogService _dialog

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper MinHeight="60px">
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4">
            <MudText Typo="Typo.h3">Climates</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Outlined"
                       Color="Color.Secondary"
                       Size="Size.Small"
                       OnClick="GetRandomClimate"
                       Class="btn-md">
                Random
            </MudButton>
            @if (RandomClimate != null)
            {
                <CustomIcon Icon="@RandomClimate.Icon" Colour="@RandomClimate.Colour">
                    <MudText>@RandomClimate.Terminology</MudText>
                </CustomIcon>
            }
            <MudSpacer />
            <MudButton Variant="Variant.Outlined"
                       Color="Color.Tertiary"
                       Size="Size.Small"
                       StartIcon="@Icons.Material.Filled.Add"
                       IconSize="Size.Small"
                       OnClick="AddItem"
                       Class="btn-md">
                New
            </MudButton>
        </MudStack>
        <MudText Typo="Typo.body2" Color="Color.Info" Class="px-4 pb-2">
            RNG modifier subtracts from the minimum RNG and and adds to maximum RNG
        </MudText>
    </MudPaper>
    <MudDataGrid T="Climate" Items="@ClimateItems" RowsPerPage="15" Dense="true" Class="overflow-hidden">
        <Columns>
            <TemplateColumn T="Climate" Title="Icon" Sortable="false">
                <CellTemplate>
                    <CustomIcon Icon="@context.Item.Icon" Colour="@context.Item.Colour" />
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="e => e.Terminology" />
            <PropertyColumn Property="e => e.IsWet" Title="For wet" />
            <PropertyColumn Property="e => e.EngineMultiplier" Title="Engine" HeaderClass="hide-sort-icons" />
            <PropertyColumn Property="e => e.ReliablityModifier" Title="REL" HeaderClass="hide-sort-icons" />
            <PropertyColumn Property="e => e.RngModifier" Title="RNG" HeaderClass="hide-sort-icons" />
            <PropertyColumn Property="e => e.Odds" HeaderClass="hide-sort-icons" />
            <TemplateColumn T="Climate" Sortable="false">
                <CellTemplate>
                    <MudButtonGroup>
                        <MudIconButton Size="@Size.Small"
                                       Icon="@Icons.Material.Outlined.Edit"
                                       OnClick="@(() => UpdateItem(context.Item))" />
                        <StateTogglerButton CallbackToggled="@((bool toggled) => OnToggleChange(context.Item, toggled))"
                                            Default="@(context.Item.State == State.Active)" />
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Climate" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    private List<Climate> ClimateItems { get; set; } = new();

    private Climate? RandomClimate { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: "/"),
            new BreadcrumbItem("Climates", href: "climates", disabled: true),
        });

        ClimateItems = await _climateService.GetClimates(StateFilter.All);
    }

    private void GetRandomClimate() => RandomClimate = ClimateItems.TakeRandomClimate();

    private async Task AddItem() => await UpdateItem(null);
    private async Task UpdateItem(Climate? climate)
    {
        var parameters = new DialogParameters
            {
                ["Climate"] = climate,
            };

        var dialog = await _dialog.ShowAsync<ClimateEditor>("Modify climate", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Climate updatedItem)
        {
            await _climateService.UpdateClimate(updatedItem);
            ClimateItems = await _climateService.GetClimates(StateFilter.All);
        }
    }

    private async Task OnToggleChange(Climate climate, bool toggled) => await ToggleState(climate, (toggled ? State.Active : State.Closed));
    private async Task ToggleState(Climate climate, State targetState)
    {
        await _climateService.ChangeState(climate, targetState);
        climate.State = targetState;
    }
}
