@page "/teams"
@layout SetupLayout

@inject TeamService TeamService
@inject IDialogService DialogService

<PageTitle>Teams</PageTitle>

<MudContainer>
    <h2>Teams</h2>

    <MudDataGrid Items="@TeamNames">
        <Columns>
            <HierarchyColumn T="Team" />
            <Column T="Team" Field="Name" />
            <Column T="Team" Field="Country">
                <CellTemplate>
                    <CountryFlag Code="@context.Item.Country" Size="FlagSize.Small" IncludeName="true" />
                </CellTemplate>
            </Column>
        </Columns>
        <ChildRowContent>
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@context.Item.Name</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>Woah, check this flag out!</MudText>
                    <CountryFlag Code="@context.Item.Country" Size="FlagSize.Small" />
                </MudCardContent>
            </MudCard>
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="Team" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    private List<Team> TeamNames = new();

    protected override void OnInitialized()
    {
        TeamNames = TeamService.GetTestNames();
    }

    void ModifyTeam(Team item)
    {
        // TODO: Store changes that have been made
    }

    async Task AddDriver()
    {
        var dialog = await DialogService.ShowAsync<TeamCreate>("Create a new team");
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Team newTeam)
        {
            TeamNames.Add(newTeam); // Alternatively, re-retrieve TeamNames
        }
    }
}
