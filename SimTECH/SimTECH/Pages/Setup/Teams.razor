@page "/teams"
@inject TeamService TeamService
@inject TraitService TraitService
@inject IDialogService DialogService

<PageTitle>Teams</PageTitle>

<MudContainer>
    <MudContainer Class="d-flex justify-space-between pa-2 mx-2 my-2">
        <MudText Typo="Typo.h4">Teams</MudText>
        <MudButton Variant="Variant.Text" Color="Color.Success" OnClick="AddTeam">New</MudButton>
    </MudContainer>
    <MudDataGrid T="Team" Items="@TeamData">
        <Columns>
            <HierarchyColumn T="Team" />
            <PropertyColumn Property="e => e.Name" />
            <TemplateColumn>
                <CellTemplate>
                    <CountryFlag Code="@context.Item.Country" Size="FlagSize.Small" IncludeName="true" />
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="e => e.State" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudButtonGroup>
@*                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateTeam(context.Item))" />
*@                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@context.Item.Name</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>Woah, check this flag out!</MudText>
                    <CountryFlag Code="@context.Item.Country" Size="FlagSize.Small" />
                </MudCardContent>
            </MudCard>
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="Team" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    private List<Team> TeamData = new();

    protected override async Task OnInitializedAsync()
    {
        TeamData = await TeamService.GetTeams();
    }

    async Task AddTeam() => await UpdateTeam(new Team());
    async Task UpdateTeam(Team item)
    {
        var parameters = new DialogParameters 
        { 
            ["Team"] = item,
            ["Traits"] = await TraitService.GetTraitsOfType(Entrant.Team)
        };

        var dialog = await DialogService.ShowAsync<TeamEditor>("Modify team", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Team updatedItem)
        {
            await TeamService.UpdateTeam(updatedItem);
            TeamData = await TeamService.GetTeams();
        }
    }
}
