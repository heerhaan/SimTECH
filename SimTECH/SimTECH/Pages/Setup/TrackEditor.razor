<MudDialog>
    <TitleContent>
        <MudText>
            Modify a track
        </MudText>
        <MudText>Expected length per race: @(raceLength)KM</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@Model">
            <MudGrid>
                <MudItem xs="8">
                    <MudPaper Elevation="10" Class="pa-4">
                        <MudStack>
                            <MudText Typo="Typo.subtitle1">Features</MudText>
                            <MudDivider />
                            <MudTextField T="string" @bind-Value="Model.Name" Label="Name" Class="field-md" />
                            <CountrySelect @bind-Value="Model.Country" Class="field-md my-2" />
                            <MudStack Row="true" Spacing="6">
                                <MudNumericField T="double"
                                                 @bind-Value="Model.Length"
                                                 Label="Length"
                                                 Format="N2"
                                                 Adornment="Adornment.End"
                                                 AdornmentText="Km"
                                                 AdornmentColor="Color.Tertiary"
                                                 DebounceInterval="500"
                                                 OnDebounceIntervalElapsed="HandleLengthLapCalc"
                                                 HelperText="@expectedLapCount" />
                            </MudStack>

                            <MudText Typo="Typo.subtitle1" Class="mt-4">Modifiers</MudText>
                            <MudDivider />
                            <MudNumericField T="double" @bind-Value="Model.AeroMod" Step="0.1" Label="Aero mod" Format="N2" Class="field-sm" />
                            <MudNumericField T="double" @bind-Value="Model.ChassisMod" Step="0.1" Label="Chassis mod" Format="N2" Class="field-sm" />
                            <MudNumericField T="double" @bind-Value="Model.PowerMod" Step="0.1" Label="Power mod" Format="N2" Class="field-sm" />
                            <MudNumericField T="double" @bind-Value="Model.QualifyingMod" Step="0.1" Label="Qualy mod" Format="N2" Class="field-sm" />
                            <MudNumericField T="double" @bind-Value="Model.DefenseMod" Step="0.1" Label="Defense mod" Format="N2" Class="field-sm" />
                        </MudStack>
                    </MudPaper>
                </MudItem>

                <MudItem xs="4">
                    <MudPaper Elevation="10" Class="pa-4">
                        <MudText Typo="Typo.subtitle1">Traits</MudText>
                        <MudChipSet @bind-SelectedValues="selectedTraits" MultiSelection="true" Filter="true">
                            @foreach (var trait in selectableTraits)
                            {
                                <MudChip Text="@trait.Name" Value="@trait.Id"></MudChip>
                            }
                        </MudChipSet>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? TrackDialog { get; set; }

    [Parameter] public Track? Track { get; set; }
    [Parameter] public List<Trait> Traits { get; set; } = new();

    private EditTrackModel Model;
    private List<Trait> selectableTraits;
    private ICollection<object>? selectedTraits { get; set; }

    private int raceLength = 300;
    private string expectedLapCount = "Expected amount of laps: 0";

    protected override void OnInitialized()
    {
        Model = new EditTrackModel(Track);

        HandleLengthLapCalc(Model.Length.ToString());

        var trackTraitIds = Model.TrackTraits.Select(e => e.TraitId).ToList();
        selectableTraits = Traits.Where(e => e.State == State.Active || trackTraitIds.Contains(e.Id)).ToList();
        selectedTraits = trackTraitIds.Cast<object>().ToList();
    }

    private void HandleLengthLapCalc(string strLength)
    {
        var convertedDouble = double.Parse(strLength);
        expectedLapCount = $"Expected amount of laps: {NumberHelper.CalcLapCount(raceLength, convertedDouble)}";
    }

    private void Submit()
    {
        if (selectedTraits != null)
        {
            Model.TrackTraits = selectedTraits
                .Cast<long>()
                .Select(e => new EditTrackTraitModel { TrackId = Model.Id, TraitId = e })
                .ToList();
        }

        if (Model.IsDirty)
        {
            var modTrack = Model.Record;
            TrackDialog?.Close(DialogResult.Ok(modTrack));
        }
    }

    private void Cancel() => TrackDialog?.Cancel();
}
