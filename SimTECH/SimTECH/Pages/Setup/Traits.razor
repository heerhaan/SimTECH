@page "/traits"
@inject TraitService TraitService
@inject BreadcrumbProvider _bread
@inject NavigationManager _nav
@inject IDialogService DialogService

<PageTitle>Traits</PageTitle>

<MudContainer>
    <MudDataGrid T="Trait" Items="TraitData" Bordered="true" Dense="true" Class="mt-2">
        <ToolBarContent>
            <MudText Typo="Typo.h4">Traits</MudText>

            <MudSpacer />

            <MudButtonGroup Variant="Variant.Outlined" Color="Color.Tertiary">
                <MudButton OnClick="GoToTraitAssign">Assign</MudButton>
                <MudButton OnClick="AddTrait">New</MudButton>
            </MudButtonGroup>
        </ToolBarContent>
        <Columns>
            <HierarchyColumn T="Trait" />
            <PropertyColumn Property="e => e.Name" />
            <PropertyColumn Property="e => e.Type" />
            <PropertyColumn Property="e => e.ForWetConditions" Title="Wet" />
            <PropertyColumn Property="e => e.State" />
            <TemplateColumn T="Trait" Sortable="false">
                <CellTemplate>
                    <MudButtonGroup>
                        @if (context.Item.State == State.Closed)
                        {
                            <MudIconButton Size="@Size.Small"
                                       Icon="@Icons.Material.Filled.Block"
                                       Color="Color.Warning"
                                       Title="Unavailable"
                                       OnClick="@(async () => await ToggleState(context.Item, State.Active))" />
                        }
                        else
                        {
                            <MudIconButton Size="@Size.Small"
                                       Icon="@Icons.Material.Filled.CheckCircleOutline"
                                       Color="Color.Success"
                                       Title="Available"
                                       OnClick="@(async () => await ToggleState(context.Item, State.Closed))" />
                        }
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateTrait(context.Item))" />
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Details for @context.Item.Name</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="6">
                            <MudPaper>
                                <MudText>@(context.Item.Description)</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="6">
                            <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                                <MudText>For wet conditions:</MudText>
                                @if (context.Item.ForWetConditions)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"></MudIcon>
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Block" Color="Color.Error"></MudIcon>
                                }
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12">
                            <MudPaper Class="mud-width-full py-8">
                                <MudText Typo="Typo.subtitle1">Assigned modifiers</MudText>
                                <MudStack Row="true" AlignItems="AlignItems.Center">
                                    @foreach (var modifier in context.Item.RetrieveNotZeroValues())
                                    {
                                        <MudPaper Class="pa-2">
                                            <MudText Typo="Typo.caption">
                                                @(modifier.Key): @(modifier.Value)
                                            </MudText>
                                        </MudPaper>
                                    }
                                </MudStack>
                            </MudPaper>
                        </MudItem>
                        <MudItem>
                            <MudPaper>
                                <MudText Typo="Typo.subtitle1">Used by:</MudText>
                                <MudText>Todo</MudText>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="Trait" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    List<Trait> TraitData;

    protected override async Task OnInitializedAsync()
    {
        _bread.Reset();
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
        });

        TraitData = await TraitService.GetTraits();
    }

    async Task ToggleState(Trait trait, State target)
    {
        await TraitService.ChangeState(trait, target);
        TraitData = await TraitService.GetTraits();
    }

    async Task AddTrait() => await UpdateTrait(new Trait());
    async Task UpdateTrait(Trait item)
    {
        var parameters = new DialogParameters { ["Trait"] = item };

        var dialog = await DialogService.ShowAsync<TraitEditor>("Modify trait", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Trait updatedItem)
        {
            await TraitService.UpdateTrait(updatedItem);
            TraitData = await TraitService.GetTraits();
        }
    }

    void GoToTraitAssign() => _nav.NavigateTo("traitassign");
}
