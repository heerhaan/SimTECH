@page "/drivers"
@inject BreadcrumbProvider _bread
@inject DriverService DriverService
@inject TraitService TraitService
@inject NavigationManager _nav
@inject IDialogService DialogService

<PageTitle>Drivers</PageTitle>

<MudContainer Class="mt-4">
    <MudPaper MinHeight="60px">
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4">
            <MudText Typo="Typo.h3">Drivers</MudText>
            <MudSpacer />
            <MudButtonGroup Variant="Variant.Outlined" Color="Color.Tertiary">
                <MudButton OnClick="ToggleDisplayArchived">
                    @(showingArchived ? "Active" : "Archive")
                </MudButton>
                <MudButton OnClick="GoToHumanGenerator">Generate</MudButton>
                <MudButton OnClick="AddDriver">New</MudButton>
            </MudButtonGroup>
        </MudStack>
    </MudPaper>
    <MudDataGrid T="Driver" Items="@DriverData" Dense="true">
        <Columns>
            <HierarchyColumn T="Driver" />
            <PropertyColumn Property="e => e!.FullName" Title="Name" />
            <PropertyColumn Property="e => e!.Abbreviation" Title="Tag" />
            <PropertyColumn Property="e => e!.DateOfBirth" Title="Born in" Format="yyyy" />
            <TemplateColumn T="Driver" Title="Nation" SortBy="e => e.Country">
                <CellTemplate>
                    <CountryNamedFlag Code="@context.Item.Country" Size="ElementSize.Small" Reverse="true" />
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="Driver" Title="League" Sortable="false">
                <CellTemplate>
                    <MudText>@ReadActiveLeague(context.Item.Id)</MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="Driver" Sortable="false">
                <CellTemplate>
                    <MudButtonGroup Size="@Size.Small" Class="ml-auto">
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateDriver(context.Item))" />
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(async () => await ArchiveDriver(context.Item))" />
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            <MudText Typo="Typo.h6">@context.Item.FullName</MudText>
            <MudStack Row="true">
                <MudPaper>
                    <MudStack AlignItems="AlignItems.Center">
                        <MudText>State is currently @(context.Item.State)</MudText>
                    </MudStack>
                </MudPaper>
                <MudPaper>
                    <MudStack AlignItems="AlignItems.Center">
                        <MudText>Driver is @(context.Item.Alive ? "still alive" : "has died").</MudText>
                    </MudStack>
                </MudPaper>
            </MudStack>
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="Driver" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    private List<Driver> DriverData;
    private List<CurrentDriver> CurrentDrivers;

    private bool showingArchived = false;

    protected override async Task OnInitializedAsync()
    {
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: "/"),
            new BreadcrumbItem("Drivers", href: "drivers", disabled: true),
        });

        CurrentDrivers = await DriverService.GetCurrentDrivers();
        DriverData = await DriverService.GetDrivers();
    }

    // Displayable helpers
    string ReadActiveLeague(long driverId) => CurrentDrivers.Find(e => e.DriverId == driverId)?.League ?? "None";

    // CRUD-actions
    async Task AddDriver() => await UpdateDriver(null);
    async Task UpdateDriver(Driver? item)
    {
        var driverTraits = await TraitService.GetTraitsOfType(Entrant.Driver);

        var parameters = new DialogParameters
        {
            ["Driver"] = item,
            ["Traits"] = driverTraits
        };
        var dialog = await DialogService.ShowAsync<DriverEditor>("Modify driver", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Driver updatedItem)
        {
            await DriverService.UpdateDriver(updatedItem);
            DriverData = await DriverService.GetDrivers();
        }
    }

    async Task ArchiveDriver(Driver driver)
    {
        await DriverService.ArchiveDriver(driver);
        DriverData.Remove(driver);
    }

    async Task ToggleDisplayArchived()
    {
        if (showingArchived)
            DriverData = await DriverService.GetDrivers(StateFilter.Default);
        else
            DriverData = await DriverService.GetDrivers(StateFilter.Archived);

        showingArchived = !showingArchived;
    }

    // Navigation links
    void GoToHumanGenerator() => _nav.NavigateTo("humanbeinggenerator");
}
