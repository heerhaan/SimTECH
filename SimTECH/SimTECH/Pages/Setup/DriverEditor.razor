@inject DriverService DriverService

<MudDialog>
    <TitleContent>
        <MudText>
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" />
            Add new driver
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@model">
            <MudTextField T="string" @bind-Value="model.FirstName" Label="FirstName" />
            <MudTextField T="string" @bind-Value="model.LastName" Label="LastName" />
            <MudTextField T="string" @bind-Value="model.Abbreviation" Label="Abbreviation" />
            <MudDatePicker @bind-Date="@DateSetter" Label="Date of birth" />
            <MudCountrySelect @bind-Value="model.Country" />
            <MudTextField T="string" @bind-Value="model.Biography" Label="Biography" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    protected MudDialogInstance? DriverDialog { get; set; }

    [Parameter]
    public long? driverId { get; set; }

    private EditDriverModel model = new();

    private DateTime? DateSetter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (driverId.HasValue)
        {
            var driverObj = await DriverService.GetDriverById(driverId.Value);

            if (driverObj != null)
            {
                model = new EditDriverModel(driverObj);

                DateSetter = driverObj.DateOfBirth;
            }
        }
    }

    private async Task Submit()
    {
        // TODO: Function call just adds it here, but we want to actually store it!
        model.DateOfBirth = DateSetter.GetValueOrDefault();

        if (model.IsDirty)
        {
            var modDriver = model.Record;

            if (model.Id == 0)
                await DriverService.CreateDriver(modDriver);
            else
                await DriverService.UpdateDriver(modDriver);

            DriverDialog?.Close(DialogResult.Ok(modDriver));
        }
    }

    private void Cancel() => DriverDialog?.Cancel();
}
