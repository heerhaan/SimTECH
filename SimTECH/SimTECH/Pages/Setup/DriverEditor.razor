<MudDialog>
    <TitleContent>
        <MudText>
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" />
            Driver moment
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@model">
            <MudGrid>
                <MudItem xs="8">
                    <MudStack Row="true" Spacing="4">
                        <MudTextField T="string" @bind-Value="model.FirstName" Label="FirstName" />
                        <MudTextField T="string" @bind-Value="model.LastName" Label="LastName" />
                    </MudStack>
                    <MudTextField T="string" @bind-Value="model.Abbreviation" Label="Abbreviation" />
                    <MudDatePicker @bind-Date="@dateSetter" Label="Date of birth" />
                    <MudCountrySelect @bind-Value="model.Country" />
                    <MudTextField T="string" @bind-Value="model.Biography" Label="Biography" />
                </MudItem>

                <MudItem xs="4">
                    <MudText>Traits for drivers</MudText>
                    @* Use MidChipSet also more often in favour of select when there are few options! (1 click > 2 click) *@
                    <MudChipSet @bind-SelectedValues="selectedTraits" MultiSelection="true" Filter="true">
                        @foreach (var trait in Traits)
                        {
                            <MudChip Text="@trait.Name" Value="@trait.Id"></MudChip>
                        }
                    </MudChipSet>
                </MudItem>
            </MudGrid>
        </MudForm>
        <MudText>
            @if (selectedTraits != null)
            {
                <span>@selectedTraits.Count.ToString()</span>
            }
        </MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? DriverDialog { get; set; }

    [Parameter] public Driver? Driver { get; set; }
    [Parameter] public List<Trait> Traits { get; set; } = new();

    private EditDriverModel model = new();
    private DateTime? dateSetter { get; set; }
    private ICollection<object>? selectedTraits { get; set; }

    protected override void OnInitialized()
    {
        if (Driver != null)
        {
            model = new EditDriverModel(Driver);

            selectedTraits = model.DriverTraits.Select(e => e.TraitId).Cast<object>().ToList();

            dateSetter = model.DateOfBirth;
        }
        else
        {
            dateSetter = DateTime.Today;
            selectedTraits = new List<long>() as ICollection<object>;
        }
    }

    private void Submit()
    {
        model.DateOfBirth = dateSetter.GetValueOrDefault();

        if (selectedTraits != null)
        {
            model.DriverTraits = selectedTraits
                .Cast<long>()
                .Select(e => new EditDriverTraitModel { DriverId = model.Id, TraitId = e })
                .ToList();
        }

        if (model.IsDirty)
        {
            var modDriver = model.Record;
            DriverDialog?.Close(DialogResult.Ok(modDriver));
        }
    }

    private void Cancel() => DriverDialog?.Cancel();
}
