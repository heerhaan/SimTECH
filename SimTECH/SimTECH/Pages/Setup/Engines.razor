@page "/engines"
@layout SetupLayout

@inject EngineService EngineService
@inject IDialogService DialogService

<PageTitle>Engines</PageTitle>

<MudContainer>
    <MudPaper Class="d-flex justify-space-between pa-2 mx-2 my-2">
        <MudText Typo="Typo.h4">Engines</MudText>
        <MudButton Variant="Variant.Text" Color="Color.Success" OnClick="AddEngine">New</MudButton>
    </MudPaper>
    <MudDataGrid T="Engine" Items="@EngineNames" EditMode="DataGridEditMode.Cell" CommittedItemChanges="ModifyEngine" Bordered="true" Dense="true" EditTrigger="DataGridEditTrigger.Manual">
        <Columns>
            <Column T="Engine" Field="Name" />
            <Column T="Engine" CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudButtonGroup>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
                    </MudButtonGroup>
                </CellTemplate>
            </Column>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Engine" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    private List<Engine> EngineNames = new();

    protected override async Task OnInitializedAsync()
    {
        EngineNames = await EngineService.GetEngines();
    }

    void ModifyEngine(Engine item)
    {
        // TODO: Store edited values
    }

    async Task AddEngine()
    {
        var dialog = await DialogService.ShowAsync<EngineEditor>("Create a new engine");
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Engine newEngine)
        {
            //EngineNames.Add(newEngine);
        }
    }
}
