@page "/tracks"
@inject TrackService TrackService
@inject TraitService TraitService
@inject IDialogService DialogService

<PageTitle>Tracks</PageTitle>

<MudContainer>
    <MudDataGrid T="Track" Items="TrackData" Bordered="true" Class="my-2">
        <ToolBarContent>
            <MudText Typo="Typo.h4">Tracks</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" OnClick="AddTrack">New</MudButton>
        </ToolBarContent>
        <Columns>
            <HierarchyColumn T="Track" />
            <PropertyColumn Property="e => e.Name" />
            <TemplateColumn T="Track" Title="Country" SortBy="e => e.Country">
                <CellTemplate>
                    <CountryFlag Code="@context.Item.Country" Size="FlagSize.Small" IncludeName="true" />
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="e => e.Length" Title="Length (Km)" />
            <TemplateColumn T="Track" Title="Aero" Style="font-family: var(--mud-typography-caption-family)">
                <CellTemplate>@(context.Item.AeroMod)x</CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="Track" Title="Chassis" Style="font-family: var(--mud-typography-caption-family)">
                <CellTemplate>@(context.Item.ChassisMod)x</CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="Track" Title="Powertrain" Style="font-family: var(--mud-typography-caption-family)">
                <CellTemplate>@(context.Item.PowerMod)x</CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="Track" Title="Qualifying" Style="font-family: var(--mud-typography-caption-family)">
                <CellTemplate>@(context.Item.QualifyingMod)x</CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="Track">
                <CellTemplate>
                    <MudButtonGroup>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateTrack(context.Item))" />
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(async () => await DeleteTrack(context.Item))" />
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudContainer>

@code {
    List<Track> TrackData = new();

    bool _readOnly = false;

    protected override async Task OnInitializedAsync()
    {
        TrackData = await TrackService.GetTracks();
    }

    async Task AddTrack() => await UpdateTrack(new Track());
    async Task UpdateTrack(Track item)
    {
        var parameters = new DialogParameters 
        { 
            ["Track"] = item,
            ["Traits"] = await TraitService.GetTraitsOfType(Entrant.Track)
        };

        var dialog = await DialogService.ShowAsync<TrackEditor>("Modify track", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Track updatedItem)
        {
            await TrackService.UpdateTrack(updatedItem);
            TrackData = await TrackService.GetTracks();
        }
    }

    async Task DeleteTrack(Track track)
    {
        await TrackService.DeleteTrack(track);
        TrackData = await TrackService.GetTracks();
    }
}
