@page "/tracks"
@inject BreadcrumbProvider _bread
@inject TrackService TrackService
@inject TraitService TraitService
@inject IDialogService DialogService

<PageTitle>Tracks</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudPaper MinHeight="60px">
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4">
            <MudText Typo="Typo.h3">Tracks</MudText>
            <MudSpacer />
            <MudButtonGroup Variant="Variant.Outlined" Color="Color.Tertiary">
                <MudButton OnClick="ToggleDisplayArchived">@(showingArchived ? "Active" : "Archive")</MudButton>
                <MudButton OnClick="AddTrack">New</MudButton>
            </MudButtonGroup>
        </MudStack>
    </MudPaper>
    <MudDataGrid T="Track" Items="@TrackData" Dense="true">
        <Columns>
            <HierarchyColumn T="Track" />
            <PropertyColumn Property="e => e!.Name" />
            <TemplateColumn T="Track" Title="Country" SortBy="e => e.Country">
                <CellTemplate>
                    <CountryNamedFlag Code="@context.Item.Country" Size="ElementSize.Small" Reverse="true" />
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="Track" Title="Length" SortBy="e => e.Length">
                <CellTemplate>
                    <MudText Typo="Typo.caption">@(context.Item.Length)km</MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="Track" Sortable="false">
                <CellTemplate>
                    <MudButtonGroup>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateTrack(context.Item))" />
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(async () => await DeleteTrack(context.Item))" />
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            <MudText Typo="Typo.h6">@context.Item.Name</MudText>
            <MudStack Row="true">
                <MudPaper Class="px-2 py-1">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudText>Aero modifier</MudText>
                        <MudText Typo="Typo.caption">@(context.Item.AeroMod)x</MudText>
                    </MudStack>
                </MudPaper>
                <MudPaper Class="px-2 py-1">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudText>Chassis modifier</MudText>
                        <MudText Typo="Typo.caption">@(context.Item.ChassisMod)x</MudText>
                    </MudStack>
                </MudPaper>
                <MudPaper Class="px-2 py-1">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudText>Powertrain modifier</MudText>
                        <MudText Typo="Typo.caption">@(context.Item.PowerMod)x</MudText>
                    </MudStack>
                </MudPaper>
                <MudPaper Class="px-2 py-1">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudText>Qualifying modifier</MudText>
                        <MudText Typo="Typo.caption">@(context.Item.QualifyingMod)x</MudText>
                    </MudStack>
                </MudPaper>
                <MudPaper Class="px-2 py-1">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudText>Defense modifier</MudText>
                        <MudText Typo="Typo.caption">@(context.Item.DefenseMod)x</MudText>
                    </MudStack>
                </MudPaper>
            </MudStack>
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="Track" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    List<Track> TrackData;

    private bool showingArchived = false;

    protected override async Task OnInitializedAsync()
    {
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: "/"),
            new BreadcrumbItem("Tracks", href: "tracks", disabled: true),
        });

        TrackData = await TrackService.GetTracks();
    }

    async Task AddTrack() => await UpdateTrack(null);
    async Task UpdateTrack(Track? item)
    {
        var parameters = new DialogParameters 
        { 
            ["Track"] = item,
            ["Traits"] = await TraitService.GetTraitsOfType(Entrant.Track)
        };

        var dialog = await DialogService.ShowAsync<TrackEditor>("Modify track", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Track updatedItem)
        {
            await TrackService.UpdateTrack(updatedItem);
            TrackData = await TrackService.GetTracks();
        }
    }

    async Task DeleteTrack(Track track)
    {
        await TrackService.ArchiveTrack(track);
        TrackData.Remove(track);
    }

    async Task ToggleDisplayArchived()
    {
        if (showingArchived)
            TrackData = await TrackService.GetTracks();
        else
            TrackData = await TrackService.GetTracks(StateFilter.Archived);

        showingArchived = !showingArchived;
    }
}
