@using SimTECH.PageModels.Stats
@using SimTECH.Pages.Stats

<MudDialog>
    <DialogContent>
        <MudPaper Elevation="30" Width="1100px" Class="pa-2" id="driver-comparison-stat-view">
            <MudStack Row="true" AlignItems="AlignItems.Center" Class="px-0 pb-2">
                <MudIcon Icon="@IconCollection.Helmet" Class="mr-3 mb-n1" />
                <MudText Typo="Typo.h5">Driver comparison</MudText>
                <MudSpacer />
                <MudButtonGroup Variant="Variant.Text" Color="Color.Secondary">
                    <MudButton OnClick="HandleRenderCharts">Render</MudButton>
                    <ScreenshotButton TargetId="driver-comparison-stat-view" />
                    <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="@(() => StatDialog?.Close())" />
                </MudButtonGroup>
            </MudStack>
            @if (!Loading)
            {
                <MudText>Add drivers to comparison for (@selectedAspect)</MudText>
                <MudStack>
                    <div class="flex-block-row">
                        @if (Drivers.Any())
                        {
                            <MudSelectExtended @bind-SelectedValues="selectedDrivers"
                                               T="Driver"
                                               ItemCollection="@Drivers.OrderBy(e => e.FirstName).ToList()"
                                               Variant="Variant.Outlined"
                                               Label="Drivers"
                                               MultiSelection="true"
                                               SearchBox="true"
                                               MultiSelectionTextFunc="GetSelectedDriverName"
                                               SearchFunc="SearchDrivers"
                                               Class="field-lg">
                                <ItemTemplate>
                                    <MudCheckBox Value="@context.IsSelected" Color="Color.Secondary" />
                                    @if (context.Value != null)
                                    {
                                        <MudText>@context.Value.FullName</MudText>
                                        <MudSpacer />
                                        <CountryFlag Code="@context.Value.Country" Size="ElementSize.Small" />
                                    }
                                </ItemTemplate>
                            </MudSelectExtended>
                            <MudChipSet @bind-SelectedValue="selectedAspect"
                                        T="string"
                                        SelectionMode="SelectionMode.SingleSelection">
                                @foreach (var comparer in ResultComparisonItems)
                                {
                                    <MudChip Color="Color.Primary" Value="@comparer">@comparer</MudChip>
                                }
                            </MudChipSet>
                        }
                    </div>

                    <MudDivider />

                    @if (GeneratedChart != null)
                    {
                        <MudPaper Class="pa-2">
                            <ApexCharts.ApexChart TItem="DataPoint"
                                                  Title="@selectedAspect"
                                                  Options="@options"
                                                  Width="@("100%")">
                                <ApexCharts.ApexPointSeries TItem="DataPoint"
                                                            Items="@GeneratedChart.DataPoints"
                                                            Name="@GeneratedChart.Label"
                                                            SeriesType="ApexCharts.SeriesType.Bar"
                                                            XValue="@(e => e.XData)"
                                                            YValue="@(e => e.YData)" />
                            </ApexCharts.ApexChart>
                        </MudPaper>
                    }

                    @* <MudPaper Elevation="15" MinHeight="600px" Class="pa-2">
                        @if (rendered)
                        {
                            <ApexCharts.ApexChart @ref="chart"
                                                  TItem="DataPoint"
                                                  Title="Compare drivers"
                                                  Options="@options"
                                                  Height="500"
                                                  Width="@("100%")">
                                @foreach (var driverCompare in comparableDrivers)
                                {
                                    <ApexCharts.ApexPointSeries TItem="DataPoint"
                                                                Items="@driverCompare.Value.DataPoints"
                                                                Name="@driverCompare.Value.Label"
                                                                XValue="@(e => e.XData)"
                                                                SeriesType="ApexCharts.SeriesType.Bar"
                                                                YValue="@(e => e.YData)" />
                                }
                            </ApexCharts.ApexChart>
                        }
                    </MudPaper> *@
                </MudStack>
            }
        </MudPaper>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? StatDialog { get; set; }

    [Parameter] public IEnumerable<Driver> Drivers { get; set; } = Enumerable.Empty<Driver>();
    [Parameter] public IEnumerable<SeasonDriver> SeasonDrivers { get; set; } = Enumerable.Empty<SeasonDriver>();
    [Parameter] public IEnumerable<Result> Results { get; set; } = Enumerable.Empty<Result>();

    private List<Driver> driverSelection = new();
    private List<string> ResultComparisonItems { get; } = StatsDataBuilder.GetResultComparisonItems;

    private IEnumerable<Driver> selectedDrivers = new HashSet<Driver>();
    private string selectedAspect = string.Empty;

    private ChartData? GeneratedChart { get; set; }

    private ApexCharts.ApexChart<DataPoint>? chart;
    private ApexCharts.ApexChartOptions<DataPoint> options = Globals.CreateDefaultChartOptions;

    private bool Loading { get; set; }
    private bool rendered { get; set; } = false;

    private bool CanRender => selectedDrivers.Any() && !string.IsNullOrEmpty(selectedAspect);

    protected override void OnInitialized()
    {
        Loading = true;

        if (Drivers.Any())
            driverSelection.AddRange(Drivers.OrderBy(e => e.FirstName));

        options.PlotOptions = new ApexCharts.PlotOptions
            {
                Bar = new ApexCharts.PlotOptionsBar
                {
                    Horizontal = true,
                },
            };

        Loading = false;
    }

    private bool SearchDrivers(Driver driver, string text)
    {
        if (string.IsNullOrWhiteSpace(text))
            return true;

        if (driver.FullName.ToLowerInvariant().Contains(text.ToLowerInvariant()))
            return true;

        return false;
    }

    private string? GetSelectedDriverName(List<Driver> selectedDrivers)
    {
        if (!selectedDrivers.Any())
            return null;

        return string.Join(", ", selectedDrivers.Select(e => e.FullName));
    }

    private void HandleRenderCharts()
    {
        GeneratedChart = null;

        var dataChart = new ChartData() { Label = selectedAspect };

        foreach (var driver in selectedDrivers)
        {
            var seasonDriverIds = SeasonDrivers.Where(e => e.DriverId == driver.Id).Select(e => e.Id).ToList();
            var driverResults = Results.Where(e => seasonDriverIds.Contains(e.SeasonDriverId)).ToList();

            int dataPoint;

            switch (selectedAspect)
            {
                case "Entries":
                    dataPoint = driverResults.Count();
                    break;
                case "Starts":
                    dataPoint = driverResults.Count(e => e.Status != RaceStatus.Dnq);
                    break;
                case "Wins":
                    dataPoint = driverResults.Count(e => e.Position == 1);
                    break;
                case "Poles":
                    dataPoint = driverResults.Count(e => e.Grid == 1);
                    break;
                case "Fastest laps":
                    dataPoint = driverResults.Count(e => e.FastestLap);
                    break;
                case "Retirements":
                    dataPoint = driverResults.Count(e => e.Status is RaceStatus.Dnf or RaceStatus.Dsq or RaceStatus.Fatal);
                    break;
                default:
                    throw new ArgumentOutOfRangeException("what is this value, m8");
            }

            dataChart.DataPoints.Add(new DataPoint(driver.FullName, dataPoint));
        }

        GeneratedChart = dataChart;
    }

    private void GetResultDataPoints(long driverId, string aspect)
    {
        var seasonDriverIds = SeasonDrivers.Where(e => e.DriverId == driverId).Select(e => e.Id).ToList();
        var driverResults = Results.Where(e => seasonDriverIds.Contains(e.SeasonDriverId)).ToList();

        switch (aspect)
        {
            case "Entries":
                break;
            case "Starts":
                break;
            case "Wins":
                break;
            case "Poles":
                break;
            case "Fastest laps":
                break;
            case "Retirements":
                break;
            default:
                throw new ArgumentOutOfRangeException("what is this value, m8");
        }
    }
}
