<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">Tyre editor</MudText>
        <MudText>Tyres get replaced when their life is about to reach 0</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@Model">
            <MudTextField T="string" @bind-Value="@Model.Name" Label="Name" Class="field-md" />
            <MudColorPicker @bind-Text="@Model.Colour" Label="Colour" Placeholder="Select colour" DisableAlpha="true" Class="field-md" />
            <MudNumericField T="int" @bind-Value="@Model.Pace" Label="Pace" Class="field-md" />

            <MudStack Row="true" Justify="Justify.FlexStart" Spacing="4">
                <MudNumericField T="int" @bind-Value="Model.WearMin" Min="0" Max="@(Model.WearMax)" Label="WearMin" Class="field-sm" />
                <MudNumericField T="int" @bind-Value="Model.WearMax" Min="@(Model.WearMin)" Label="WearMax" Class="field-sm" />
            </MudStack>

            <MudStack Row="true" Justify="Justify.FlexStart" Spacing="4">
                <MudNumericField T="int" @bind-Value="Model.DistanceMin" Min="0" Max="@(Model.DistanceMax)" Label="DistanceMin" Class="field-sm" />
                <MudNumericField T="int" @bind-Value="Model.DistanceMax" Min="@(Model.DistanceMin)" Label="DistanceMax" Class="field-sm" />
            </MudStack>

            <MudSwitch @bind-Checked="Model.ForWet" Label="For wet conditions" Color="Color.Tertiary" />
        </MudForm>
        <MudPaper Height="75px">
            <MudStack Row="true">
                <MudCard>
                    <MudCardContent>
                        <MudText>Preview tyre</MudText>
                        @if (!string.IsNullOrEmpty(Model.Name))
                        {
                            <span class="tyre" style="border-color:@(Model.Colour)">@Model.Name.ElementAt(0)</span>
                        }
                    </MudCardContent>
                </MudCard>
                <MudCard>
                    <MudCardContent>
                        <MudText>Predicted length</MudText>
                        <MudText Typo="Typo.body2">@(PredictedLength())km</MudText>
                    </MudCardContent>
                </MudCard>
            </MudStack>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? TyreDialog { get; set; }
    [Parameter] public Tyre? Tyre { get; set; }

    private EditTyreModel Model;

    protected override void OnInitialized()
    {
        Model = new EditTyreModel(Tyre);
    }

    int PredictedLength()
    {
        if (Model.Pace == 0 || (Model.WearMax == 0 && Model.WearMin == 0))
            return 0;

        var wearAverage = (Model.WearMax + Model.WearMin) / 2;

        if (wearAverage == 0)
            return 0;

        return (Model.Pace / wearAverage) * 10;
    }

    private void Submit()
    {
        if (Model.IsDirty)
        {
            var modTyre = Model.Record;
            TyreDialog?.Close(DialogResult.Ok(modTyre));
        }
    }

    private void Cancel() => TyreDialog?.Cancel();
}
