<MudDialog>
    <TitleContent>
        <MudText>Modify tyre</MudText>
        <MudText>Tyres get replaced when their life reaches 0</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@Model">
            <MudTextField T="string" @bind-Value="Model.Name" Label="Name" Class="field-md" />
            <MudColorPicker @bind-Text="Model.Colour" Label="Colour" Placeholder="Select colour" DisableAlpha="true" Class="field-md" />
            
            <div class="d-inline-flex flex-row gap-1">
                <MudNumericField T="int" @bind-Value="Model.Length" Label="Length" Class="field-md" ReadOnly="true" />

                <span class="my-auto">Predicted length in KM: @(PredictedLength())km</span>
            </div>
            
            <MudNumericField T="int" @bind-Value="Model.Pace" Label="Pace" Class="field-md" />
            <MudStack Row="true" Justify="Justify.FlexStart" Spacing="4">
                <MudNumericField T="int" @bind-Value="Model.WearMax" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.DoubleArrow" AdornmentColor="Color.Warning" Label="WearMax" Class="field-sm" />
                <MudNumericField T="int" @bind-Value="Model.WearMin" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.DoubleArrow" AdornmentColor="Color.Warning" Label="WearMin" Class="field-sm" />
            </MudStack>
        </MudForm>
        <MudPaper Height="100px">
            <MudText Typo="Typo.h6">Preview</MudText>
            @if (!string.IsNullOrEmpty(Model.Name))
            {
                <span class="tyre" style="border-color:@(Model.Colour)">@Model.Name.ElementAt(0)</span>
            }
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? TyreDialog { get; set; }
    [Parameter] public Tyre? Tyre { get; set; }

    private EditTyreModel Model = new();

    protected override void OnInitialized()
    {
        if (Tyre != null)
        {
            Model = new EditTyreModel(Tyre);
        }
    }

    int PredictedLength()
    {
        if (Model.Pace == 0 || (Model.WearMax == 0 && Model.WearMin == 0))
            return 0;

        var wearAverage = ((Model.WearMax + Model.WearMin) / 2) * -1;

        return (Model.Pace / wearAverage) * 10;
    }

    private void Submit()
    {
        Model.Length = PredictedLength();

        if (Model.IsDirty)
        {
            var modTyre = Model.Record;
            TyreDialog?.Close(DialogResult.Ok(modTyre));
        }
    }

    private void Cancel() => TyreDialog?.Cancel();
}
