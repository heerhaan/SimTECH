@inject StrategyService StrategyService

<MudDialog>
    <TitleContent>
        <MudText>
            Add new tyre
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@tyre">
            <MudTextField T="string" @bind-Value="tyre.Name" Label="Name" />
            <MudColorPicker @bind-Text="tyre.Colour" Label="Colour" Placeholder="Select colour" DisableAlpha="true" />
            <MudNumericField T="int" @bind-Value="tyre.Length" Label="Length" />
            <MudNumericField T="int" @bind-Value="tyre.Pace" Label="Pace" />
            <MudNumericField T="int" @bind-Value="tyre.WearMax" Label="WearMax" />
            <MudNumericField T="int" @bind-Value="tyre.WearMin" Label="WearMin" />
        </MudForm>
        <MudPaper Height="75px">
            <MudText Typo="Typo.h6">Preview</MudText>
            @if (!string.IsNullOrEmpty(tyre.Name))
            {
                <span class="tyre" style="border-color:@(tyre.Colour)">@tyre.Name.ElementAt(0)</span>
            }
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    protected MudDialogInstance? TyreDialog { get; set; }

    [Parameter]
    public Tyre tyre { get; set; } = new();

    private async Task Submit()
    {
        // TODO: Function call just adds it here, but we want to actually store it!
        await StrategyService.CreateTyre(tyre);

        TyreDialog?.Close(DialogResult.Ok(tyre));
    }

    private void Cancel() => TyreDialog?.Cancel();
}
