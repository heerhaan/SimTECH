@page "/tyres"
@inject TyreService _tyreService
@inject IDialogService _dialogService
@inject IOptions<SimConfig> _config

<PageTitle>Tyres</PageTitle>

<MudContainer Class="mt-4">
    <MudDataGrid T="Tyre" Items="@TyreData" Bordered="true" Dense="true">
        <ToolBarContent>
            <MudText Typo="Typo.h4">Tyres</MudText>
            <MudText Typo="Typo.body2">Adv. dist: @(advanceDistance)Km</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" OnClick="AddTyre">New</MudButton>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="e => e!.Name" CellStyleFunc="@_applyTyreColouring" />
            <PropertyColumn Property="e => e!.Pace" CellStyle="font-family: var(--mud-typography-caption-family)" />
            <TemplateColumn T="Tyre" Title="Length" SortBy="e => e.ExpectedLength(advanceDistance)">
                <CellTemplate>
                    <MudText Typo="Typo.caption">@(context.Item.ExpectedLength(advanceDistance))Km</MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="Tyre" Title="Wear" Sortable="false">
                <CellTemplate>
                    <MudStack Row="true" Spacing="1" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.caption">@context.Item.WearMin</MudText>
                        <MudIcon Size="Size.Small" Icon="@IconCollection.ArrowMoveHorizontal" />
                        <MudText Typo="Typo.caption">@context.Item.WearMax</MudText>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="Tyre" Title="Distance" Sortable="false">
                <CellTemplate>
                    <MudStack Row="true" Spacing="1" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.caption">@context.Item.DistanceMin</MudText>
                        <MudIcon Size="Size.Small" Icon="@IconCollection.ArrowMoveHorizontal" />
                        <MudText Typo="Typo.caption">@context.Item.DistanceMax</MudText>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="Tyre" Sortable="false">
                <CellTemplate>
                    <MudButtonGroup>
                        <StateTogglerButton CallbackToggled="@(async (bool toggled) => await OnToggleChange(context.Item, toggled))"
                                            Default="@(context.Item.State == State.Active)" />
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateTyre(context.Item))" />
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudContainer>

@code {
    private List<Tyre> TyreData = new();

    int advanceDistance;

    protected override async Task OnInitializedAsync()
    {
        TyreData = await _tyreService.GetTyres();

        advanceDistance = _config.Value.CalculationDistance;
    }

    private Func<Tyre, string> _applyTyreColouring => e =>
    {
        return $"border-color: {e.Colour}";
    };

    async Task AddTyre() => await UpdateTyre(null);
    async Task UpdateTyre(Tyre? item)
    {
        var parameters = new DialogParameters { ["Tyre"] = item };

        var dialog = await _dialogService.ShowAsync<TyreEditor>("Modify tyre", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Tyre updatedItem)
        {
            await _tyreService.UpdateTyre(updatedItem);
            TyreData = await _tyreService.GetTyres();
        }
    }

    async Task OnToggleChange(Tyre tyre, bool toggled) => await ToggleState(tyre, (toggled ? State.Active : State.Closed));
    async Task ToggleState(Tyre tyre, State targetState)
    {
        await _tyreService.ChangeState(tyre, targetState);
        TyreData = await _tyreService.GetTyres();
    }
}
