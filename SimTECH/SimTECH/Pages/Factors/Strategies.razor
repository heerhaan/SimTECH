@page "/strategies"
@inject StrategyService StrategyService
@inject IDialogService DialogService

<PageTitle>Strategies</PageTitle>

<MudContainer>
    <MudTabs Outlined="true" Centered="true">
        <MudTabPanel Text="Strategies">
            <MudDataGrid T="Strategy" Items="@StrategyData" Bordered="true" Dense="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h4">Strategies</MudText>
                    <sup>PS: Keep in mind that "Avg. Pace" does NOT include the score cost a pitstop would bring!</sup>
                    <MudSpacer />
                    <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" OnClick="AddStrategy">New</MudButton>
                </ToolBarContent>
                <Columns>
                    <TemplateColumn T="Strategy" Title="Tyres" Sortable="false">
                        <CellTemplate>
                            @if (context.Item.StrategyTyres?.Count > 0)
                            {
                                <div class="d-flex flex-row gap-2">
                                    @foreach (var strategyTyre in context.Item.StrategyTyres)
                                    {
                                    <span class="tyre" style="border-color:@(strategyTyre.Tyre.Colour)">@strategyTyre.Tyre.Name.ElementAt(0)</span>
                                    }
                                </div>
                            }
                            else
                            {
                                <span>No tyres in strategy found!</span>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn T="Strategy" Title="Length" Style="font-family: var(--mud-typography-caption-family)">
                        <CellTemplate>
                            @if (context.Item.StrategyTyres?.Count > 0)
                            {
                                <span>@context.Item.StrategyTyres.Sum(e => e.Tyre.PredictedLength())Km</span>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="e => e.AveragePace()" Title="Avg. Pace" />
                    <PropertyColumn Property="e => e.State" />
                    <TemplateColumn T="Strategy" Sortable="false">
                        <CellTemplate>
                            <MudButtonGroup>
                                @if (context.Item.State == State.Closed)
                                {
                                    <MudIconButton Size="@Size.Small"
                                                   Icon="@Icons.Material.Filled.Block"
                                                   Color="Color.Warning"
                                                   Title="Unavailable"
                                                   OnClick="@(async () => await ToggleState(context.Item, State.Active))" />
                                }
                                else
                                {
                                    <MudIconButton Size="@Size.Small"
                                                   Icon="@Icons.Material.Filled.CheckCircleOutline"
                                                   Color="Color.Success"
                                                   Title="Available"
                                                   OnClick="@(async () => await ToggleState(context.Item, State.Closed))" />
                                }
                                <MudIconButton Size="@Size.Small"
                                               Icon="@Icons.Material.Outlined.Edit"
                                               OnClick="@(async () => await UpdateStrategy(context.Item))" />
                                <MudIconButton Size="@Size.Small" 
                                               Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" 
                                               OnClick="@(async () => await DeleteStrategy(context.Item))" />
                            </MudButtonGroup>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudTabPanel>

        <MudTabPanel Text="Tyres">
            <MudDataGrid T="Tyre" Items="@TyreData" Bordered="true" Dense="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h4">Tyres</MudText>
                    <MudSpacer />
                    <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" OnClick="AddTyre">New</MudButton>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="e => e.Name" CellStyleFunc="_applyTyreColouring" />
                    <PropertyColumn Property="e => e.Pace" Style="font-family: var(--mud-typography-caption-family)" />
                    <PropertyColumn Property="e => e.WearMax" Style="font-family: var(--mud-typography-caption-family)" />
                    <PropertyColumn Property="e => e.WearMin" Style="font-family: var(--mud-typography-caption-family)" />
                    <PropertyColumn Property="e => e.Length" Style="font-family: var(--mud-typography-caption-family)" />
                    <PropertyColumn Property="e => e.State" />
                    <TemplateColumn T="Tyre" Sortable="false">
                        <CellTemplate>
                            <MudButtonGroup>
                                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateTyre(context.Item))" />
                            </MudButtonGroup>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudTabPanel>
    </MudTabs>
</MudContainer>

@code {
    private List<Strategy> StrategyData = new();
    private List<Tyre> TyreData = new();

    protected override async Task OnInitializedAsync()
    {
        StrategyData = await StrategyService.GetStrategies();
        TyreData = await StrategyService.GetTyres();
    }

    private Func<Tyre, string> _applyTyreColouring => e =>
    {
        return $"border-color: {e.Colour}";
    };

    async Task AddStrategy() => await UpdateStrategy(new Strategy());
    async Task UpdateStrategy(Strategy strategy)
    {
        var parameters = new DialogParameters
        {
            ["Strategy"] = strategy,
            ["Tyres"] = TyreData
        };

        var dialog = await DialogService.ShowAsync<StrategyEditor>("Modify strategy", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Strategy updatedItem)
        {
            await StrategyService.UpdateStrategy(updatedItem);
            StrategyData = await StrategyService.GetStrategies();
        }
    }

    async Task ToggleState(Strategy strategy, State targetState)
    {
        await StrategyService.ChangeStrategyState(strategy, targetState);
        StrategyData = await StrategyService.GetStrategies();
    }

    async Task DeleteStrategy(Strategy strategy)
    {
        await StrategyService.DeleteStrategy(strategy);
        StrategyData = await StrategyService.GetStrategies();
    }

    async Task AddTyre() => await UpdateTyre(new Tyre());
    async Task UpdateTyre(Tyre item)
    {
        var parameters = new DialogParameters { ["Tyre"] = item };

        var dialog = await DialogService.ShowAsync<TyreEditor>("Modify tyre", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Tyre updatedItem)
        {
            await StrategyService.UpdateTyre(updatedItem);
            TyreData = await StrategyService.GetTyres();
        }
    }

    async Task DeleteTyre(Tyre tyre)
    {
        await StrategyService.DeleteTyre(tyre);
        TyreData = await StrategyService.GetTyres();
    }
}
