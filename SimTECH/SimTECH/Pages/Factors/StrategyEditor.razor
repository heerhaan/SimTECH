<MudDialog Style="width:800px">
    <TitleContent>
        <MudText>Modify strategy</MudText>
    </TitleContent>
    <DialogContent>
        <MudStack Row="true" Justify="Justify.SpaceEvenly">
            <MudPaper Elevation="15" Class="pa-4">
                <MudTable T="EditStrategyTyreModel" Items="@model.StrategyTyres">
                    <ToolBarContent>
                        <MudText Typo="Typo.body2">Good for a length of @(_strategyLength)km</MudText>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Order</MudTh>
                        <MudTh>Tyres</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Order">@context.Order</MudTd>
                        <MudTd DataLabel="Tyres">
                            <span class="tyre" style="border-color:@(context.Tyre.Colour)">
                                @context.Tyre.Name.ElementAt(0)
                            </span>
                        </MudTd>
                        <MudTd>
                            <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Class="pa-0" OnClick="@(() => RemoveTyreFromStrategy(context))" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
            <MudPaper Elevation="15" Class="pa-4">
                @if (Tyres == null || Tyres.Count == 0)
                {
                    <MudAlert>Consider making some tyres before attempting to create a strategy, idiot</MudAlert>
                }
                else
                {
                    <MudTable T="Tyre" Items="@Tyres" Hover="true" OnRowClick="AppendTyreToStrategy">
                        <HeaderContent>
                            <MudTh>Tyre</MudTh>
                            <MudTh>Length</MudTh>
                            <MudTh>Pace</MudTh>
                            <MudTh>Wear</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>
                                <span class="tyre" style="border-color:@(context.Colour)">@context.Name.ElementAt(0)</span>
                            </MudTd>
                            <MudTd DataLabel="Length">@context.Length</MudTd>
                            <MudTd DataLabel="Pace">@context.Pace</MudTd>
                            <MudTd>@context.WearMax ↔ @context.WearMin</MudTd>
                        </RowTemplate>
                    </MudTable>
                }
            </MudPaper>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? StrategyDialog { get; set; }

    [Parameter] public Strategy? Strategy { get; set; }
    [Parameter] public List<Tyre> Tyres { get; set; }

    private EditStrategyModel model = new();
    private int orderMax = 0;
    private int _strategyLength;

    protected override void OnInitialized()
    {
        if (Strategy != null)
        {
            model = new EditStrategyModel(Strategy);

            if (model.StrategyTyres?.Any() == true)
            {
                orderMax = model.StrategyTyres.Max(e => e.Order);
                _strategyLength = model.StrategyTyres.Sum(e => e.Tyre?.Length ?? 0);
            }
        }
    }

    private void AppendTyreToStrategy(TableRowClickEventArgs<Tyre> rowClickEvent)
    {
        Tyre tyre = rowClickEvent.Item;

        var appendedStrategyTyre = new EditStrategyTyreModel
        {
            Order = ++orderMax,
            TyreId = tyre.Id,
            Tyre = tyre,
            StrategyId = model.Id,
        };

        model.StrategyTyres.Add(appendedStrategyTyre);
        _strategyLength += tyre.Length;
    }

    private void RemoveTyreFromStrategy(EditStrategyTyreModel strategyTyre)
    {
        if (orderMax != 0)
            --orderMax;

        model.StrategyTyres.Remove(strategyTyre);
        _strategyLength -= strategyTyre.Tyre?.Length ?? 0;

        ReorderTyres();
    }

    private void ReorderTyres()
    {
        if (model.StrategyTyres?.Any() == true)
        {
            int indexer = 0;

            foreach (var strategyTyre in model.StrategyTyres)
                strategyTyre.Order = ++indexer;
        }
    }

    private void Submit()
    {
        if (model.IsDirty)
        {
            var modStrategy = model.Record;
            StrategyDialog?.Close(DialogResult.Ok(modStrategy));
        }
    }

    private void Cancel() => StrategyDialog?.Cancel();
}
