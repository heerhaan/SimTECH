@inject StrategyService StrategyService

<MudDialog>
    <TitleContent>
        <MudText>
            Add new strategy
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid Spacing="2">
            <MudItem xs="6">
                <MudPaper>
                    <MudTable Items="@_tyresInStrategy" T="StrategyTyre">
                        <HeaderContent>
                            <MudTh>NumberStint</MudTh>
                            <MudTh>Order</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="NumberStint">@context.NumberStint</MudTd>
                            <MudTd DataLabel="Order">@context.Order</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
            <MudItem xs="6">
                <MudPaper>
                    <MudTable Items="Tyres" OnRowClick="AppendTyreToStrategy" T="Tyre">
                        <HeaderContent>
                            <MudTh>Tyre</MudTh>
                            <MudTh>Length</MudTh>
                            <MudTh>Pace</MudTh>
                            <MudTh>Wear</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Tyre"><span class="tyre">@context.Name.ElementAt(0)</span></MudTd>
                            <MudTd DataLabel="Length">@context.Length</MudTd>
                            <MudTd DataLabel="Pace">@context.Pace</MudTd>
                            <MudTd DataLabel="Wear">@context.WearMax ↔ @context.WearMin</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    protected MudDialogInstance? StrategyDialog { get; set; }

    [Parameter]
    public Strategy strategy { get; set; } = new();

    [Parameter]
    public List<Tyre> Tyres { get; set; } = new();

    private List<StrategyTyre> _tyresInStrategy = new();
    private int lastStintNumber = 0;

    protected override void OnInitialized()
    {
        if (strategy?.StrategyTyres?.Count > 0)
        {
            foreach (var stratTyre in strategy.StrategyTyres)
            {
                if (stratTyre.NumberStint > lastStintNumber)
                    lastStintNumber = stratTyre.NumberStint;

                var tyreMatch = Tyres.Find(e => e.Id == stratTyre.TyreId);

                if (tyreMatch != null)
                {
                    stratTyre.Tyre = tyreMatch;

                    _tyresInStrategy.Add(stratTyre);
                }
            }
        }
    }

    private void AppendTyreToStrategy(TableRowClickEventArgs<Tyre> rowClickEvent)
    {
        Tyre tyre = rowClickEvent.Item;

        lastStintNumber += tyre.Length;

        var appendedStrategyTyre = new StrategyTyre
        {
            NumberStint = lastStintNumber,
            TyreId = tyre.Id,
            Tyre = tyre
        };

        _tyresInStrategy.Add(appendedStrategyTyre);
    }

    private void RemoveTyreFromStrategy()
    {
        throw new NotImplementedException();
    }

    private async Task Submit()
    {
        // TODO: Function call just adds it here, but we want to actually store it!
        await StrategyService.CreateStrategy(strategy);

        StrategyDialog?.Close(DialogResult.Ok(strategy));
    }

    private void Cancel() => StrategyDialog?.Cancel();
}
