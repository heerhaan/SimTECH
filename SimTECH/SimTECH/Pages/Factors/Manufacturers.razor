@page "/manufacturers"
@inject ManufacturerService ManufacturerService
@inject IDialogService DialogService

<PageTitle>Manufacturers</PageTitle>

<MudContainer>
    <MudPaper Class="d-flex justify-space-between pa-2 mx-2 my-2">
        <MudText Typo="Typo.h4">Tyre manufacturers</MudText>
        <MudButton Variant="Variant.Text" Color="Color.Success" OnClick="AddManufacturer">New</MudButton>
    </MudPaper>
    <MudTable Items="@ManufacturerNames" Bordered="true">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Pace</MudTh>
            <MudTh>Wear</MudTh>
            <MudTh>State</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Style="@($"background-color: {context.Colour}; color: {context.Accent}")">@context.Name</MudTd>
            <MudTd>@context.Pace</MudTd>
            <MudTd>@context.WearMax ↔ @context.WearMin</MudTd>
            <MudTd>@context.State</MudTd>
            <MudTd Class="d-flex justify-end">
                <MudButtonGroup>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await UpdateManufacturer(context))" />
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    private IEnumerable<Manufacturer> ManufacturerNames = new List<Manufacturer>();

    protected override async Task OnInitializedAsync()
    {
        ManufacturerNames = await ManufacturerService.GetManufacturers();
    }

    private Func<Manufacturer, string> _applyColouring => e =>
    {
        return $"background-color: {e.Colour}; color: {e.Accent}";
    };

    async Task AddManufacturer() => await UpdateManufacturer(new Manufacturer());
    async Task UpdateManufacturer(Manufacturer manufacturer)
    {
        var dialog = await DialogService.ShowAsync<ManufacturerEditor>("Create a new manufacturer");
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Manufacturer item)
        {
            await ManufacturerService.UpdateManufacturer(item);
            ManufacturerNames = await ManufacturerService.GetManufacturers();
        }
    }
}
