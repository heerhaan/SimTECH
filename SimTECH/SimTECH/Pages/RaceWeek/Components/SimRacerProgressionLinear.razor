<div class="flat-signal-icons-race-bar-wrapper">
    @foreach (var lapEvent in RaceDriver.LapScores)
    {
        @foreach (var raceEvent in lapEvent.ListOfDubiousEvents())
        {
            <SignalNote LapPercentage="@(NumberHelper.Percentage((lapEvent.Order - 1), CalculationCount))"
                        Signal="@raceEvent" />
        }
    }
</div>
<SimProgressLinear Bars="@coloursOfUsedTyres" />

@code {
    [Parameter, EditorRequired] public RaceDriver RaceDriver { get; set; }

    [Parameter, EditorRequired] public int CalculationCount { get; set; }

    private List<(double, string)> coloursOfUsedTyres
    {
        get
        {
            if (RaceDriver == null)
                return new();

            // Filters out the lapscore created on formation
            return RaceDriver.LapScores
                .Where(e => e.Order > 0)
                .ToList()
                .ConvertAll(e => (NumberHelper.Percentage(1, CalculationCount), e.TyreColour ?? Globals.DefaultColour));
        }
    }
}
