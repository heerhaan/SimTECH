@using SimTECH.Pages.RaceWeek.Components

<MudGrid id="raceweek-landing" Spacing="1">
    <MudItem xs="12">
        <MudPaper MinHeight="60px" Class="pa-2 flex-block-row justify-space-between">
            <div class="btn-md"></div>
            <MudText Typo="Typo.h3">@Model.Race.Name</MudText>
            <ScreenshotButton TargetId="raceweek-landing"
                              Colour="Color.Tertiary"
                              IconSize="Size.Small"
                              PostFixIcon="true"
                              Class="btn-md" />
        </MudPaper>
    </MudItem>
    <MudItem xs="2">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.h5">Track information</MudText>
            <MudDivider Class="my-2" />
            <dl class="property-list">
                <dt>
                    <CountryNamedFlag Code="@Model.Race.Track.Country" Size="ElementSize.Normal" Reverse="true" />
                </dt>
                <dd>Country</dd>

                <dt>@(Model.Race.Track.Length)km</dt>
                <dd>Length</dd>

                <dt>@NumberHelper.LapCount(Model.Race.RaceLength, Model.Race.Track.Length)</dt>
                <dd>Laps</dd>

                <dt>@Model.Race.Track.ShortTextMods()</dt>
                <dd>A/C/P</dd>

                <dt>@Model.Race.Track.QualifyingMod.ToString("F2")</dt>
                <dd>Qualifying mod</dd>

                <dt>@Model.Race.Track.DefenseMod.ToString("F2")</dt>
                <dd>Defense mod</dd>
            </dl>

            <MudText Typo="Typo.subtitle1">Circuit traits</MudText>
            <MudDivider Class="my-2" />
            @if (TrackTraits.Any() == true)
            {
                <dl class="property-list">
                    @foreach (var trait in TrackTraits)
                    {
                        <dt>@trait.Name</dt>
                        <dd>@trait.Description</dd>
                    }
                </dl>
            }
            else
            {
                <MudText Typo="Typo.subtitle2">Track doesn't have any traits</MudText>
            }

            <MudListExtended T="string" Dense="true">
                <MudListItemExtended T="string" Text="Example" SecondaryText="LabelLike" />
            </MudListExtended>
        </MudPaper>
    </MudItem>
    <MudItem xs="7">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.h5">Starting grid</MudText>
            <MudDivider Class="my-2" />
            <MudTable Items="@Model.RaweCeekDrivers.OrderBy(e => e.AbsoluteGrid)" Dense="true" Class="extra-dense">
                <HeaderContent>
                    <MudTh Class="number-col-lg">Grid</MudTh>
                    <MudTh Class="number-col">TGT</MudTh>
                    <MudTh Class="accent-cell"></MudTh>
                    <MudTh Style="max-width: 220px">Name</MudTh>
                    <MudTh Class="number-col">NO</MudTh>
                    <MudTh Style="max-width: 220px">Team</MudTh>
                    <MudTh Class="number-col">ENG</MudTh>
                    @if (Model.Season.HasRaceClasses)
                    {
                        <MudTh Class="number-col">CLA</MudTh>
                    }
                    <MudTh Class="number-col">SUP</MudTh>
                    @* <MudTh>Traits</MudTh> *@
                    <MudTh Style="text-align: center">Tyre</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Class="number-col-lg">
                        <PenaltyBadge Penalty="@context.Penalty">
                            @if (context.Status == RaceStatus.Dnq)
                            {
                                <div class="result-cell" style="@context.Status.StatusStyles()">
                                    <ResultLabel Text="@context.Status.ReadableStatus()" />
                                </div>
                            }
                            else
                            {
                                <div class="d-flex flex-row align-items-center gap-1">
                                    <DriverPosition Number="@context.Grid" />
                                    @if (Model.Season.HasRaceClasses)
                                    {
                                        <sup>@context.AbsoluteGrid</sup>
                                    }
                                </div>
                            }
                        </PenaltyBadge>
                    </MudTd>
                    <MudTd>
                        <MudText Typo="Typo.caption">@context.ExpectedPosition</MudText>
                    </MudTd>
                    <MudTd Class="accent-cell">
                        <SmolAccent Colour="@context.Colour" />
                    </MudTd>
                    <MudTd>
                        <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center" Style="max-width: 220px">
                            <MudText Class="overflow-hider">@context.FullName</MudText>
                            @if (context.Grid == 1)
                            {
                                <sup style="font-size: 0.7rem">P</sup>
                            }
                            @if (context.FastestLap)
                            {
                                <sup style="font-size: 0.7rem">F</sup>
                            }
                        </MudStack>
                    </MudTd>
                    <MudTd Class="number-col">
                        <NumberDisplay Colour="@context.Colour" Accent="@context.Accent">@context.Number</NumberDisplay>
                    </MudTd>
                    <MudTd Style="max-width: 220px">
                        <MudText Class="overflow-hider">@context.TeamName</MudText>
                    </MudTd>
                    <MudTd Class="number-col">
                        <NumberDisplay Colour="@context.Engine.Colour" Accent="@context.Engine.Accent" Typo="Typo.button">
                            @context.Engine.Name.ElementAt(0)
                        </NumberDisplay>
                    </MudTd>
                    @if (Model.Season.HasRaceClasses)
                    {
                        <MudTd Class="number-col">
                            <SupplierDisplay Colour="@context.Class?.Colour">
                                @context.Class?.Tag
                            </SupplierDisplay>
                        </MudTd>
                    }
                    <MudTd Class="number-col">
                        <SupplierDisplay Colour="@context.ManufacturerColour" Accent="@context.ManufacturerAccent">
                            @context.ManufacturerName.ElementAt(0)
                        </SupplierDisplay>
                    </MudTd>
                    @* <MudTd>
                        <div class="d-flex flex-column">
                            @foreach (var trait in context.TraitNames)
                            {
                                <p class="tiny-text-list-item">@trait</p>
                            }
                        </div>
                    </MudTd> *@
                    <MudTd>
                        <div class="d-flex flex-row justify-center">
                            <MudLink OnClick="@(async () => await HandleTyrePicker(context.ResultId))">
                                <TyreElement Colour="@context.Tyre.Colour">
                                    @context.Tyre.Name.ElementAt(0)
                                </TyreElement>
                            </MudLink>
                        </div>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.h5">Weekend</MudText>
            <MudDivider Class="my-2" />

            <MudText Typo="Typo.subtitle1">Weather</MudText>
            <MudSimpleTable Bordered="true" Dense="true" Class="extra-dense">
                <thead>
                    <tr>
                        <th>Type</th>
                        <th>ENG</th>
                        <th>REL</th>
                        <th>RNG</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <CustomIcon Icon="@Model.Climate.Icon" Colour="@Model.Climate.Colour">
                                <MudText Typo="Typo.h5" Color="Color.Default">@Model.Climate.Terminology</MudText>
                            </CustomIcon>
                        </td>
                        <td>
                            <MudText Typo="Typo.caption">@Model.Climate.EngineMultiplier</MudText>
                        </td>
                        <td>
                            <MudText Typo="Typo.caption">@Model.Climate.ReliablityModifier</MudText>
                        </td>
                        <td>
                            <MudText Typo="Typo.caption">@Model.Climate.RngModifier</MudText>
                        </td>
                    </tr>
                </tbody>
            </MudSimpleTable>

            <MudText Typo="Typo.subtitle1">Weather alt</MudText>
            <div class="flex-block-row justify-space-between">
                <div>
                    <CustomIcon Icon="@Model.Climate.Icon" Colour="@Model.Climate.Colour">
                        <MudText Typo="Typo.h5" Color="Color.Default">@Model.Climate.Terminology</MudText>
                    </CustomIcon>
                </div>
                <div>
                    <dl>
                        <dt>ENG (→ * power):</dt>
                        <dd>
                            <MudText Typo="Typo.caption">@Model.Climate.EngineMultiplier</MudText>
                        </dd>
                        <dt>REL (→ + DRI.REL.):</dt>
                        <dd>
                            <MudText Typo="Typo.caption">@Model.Climate.ReliablityModifier</MudText>
                        </dd>
                        <dt>RNG (→ + MAX RNG):</dt>
                        <dd>
                            <MudText Typo="Typo.caption">@Model.Climate.RngModifier</MudText>
                        </dd>
                    </dl>
                </div>
            </div>

            <MudText Typo="Typo.subtitle1">Tyre suppliers</MudText>
            <MudTable Items="@TyreSuppliers" Bordered="true" Dense="true">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Bonus</MudTh>
                    <MudTh>Wear</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <SupplierDisplay Colour="@context.Colour" Accent="@context.Accent">@context.Name</SupplierDisplay>
                    </MudTd>
                    <MudTd>
                        <MudText Typo="Typo.caption">@context.Pace</MudText>
                    </MudTd>
                    <MudTd>
                        <MudStack Row="true" Spacing="1" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.caption">@context.WearMin</MudText>
                            <MudIcon Size="Size.Small" Icon="@IconCollection.ArrowMoveHorizontal" />
                            <MudText Typo="Typo.caption">@context.WearMax</MudText>
                        </MudStack>
                    </MudTd>
                </RowTemplate>
            </MudTable>

            <MudText Typo="Typo.subtitle1">Abbreviations</MudText>
            <MudText Typo="Typo.body2" Color="Color.Info">
                This table only stays here until i'm sure all you smoothbrains have memorized this
            </MudText>
            <MudSimpleTable Bordered="true" Dense="true" Class="extra-dense">
                <thead>
                    <tr>
                        <th>ABB</th>
                        <th>What's this?</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <MudText Typo="Typo.caption">ABB</MudText>
                        </td>
                        <td>
                            <MudText Typo="Typo.body2">Abbreviation</MudText>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <MudText Typo="Typo.caption">A/C/P</MudText>
                        </td>
                        <td>
                            <MudText Typo="Typo.body2">Aero / Chassis / Powertrain</MudText>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <MudText Typo="Typo.caption">ENG</MudText>
                        </td>
                        <td>
                            <MudText Typo="Typo.body2">Engine</MudText>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <MudText Typo="Typo.caption">PWR</MudText>
                        </td>
                        <td>
                            <MudText Typo="Typo.body2">Power</MudText>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <MudText Typo="Typo.caption">REL</MudText>
                        </td>
                        <td>
                            <MudText Typo="Typo.body2">Reliability</MudText>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <MudText Typo="Typo.caption">RNG</MudText>
                        </td>
                        <td>
                            <MudText Typo="Typo.body2">Jesus</MudText>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <MudText Typo="Typo.caption">STP</MudText>
                        </td>
                        <td>
                            <MudText Typo="Typo.body2">Setup</MudText>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <MudText Typo="Typo.caption">SUP</MudText>
                        </td>
                        <td>
                            <MudText Typo="Typo.body2">Tyre supplier</MudText>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <MudText Typo="Typo.caption">TGT</MudText>
                        </td>
                        <td>
                            <MudText Typo="Typo.body2">Target position</MudText>
                        </td>
                    </tr>
                </tbody>
            </MudSimpleTable>

            @if (Model.League.SetupRng > 0)
            {
                <MudText Typo="Typo.subtitle1" Class="mt-2">Best setups (5)</MudText>
                @foreach(var best in Model.RaweCeekDrivers.OrderByDescending(e => e.Setup).Take(5))
                {
                    <MudText Typo="Typo.body2">
                        @($"{best.FullName} - [{best.Setup}]")
                    </MudText>
                }
            }

            <MudText Typo="Typo.subtitle1">Haan notifications</MudText>
            <MudText Class="my-2" Typo="Typo.body2" Color="Color.Warning">
                I should hire a web designer.
            </MudText>
            <MudText Typo="Typo.subtitle2">Bob :(</MudText>
            <MudText Class="my-1">
                Carefulness equalizes smartfulness
                <br />
                Mindfulness equalizes brain smoothening
                <br />
                Pain equals gain
                <br />
                idk anymore man
            </MudText>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter] public RaweCeekModel Model { get; set; }

    [Parameter] public IEnumerable<Trait> TrackTraits { get; set; } = Enumerable.Empty<Trait>();
    [Parameter] public List<Manufacturer> TyreSuppliers { get; set; } = new();
    [Parameter] public EventCallback<long> OnOpenTyrePicker { get; set; }

    public async Task HandleTyrePicker(long resultId)
    {
        await OnOpenTyrePicker.InvokeAsync(resultId);
    }
}
