@using SimTECH.Pages.RaceWeek.Components
@using SimTECH.Pages.RaceWeek.Dialogs

@inject IDialogService _dialog

@if (!loading)
{
    <MudPaper Elevation="25" MinHeight="60px" Width="100%">
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="pa-2">
            <div style="width:30%">
                <MudMenu Label="Charts" Icon="@Icons.Material.Outlined.InsertChart" Color="Color.Secondary" Variant="Variant.Text">
                    <MudMenuItem OnClick="ShowGapperChart">Gap-to-leader</MudMenuItem>
                    <MudMenuItem OnClick="ShowPositionChart">Position-progression</MudMenuItem>
                </MudMenu>
            </div>

            <MudStack Spacing="0" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.subtitle2">Laps to advance</MudText>
                <MudChipSet SelectedChipChanged="ChangeCalculationPerAdvance" Mandatory="true">
                    <MudChip Value="1" Color="Color.Primary">
                        @(NumberHelper.CalculateLapCount(1 * calculationDistance, Model.Race.Track.Length))
                    </MudChip>
                    <MudChip Value="5" Default="true" Color="Color.Primary">
                        @(NumberHelper.CalculateLapCount(5 * calculationDistance, Model.Race.Track.Length))
                    </MudChip>
                    <MudChip Value="10" Color="Color.Primary">
                        @(NumberHelper.CalculateLapCount(10 * calculationDistance, Model.Race.Track.Length))
                    </MudChip>
                    <MudChip Value="@calculationCount" Color="Color.Primary">@totalLaps</MudChip>
                </MudChipSet>
            </MudStack>

            <div class="d-flex flex-row-reverse" style="width:30%">
                <MudButtonGroup Variant="Variant.Text" Color="Color.Tertiary">
                    <ScreenshotIconButton TargetId="race-display" Class="btn-sm" />
                    @if (Model.Race.State != State.Closed)
                    {
                        <MudTooltip Text="Advance race" Placement="Placement.Top" Color="Color.Tertiary">
                            <MudIconButton Icon="@IconCollection.ChevronsRight" OnClick="Advance" Class="btn-sm" />
                        </MudTooltip>
                    }
                </MudButtonGroup>
            </div>
        </MudStack>
    </MudPaper>
    <div id="race-display">
        <MudTable Items="@raceDrivers.OrderBy(e => (int)e.Status).ThenBy(e => e.AbsolutePosition)"
                  Dense="true"
                  Class="extra-dense overflow-x-hide">
            <ToolBarContent>
                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="pa-2 mud-width-full">
                    <div class="d-flex flex-row gap-3 align-center pa-0" style="width:30%">
                        <CountryFlag Code="@Model.Race.Track.Country" />
                        <MudText Typo="Typo.h5" Class="overflow-hider">@Model.Race.Name - ROUND @Model.Race.Round</MudText>
                    </div>

                    <MudChip Color="@lapIndicatorBackground" Label="true" DisableRipple="true">
                        <MudText Typo="Typo.h5" Color="@lapIndicatorColour">LAP @(racedLaps) / @(totalLaps)</MudText>
                    </MudChip>

                    <div class="d-flex flex-row-reverse align-center gap-3 pa-0" style="width: 30%">
                        <MudText Typo="Typo.h5">@Model.Climate.Terminology</MudText>
                        <CustomIcon Icon="@Model.Climate.Icon" Colour="@Model.Climate.Colour" />
                    </div>
                </MudStack>
            </ToolBarContent>
            <HeaderContent>
                <MudTh Style="width: 20px"></MudTh>
                <MudTh Style="width: 40px">Grid</MudTh>
                <MudTh Class="pa-0" Style="width: 5px"></MudTh>
                <MudTh Style="max-width: 220px">Name</MudTh>
                <MudTh Class="number-col">NO</MudTh>
                <MudTh Style="max-width: 220px">Team</MudTh>
                @if (Model.Season.HasRaceClasses)
                {
                    <MudTh Class="number-col">CLA</MudTh>
                }
                <MudTh Class="number-col">PWR</MudTh>
                <MudTh Class="text-center" Style="width: 175px">ATT / DEF</MudTh>
                <MudTh Class="tyre-col">Tyre</MudTh>
                <MudTh Class="number-col">Pace</MudTh>
                <MudTh Class="number-col-lg">Status</MudTh>
                <MudTh Style="min-width: 500px">Progression</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center" Class="pa-0">
                        <DriverPosition Number="@context.Position" />
                        @if (Model.Season.HasRaceClasses)
                        {
                            <sup>@context.AbsolutePosition</sup>
                        }
                    </MudStack>
                </MudTd>
                <MudTd>
                    <GridChange Change="@context.GridChange" />
                </MudTd>
                <MudTd Class="accent-cell">
                    <SmolAccent Colour="@context.Colour" />
                </MudTd>
                <MudTd>
                    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center" Class="pa-0" Style="max-width: 300px">
                        <MudText>@context.FirstName</MudText>
                        <MudText Typo="Typo.button" Class="fontsize-button-text overflow-hider">@context.LastName</MudText>
                        @if (context.HasFastestLap)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Timer" Size="Size.Small" Style="color:mediumpurple" />
                        }
                        <MudSpacer />
                        <CountryFlag Code="@context.Nationality" Size="ElementSize.Small" />
                    </MudStack>
                </MudTd>
                <MudTd Class="number-col">
                    <NumberDisplay Colour="@context.Colour" Accent="@context.Accent">@context.Number</NumberDisplay>
                </MudTd>
                <MudTd Class="overflow-hider" Style="max-width:250px">
                    <MudText Typo="Typo.button">@context.TeamName</MudText>
                </MudTd>
                @if (Model.Season.HasRaceClasses)
                {
                    <MudTd Class="number-col">
                        <SupplierDisplay Colour="@context.Class?.Colour">
                            @context.Class?.Tag
                        </SupplierDisplay>
                    </MudTd>
                }
                <MudTd Class="number-col">
                    <MudText Typo="Typo.caption">@context.Power</MudText>
                </MudTd>
                <MudTd>
                    <MudStack Row="true" Spacing="1" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="pa-0 mud-width-full">
                        <MudIcon Icon="@IconCollection.Sword" Size="Size.Small" />
                        <MudText Typo="Typo.caption">@context.Attack</MudText>
                        <sup>@context.OvertakeCount</sup>
                        <span class="py-2" style="background-color: antiquewhite;padding-left: 1px;padding-right: 1px;"></span>
                        <MudText Typo="Typo.caption">@context.Defense</MudText>
                        <sup>@context.DefensiveCount</sup>
                        <MudIcon Icon="@IconCollection.ShieldChevron" Size="Size.Small" />
                    </MudStack>
                </MudTd>
                <MudTd Class="tyre-col">
                    <MudStack Row="true" Spacing="1" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="pa-0 mud-width-full">
                        <TyreElement Colour="@context.CurrentTyre.Colour">@context.CurrentTyre.Name.ElementAt(0)</TyreElement>
                        <sup>@context.TyreLife</sup>
                    </MudStack>
                </MudTd>
                <MudTd Class="number-col">
                    @if (context.Status == RaceStatus.Racing && context.SingleOccurrence == null)
                    {
                        <GradientColour Min="@lastLowestScore" Max="@lastHighestScore" Value="@context.LastScore">
                            <MudText Typo="Typo.caption" Color="Color.Inherit">@context.LastScore</MudText>
                        </GradientColour>
                    }
                    else
                    {
                        <MudText Typo="Typo.button" Color="Color.Warning">@(context.SingleOccurrence ?? "-")</MudText>
                    }
                </MudTd>
                <MudTd Class="number-col-lg">
                    @if (context.Incident == null)
                    {
                        <MudText Typo="Typo.caption">@context.GapAbove</MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.button" Color="Color.Error">@context.Incident.Name</MudText>
                    }
                </MudTd>
                <MudTd>
                    <SimRacerProgressionLinear RaceDriver="@context" CalculationCount="@calculationCount" />
                </MudTd>
            </RowTemplate>
        </MudTable>
        <MudPaper Class="pt-2 px-1">
            <SimProgressLinear Bars="@(occurrences.Select(e => ((NumberHelper.Percentage(1, calculationCount)), e.Value.SituationColour())).ToList())"
                               AddIndicator="true"
                               LineSize="ElementSize.Normal"
                               CalculationDistance="@calculationDistance"
                               TrackLength="@Model.Race.Track.Length" />

            <MudStack Row="true" AlignItems="AlignItems.Center" Class="px-4 pt-5 pb-2">
                <MudText Typo="Typo.button">Legend</MudText>
                <MudChip Icon="@IconCollection.HelmetOff" IconColor="Color.Error" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true">
                    Crash
                </MudChip>
                <MudChip Icon="@IconCollection.CarCrash" IconColor="Color.Error" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true">
                    Issues
                </MudChip>
                <MudChip Icon="@IconCollection.EngineOff" IconColor="Color.Error" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true">
                    Engine
                </MudChip>
                <MudChip Text="Mistake" Icon="@Icons.Material.Filled.ErrorOutline" IconColor="Color.Warning" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true" />
                <MudChip Icon="@IconCollection.RefreshDot" IconColor="Color.Success" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true">
                    Pitstop
                </MudChip>
                <MudChip Icon="@Icons.Material.Filled.SwapVert" IconColor="Color.Info" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true">
                    Swap
                </MudChip>
                <MudChip Text="Injury" Icon="@Icons.Material.Filled.Healing" IconColor="Color.Warning" Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true" />
            </MudStack>
        </MudPaper>
    </div>
}

@code {
    [CascadingParameter] public RaweCeekModel Model { get; set; }

    [Parameter] public List<LapScore> LapScores { get; set; } = new();
    [Parameter] public List<RaceOccurrence> Occurrences { get; set; } = new();
    [Parameter] public IEnumerable<Incident> Incidents { get; set; } = Enumerable.Empty<Incident>();
    [Parameter] public IEnumerable<Tyre> Tyres { get; set; } = Enumerable.Empty<Tyre>();
    [Parameter] public SimConfig Config { get; set; } = new();
    [Parameter] public EventCallback OnFinish { get; set; } = new();

    private static readonly Entrant[] cycleableReliablities = new[] { Entrant.Driver, Entrant.Team, Entrant.Engine };

    Dictionary<int, SituationOccurrence> occurrences = new();
    List<RaceDriver> raceDrivers = new();
    List<Incident> possibleIncidents = new();
    List<Tyre> availableTyres = new();

    // Controls for the view
    bool loading = true;
    bool safetyCarOut = false;
    Color lapIndicatorBackground = Color.Dark;
    Color lapIndicatorColour = Color.Default;

    Entrant activeReliabilityCheck = Entrant.Driver;
    int reliablityCycler = 0;

    // Supportive caluclation fields
    int fatalityOdds;
    int disqualifyChance;
    int safetyCarOdds;
    int safetyReturnOdds;
    int safetyPitstopSubtract;
    int mistakeRolls;
    int mistakeMin;
    int mistakeMax;
    int battleRng;
    double gapMarge;

    int fastestLap;
    int highestScore;
    int racedLaps;
    int totalLaps;
    int minLapRng;
    int maxLapRng;
    int pitMin;
    int pitMax;
    int racerCount;

    int calculated;
    int calculationCount;
    int calculationsPerAdvance = 5;
    int calculationDistance = 10;

    int lastHighestScore = 0;
    int lastLowestScore = 0;
    int safetyCarGap = 50;
    int safetyGapCloserDivider = 2;
    int safetyWearDivider = 3;
    int minimumTyreLife = -25;

    bool isFirstLap => calculated == 1;

    protected override void OnInitialized()
    {
        possibleIncidents.AddRange(
            Incidents.Where(e => e.State == State.Active));
        availableTyres.AddRange(
            Tyres.Where(e => e.State == State.Active && (e.LeagueTyres?.Any(e => e.LeagueId == Model.Season.LeagueId) ?? false)));

        minLapRng = Model.Season.RngMinimum;
        maxLapRng = Model.Season.RngMaximum;
        pitMin = Model.Season.PitMinimum;
        pitMax = Model.Season.PitMaximum;
        mistakeRolls = Model.Season.MistakeRolls;
        mistakeMin = Model.Season.MistakeMinimum;
        mistakeMax = Model.Season.MistakeMaximum;
        safetyPitstopSubtract = Model.Season.PitCostSubtractCaution;

        fatalityOdds = Config.FatalityChance;
        disqualifyChance = Config.DisqualifyChance;
        safetyCarOdds = Config.SafetyCarChance;
        safetyReturnOdds = Config.SafetyCarReturnChance;
        safetyCarGap = Config.SafetyCarGap;
        battleRng = Config.BattleRng;
        gapMarge = Config.GapMarge;
        minimumTyreLife = Config.MinimumTyreLife;

        calculationDistance = Config.CalculationDistance;
        calculationCount = Model.Race.RaceLength / calculationDistance;

        if (LapScores.Any())
            calculated = LapScores.Select(e => e.Order).Max();

        for (int i = 1; i <= calculationCount; i++)
        {
            var occurrMatch = Occurrences.FirstOrDefault(e => e.Order == i);

            occurrences.Add(i, occurrMatch?.Occurrences ?? SituationOccurrence.Unknown);
        }

        racedLaps = GetCurrentLapCount;
        totalLaps = NumberHelper.CalculateLapCount(Model.Race.RaceLength, Model.Race.Track.Length);

        BuildRaceDrivers();
    }

    private void BuildRaceDrivers()
    {
        raceDrivers = Model.RaweCeekDrivers
            .OrderBy(e => e.AbsolutePosition)
            .Take(Model.Season.MaximumDriversInRace)
            .Select(e => e.MapToRaceDriver())
            .ToList();

        racerCount = raceDrivers.Count;

        // Refactor this if persisting happens per advance
        if (Model.Race.State == State.Closed)
        {
            foreach (var driver in raceDrivers)
            {
                driver.LapScores = LapScores.Where(e => e.ResultId == driver.ResultId).ToList();

                var lastScore = driver.LapScores.MaxBy(e => e.Order)?.Score ?? 0;
                driver.LastScore = lastScore;

                if (lastScore > lastHighestScore)
                    lastHighestScore = lastScore;
                else if (lastScore < lastLowestScore)
                    lastLowestScore = lastScore;
            }

            raceDrivers.SetPositions(gapMarge);

            highestScore = raceDrivers.Max(e => e.LapSum);
        }

        loading = false;
    }

    private async void Advance()
    {
        // Use this variable to persist the lap scores which were generated in this advance
        var lapScoresToPersist = new List<LapScore>();

        // Every i in this instance is relative to 10km (or calculationDistance) of racing aka a calculation
        for (int i = 0; i < calculationsPerAdvance; i++)
        {
            // Prevent continuing the advancing if we have already reached the limit
            if (calculated >= calculationCount)
                break;

            ++calculated;

            AddCalculationSituation();

            // Logic for what happens during a SC goes here
            if (safetyCarOut)
            {
                var safetyCarGoesBackIn = HandleSafetyMoment(lapScoresToPersist);
                if (safetyCarGoesBackIn)
                {
                    // After handling a safety car round, it goes back in
                    lapIndicatorBackground = Color.Dark;
                    lapIndicatorColour = Color.Default;
                    safetyCarOut = false;
                }

                continue;
            }

            foreach (var driver in raceDrivers.Where(e => e.Status == RaceStatus.Racing))
            {
                var lapScore = HandleDriverAdvancement(driver);

                driver.LapScores.Add(lapScore);
                lapScoresToPersist.Add(lapScore);
            }

            DeterminePositions();
            PostProcessAdvance();

            if (safetyCarOut)
            {
                lapIndicatorBackground = Color.Warning;
                lapIndicatorColour = Color.Dark;
                // Stop iterating through all advances since SC occurrence
                break;
            }
        }

        racedLaps = GetCurrentLapCount;

        var lastScores = raceDrivers.Where(e => e.Status == RaceStatus.Racing).Select(e => e.LastScore).ToArray();
        if (lastScores.Any())
        {
            lastLowestScore = lastScores.Min();
            lastHighestScore = lastScores.Max();
        }

        if (calculated >= calculationCount)
        {
            await Finish();
        }

        // Persist the new stint results, yes after doing all whats needed to show them
        //PersistLapScores(lapScoresToPersist);
    }

    private LapScore HandleDriverAdvancement(RaceDriver driver)
    {
        driver.SingleOccurrence = null;
        driver.InstantOvertaken = false;
        driver.RecentMistake = false;

        var lapScore = new LapScore { ResultId = driver.ResultId, Order = calculated };

        // Determine if either driver, car or engine has failed
        var safetyCarOccurrence = CheckReliability(driver, lapScore);

        // Calculate the score for drivers which are still racing
        if (driver.Status == RaceStatus.Racing)
        {
            var minRng = (minLapRng + driver.RngMinMod);
            var maxRng = (maxLapRng + driver.RngMaxMod);

            int lapValue = NumberHelper.RandomInt(minRng, maxRng);

            // Adds the qualifying bonus in the first lap, should be thought about once more though in terms of what we do with this
            if (isFirstLap)
                lapValue += driver.QualifyingBonus(racerCount, Model.Season.GridBonus);

            // Check if driver made a mistake, if so then it's going to cost him
            for (int j = 0; j < mistakeRolls; j++)
            {
                if (DidReliabilityFail(driver.DriverReliability))
                {
                    lapValue -= NumberHelper.RandomInt(mistakeMin, mistakeMax);
                    lapScore.RacerEvents |= RacerEvent.Mistake;
                    driver.RecentMistake = true;
                    break;
                }
            }

            // Strategy
            lapValue += HandleStrategy(driver, lapScore);

            // Adds the overall power of the driver
            lapValue += driver.Power;

            int actualLap = calculated == 1 ? lapValue - driver.QualifyingBonus(racerCount, Model.Season.GridBonus) : lapValue;
            if (actualLap > fastestLap)
            {
                fastestLap = actualLap;

                foreach (var raceDriver in raceDrivers)
                    raceDriver.HasFastestLap = false;

                driver.HasFastestLap = true;
            }

            // Finally add the score to the lap results
            lapScore.Score = lapValue;
        }
        // If this get's triggered then the current driver caused a safety car, racing goes on as normal until the next advance
        else if (safetyCarOccurrence)
        {
            safetyCarOut = safetyCarOccurrence;
        }

        lapScore.TyreColour = driver.CurrentTyre.Colour;

        return lapScore;
    }

    private bool CheckReliability(RaceDriver driver, LapScore lapScore)
    {
        var safetyCar = false;

        if (activeReliabilityCheck == Entrant.Driver && DidReliabilityFail(driver.DriverReliability))
        {
            lapScore.RacerEvents |= RacerEvent.DriverDnf;
            driver.Incident = possibleIncidents.Where(e => e.Category == CategoryIncident.Driver).ToList().TakeRandomIncident();
        }
        else if (activeReliabilityCheck == Entrant.Team && DidReliabilityFail(driver.CarReliability))
        {
            lapScore.RacerEvents |= RacerEvent.CarDnf;
            driver.Incident = possibleIncidents.Where(e => e.Category == CategoryIncident.Car).ToList().TakeRandomIncident();
        }
        else if (activeReliabilityCheck == Entrant.Engine && DidReliabilityFail(driver.EngineReliability))
        {
            lapScore.RacerEvents |= RacerEvent.EngineDnf;
            driver.Incident = possibleIncidents.Where(e => e.Category == CategoryIncident.Engine).ToList().TakeRandomIncident();
        }
        // Additional reliability check happens on the opening lap, as crashes are more frequent then
        else if (isFirstLap && DidReliabilityFail(driver.DriverReliability))
        {
            lapScore.RacerEvents |= RacerEvent.DriverDnf;
            driver.Incident = possibleIncidents.Where(e => e.Category == CategoryIncident.Driver).ToList().TakeRandomIncident();
        }
        else
        {
            return safetyCar;
        }

        // Relability failure = instant overtake by attacking drivers
        driver.InstantOvertaken = true;

        // If enabled, then we're also going to check if anyone experienced a fatal crash
        if (Model.LeagueOptions.HasFlag(LeagueOptions.EnableFatality) && (NumberHelper.RandomInt(fatalityOdds) == 0))
        {
            safetyCar = true;

            driver.Status = RaceStatus.Fatal;
            driver.Incident = possibleIncidents.Where(e => e.Category == CategoryIncident.Lethal).ToList().TakeRandomIncident();
            lapScore.RacerEvents = RacerEvent.Death;
            lapIndicatorBackground = Color.Error;
            lapIndicatorColour = Color.Default;

            return safetyCar;
        }

        // Randomly determines the odds a safety car occured due to the DNF'ing driver
        safetyCar = NumberHelper.RandomInt(safetyCarOdds) == 0;
        driver.Status = RaceStatus.Dnf;

        return safetyCar;
    }

    // Returns a number which will be added to the users lap score
    private int HandleStrategy(RaceDriver driver, LapScore lapScore)
    {
        int assignedLifeScore = driver.TyreLife;

        var tyreMinWear = driver.CurrentTyre.WearMin + driver.WearMinMod;
        var tyreMaxWear = driver.CurrentTyre.WearMax + driver.WearMaxMod;

        if (tyreMinWear > tyreMaxWear)
        {
            tyreMaxWear = tyreMinWear + 1;
            //_snackbar.Add("A situation occurred where the maximum wear was lower than the minimum wear, please reconsider some set tyre wear values!");
        }

        // Maximum wear is more than the tyre can handle, it's time for a pitstop!
        // Or minimum wear? Or 0?
        // We might want to make this an option to something
        if (driver.CurrentTyre.PitWhenBelow > driver.TyreLife)
        {
            var distanceLeft = Model.Race.RaceLength - (calculated * calculationDistance);
            var validTyres = availableTyres.FindValidTyres(distanceLeft, Model.Climate.IsWet);

            if (validTyres.Count() > 0)
            {
                var pitCost = PitstopDriver(driver, lapScore, validTyres);

                assignedLifeScore = driver.TyreLife;
                assignedLifeScore -= pitCost;
            }
        }

        // Adds wear to the tyre
        driver.TyreLife -= NumberHelper.RandomInt(tyreMinWear, tyreMaxWear);

        if (driver.TyreLife < minimumTyreLife)
            driver.TyreLife = minimumTyreLife;

        return assignedLifeScore;
    }

    // returns bool which indicates whether a safety car has been caused by a DNF-result
    private bool HandleSafetyMoment(List<LapScore> lapScoresToPersist)
    {
        var distanceLeft = Model.Race.RaceLength - (calculated * calculationDistance);
        var validTyres = availableTyres.FindValidTyres(distanceLeft, Model.Climate.IsWet);

        int scoreAboveDriver = 0;
        foreach (var driver in raceDrivers.Where(e => e.Status == RaceStatus.Racing).OrderBy(e => e.AbsolutePosition))
        {
            driver.SingleOccurrence = null;
            driver.InstantOvertaken = false;

            var lapScore = new LapScore { ResultId = driver.ResultId, Order = calculated };

            // If the tyre life is less than half of the tyres overall pace, then check for a pitstop
            if (validTyres.Count() > 0 && driver.TyreLife < (driver.CurrentTyre.Pace / 2))
            {
                var pitCost = PitstopDriver(driver, lapScore, validTyres);
                lapScore.Score -= pitCost;
            }
            else
            {
                // closes the gap to the driver above
                var scoreGap = scoreAboveDriver - driver.LapSum;

                if (scoreGap > safetyCarGap)
                {
                    var closingGap = scoreGap / safetyGapCloserDivider;
                    lapScore.Score += closingGap;
                }
            }

            var tyreMinWear = driver.CurrentTyre.WearMin + driver.WearMinMod;
            var tyreMaxWear = driver.CurrentTyre.WearMax + driver.WearMaxMod;

            if (tyreMinWear > 0)
                tyreMinWear = tyreMinWear / safetyWearDivider;
            if (tyreMaxWear > 0)
                tyreMaxWear = tyreMaxWear / safetyWearDivider;

            driver.TyreLife -= NumberHelper.RandomInt(tyreMinWear, tyreMaxWear);

            if (driver.TyreLife < minimumTyreLife)
                driver.TyreLife = minimumTyreLife;

            lapScore.TyreColour = driver.CurrentTyre.Colour;

            driver.LapScores.Add(lapScore);
            lapScoresToPersist.Add(lapScore);
            scoreAboveDriver = driver.LapSum;
        }

        raceDrivers.SetPositions(gapMarge);

        return NumberHelper.RandomInt(safetyReturnOdds) == 0;
    }

    // Returns the score cost which the pitstop took
    private int PitstopDriver(RaceDriver driver, LapScore lapScore, IEnumerable<Tyre> validTyres)
    {
        Tyre nextTyre;
        if (validTyres.Count() > 1)
            nextTyre = validTyres.Where(e => e.Id != driver.CurrentTyre.Id).ToList().TakeRandomItem();
        else
            nextTyre = validTyres.First();

        driver.CurrentTyre = nextTyre;
        driver.TyreLife = nextTyre.Pace + driver.LifeBonus;
        driver.InstantOvertaken = true;

        lapScore.RacerEvents |= RacerEvent.Pitstop;

        // Pitstop duration is reduced since this is a safety car moment
        var pitCost = NumberHelper.RandomInt(pitMin, pitMax);

        if (safetyCarOut && pitCost > safetyPitstopSubtract)
            pitCost -= safetyPitstopSubtract;

        return pitCost;
    }

    private void PostProcessAdvance()
    {
        highestScore = raceDrivers.Max(e => e.LapSum);

        // Cycle through the reliability, to check something else (otherwise we have way too many DNFs)
        reliablityCycler++;
        reliablityCycler %= cycleableReliablities.Length;
        activeReliabilityCheck = cycleableReliablities[reliablityCycler];
    }

    private void DeterminePositions()
    {
        var allPositionsAligned = false;
        // Need to re-retrieve this for every driver since their positions may change due to over overtakes (maybe) / altough i dont think this matters
        var actualPositions = GetCurrentActualPositions();

        // This likely can be optimized further
        while (!allPositionsAligned)
        {
            foreach (var driver in raceDrivers.Where(e => e.Status == RaceStatus.Racing).OrderBy(e => e.AbsolutePosition))
            {
                var lastScore = driver.LapScores.Last();

                int positionChange = driver.AbsolutePosition - actualPositions[driver.SeasonDriverId];

                // Assign the new positions based on whether their overtakes have been succesful
                if (positionChange > 0)
                    HandlePositionGain(driver, lastScore, positionChange);

                driver.LastScore = lastScore.Score;
            }

            allPositionsAligned = true;
            actualPositions = GetCurrentActualPositions();

            foreach (var driver in raceDrivers.Where(e => e.Status == RaceStatus.Racing).OrderBy(e => e.AbsolutePosition))
            {
                if (driver.AbsolutePosition != actualPositions[driver.SeasonDriverId])
                    allPositionsAligned = false;
            }
        }

        raceDrivers.SetPositions(gapMarge);
    }

    private void HandlePositionGain(RaceDriver driver, LapScore lastScore, int gainedPositions)
    {
        while (gainedPositions > 0)
        {
            var abovePosition = driver.AbsolutePosition - 1;
            if (abovePosition == 0)
                break;

            var defendingDriver = raceDrivers.First(e => e.AbsolutePosition == abovePosition);

            // Driver above is teammate AND support driver AND attacker is main driver, swap time!
            //if (defendingDriver.SeasonTeamId == driver.SeasonTeamId
            //    && driver.Role == TeamRole.Main
            //    && defendingDriver.Role == TeamRole.Support)
            //{
            //    lastScore.RacerEvents |= RacerEvent.Swap;
            //    defendingDriver.LapScores.Last().RacerEvents |= RacerEvent.Swap;
            //}
            //else

            if (!defendingDriver.InstantOvertaken && driver.ClassId == defendingDriver.ClassId)
            {
                // Subtract attack value from defense, what's left is how much the attacker is hindered
                var attackingResult = driver.Attack + NumberHelper.RandomInt((battleRng * -1), battleRng);
                var defendingResult = defendingDriver.Defense + NumberHelper.RandomInt((battleRng * -1), battleRng);

                // Defender frequently made a mistake, so we're punishing him for it :)
                if (defendingDriver.RecentMistake)
                    defendingResult = defendingResult / 2;

                var battleCost = defendingResult - attackingResult;

                if (battleCost > 0)
                    lastScore.Score -= battleCost;

                // Overtake failed
                if (defendingDriver.LapSum > driver.LapSum)
                {
                    defendingDriver.DefensiveCount++;
                    break;
                }

                // It only counts as an overtake if it wasn't in an instant
                driver.OvertakeCount++;
            }

            // Overtake succeeded, driver gains a position!
            (driver.AbsolutePosition, defendingDriver.AbsolutePosition) = (defendingDriver.AbsolutePosition, driver.AbsolutePosition);

            gainedPositions--;
        }
    }

    private void PreProcessFinish()
    {
        bool anyoneDisqualified = false;

        foreach (var driver in raceDrivers.Where(e => e.Status == RaceStatus.Racing))
        {
            if (NumberHelper.RandomInt(disqualifyChance) == 0)
            {
                driver.Incident = possibleIncidents.Where(e => e.Category == CategoryIncident.Disqualified).ToList().TakeRandomIncident();
                driver.Status = RaceStatus.Dsq;

                anyoneDisqualified = true;
            }
        }

        if (anyoneDisqualified)
            raceDrivers.SetPositions(gapMarge);
    }

    private async Task Finish()
    {
        PreProcessFinish();

        // Update object references
        Model.SetRacerData(raceDrivers);

        // Should be removed when it is done per advance
        var allLapScores = raceDrivers.SelectMany(e => e.LapScores).Where(e => e.Id == 0).ToList();
        LapScores.AddRange(allLapScores);

        int initialHighestOccurr = 0;
        if (Occurrences.Any())
            initialHighestOccurr = Occurrences.Select(e => e.Order).Max();

        foreach (var occurr in occurrences.Where(e => e.Key > initialHighestOccurr))
        {
            Occurrences.Add(new RaceOccurrence
            {
                Order = occurr.Key,
                Occurrences = occurr.Value,
                RaceId = Model.Race.Id,
            });
        }

        await OnFinish.InvokeAsync();
    }

    private void ChangeCalculationPerAdvance(MudChip? calcChip)
    {
        if (calcChip != null)
            calculationsPerAdvance = (int)calcChip.Value;
    }

    private void AddCalculationSituation() => occurrences[calculated] = safetyCarOut ? SituationOccurrence.Caution : SituationOccurrence.Raced;

    private bool DidReliabilityFail(int reliability) => NumberHelper.RandomInt(1000) > reliability;

    private int GetCurrentLapCount => NumberHelper.CalculateLapCount(calculated * calculationDistance, Model.Race.Track.Length);

    private Dictionary<long, int> GetCurrentActualPositions()
    {
        var actualPositions = new Dictionary<long, int>();
        int absoluteIndex = 0;

        foreach (var driver in raceDrivers.OrderBy(e => (int)e.Status).ThenByDescending(e => e.LapSum))
            actualPositions.Add(driver.SeasonDriverId, ++absoluteIndex);

        return actualPositions;
    }

    // Honestly, below is more of an example to the first one
    private Dictionary<long, int> AggregateActualPositions()
    {
        //source: racedrivers
        //seed: dict
        //func: (dict, driver) =>

        var absoluteIndex = 0;
        return raceDrivers
            .OrderBy(e => (int)e.Status)
                .ThenByDescending(e => e.LapSum)
            .Aggregate
            (
                new Dictionary<long, int>(),
                (dict, driver) =>
                {
                    dict.Add(driver.SeasonDriverId, ++absoluteIndex);
                    return dict;
                }
            );
    }

    private async Task ShowGapperChart() => _ =
        await _dialog.ShowAsync<GapChartDialog>("Gapper chart", new DialogParameters { ["Drivers"] = raceDrivers }, Globals.StatisticDialogDefaultOptionsXl);
    
    private async Task ShowPositionChart() => _ =
        await _dialog.ShowAsync<PositionChangeChart>("Position chart", new DialogParameters { ["Drivers"] = raceDrivers }, Globals.StatisticDialogDefaultOptionsXl);
}
