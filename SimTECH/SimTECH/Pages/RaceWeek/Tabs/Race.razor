@using SimTECH.Pages.RaceWeek.Components

@inject IncidentService _incidentService
@inject TyreService _tyreService
@inject IDialogService _dialogService
@inject ISnackbar _snackbar

@if (!loading)
{
    <MudPaper Elevation="25" MinHeight="60px" Width="100%">
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="pa-2">
            <div style="width:30%">
                <MudMenu Label="Charts"
                         Icon="@Icons.Material.Outlined.InsertChart"
                         Color="Color.Secondary"
                         Variant="Variant.Text">
                    <MudMenuItem OnClick="ShowGapperChart">Gap-to-leader</MudMenuItem>
                    <MudMenuItem OnClick="ShowPositionChart">Position-progression</MudMenuItem>
                </MudMenu>
            </div>

            <MudStack Spacing="0" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.subtitle2">Laps to advance</MudText>
                <MudChipSet SelectedChipChanged="ChangeCalculationPerAdvance" Mandatory="true">
                    <MudChip Value="1" Color="Color.Primary">
                        @(NumberHelper.LapCount(1 * calculationDistance, Model.Race.Track.Length))
                    </MudChip>
                    <MudChip Value="5" Default="true" Color="Color.Primary">
                        @(NumberHelper.LapCount(5 * calculationDistance, Model.Race.Track.Length))
                    </MudChip>
                    <MudChip Value="10" Color="Color.Primary">
                        @(NumberHelper.LapCount(10 * calculationDistance, Model.Race.Track.Length))
                    </MudChip>
                    <MudChip Value="@calculationCount" Color="Color.Primary">@totalLaps</MudChip>
                </MudChipSet>
            </MudStack>

            <div class="d-flex flex-row-reverse" style="width:30%">
                <MudButtonGroup Variant="Variant.Outlined" Color="Color.Tertiary">
                    <ScreenshotButton TargetId="race-display"
                                      IconSize="Size.Small"
                                      PostFixIcon="true"
                                      Class="btn-md" />
                    @if (Model.Race.State != State.Closed)
                    {
                        <MudButton EndIcon="@IconCollection.ChevronsRight"
                                   IconSize="Size.Small"
                                   OnClick="Advance"
                                   Class="btn-md advance-btn">Advance</MudButton>
                    }
                </MudButtonGroup>
            </div>
        </MudStack>
    </MudPaper>
    <div id="race-display">
        <MudTable Items="@RaceDrivers.OrderBy(e => (int)e.Status).ThenBy(e => e.AbsolutePosition)"
                  Dense="true"
                  Class="extra-dense overflow-x-hide">
            <ToolBarContent>
                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="pa-2 mud-width-full">
                    <div class="d-flex flex-row gap-3 align-center pa-0" style="width:30%">
                        <CountryFlag Code="@Model.Race.Track.Country" />
                        <MudText Typo="Typo.h5" Class="overflow-hider">@Model.Race.Name - ROUND @Model.Race.Round</MudText>
                    </div>

                    <MudChip Color="@CurrentSituation.GetIndicatorBackgroundColour()"
                             Label="true"
                             DisableRipple="true">
                        <MudText Typo="Typo.h5"
                                 Color="@CurrentSituation.GetIndicatorTextColour()">
                            LAP @(racedLaps) / @(totalLaps)
                        </MudText>
                    </MudChip>

                    <div class="d-flex flex-row-reverse align-center gap-3 pa-0" style="width: 30%">
                        <MudText Typo="Typo.h5">@Model.Climate.Terminology</MudText>
                        <CustomIcon Icon="@Model.Climate.Icon" Colour="@Model.Climate.Colour" />
                    </div>
                </MudStack>
            </ToolBarContent>
            <ColGroup>
                <col style="width: 20px" />
                <col style="width: 40px" />
                <col class="pa-0" style="width: 5px" />
                <col style="width: 275px" />
                <col style="width: 30px" />
                <col style="width: 200px" />
                @if (Model.Season.HasRaceClasses)
                {
                    <col style="width: 30px" />
                }
                <col style="width: 30px" />
                <col style="width: 175px" />
                <col style="width: 75px" />
                <col style="width: 30px" />
                <col style="width: 50px" />
                <col />
            </ColGroup>
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh>Grid</MudTh>
                <MudTh Class="pa-0"></MudTh>
                <MudTh>Name</MudTh>
                <MudTh>NO</MudTh>
                <MudTh>Team</MudTh>
                @if (Model.Season.HasRaceClasses)
                {
                    <MudTh>CLA</MudTh>
                }
                <MudTh>PWR</MudTh>
                <MudTh Class="text-center">ATT / DEF</MudTh>
                <MudTh>Tyre</MudTh>
                <MudTh>Pace</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Progression</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center" Class="pa-0">
                        <DriverPosition Number="@context.Position" />
                        @if (Model.Season.HasRaceClasses)
                        {
                            <sup>@context.AbsolutePosition</sup>
                        }
                    </MudStack>
                </MudTd>
                <MudTd>
                    <GridChange Change="@context.GridChange" />
                </MudTd>
                <MudTd Class="accent-cell">
                    <SmolAccent Colour="@context.Colour" />
                </MudTd>
                <MudTd>
                    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center" Class="pa-0" Style="max-width: 275px">
                        <MudText>@context.FirstName</MudText>
                        <MudText Typo="Typo.button" Class="fontsize-button-text overflow-hider">@context.LastName</MudText>
                        @if (context.HasFastestLap)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Timer" Size="Size.Small" Style="color:mediumpurple" />
                        }
                        <MudSpacer />
                        <CountryFlag Code="@context.Nationality" Size="ElementSize.Small" />
                    </MudStack>
                </MudTd>
                <MudTd>
                    <NumberDisplay Colour="@context.Colour" Accent="@context.Accent">@context.Number</NumberDisplay>
                </MudTd>
                <MudTd>
                    <div class="overflow-hider" style="max-width: 200px">
                        <MudText Typo="Typo.button">@context.TeamName</MudText>
                    </div>
                </MudTd>
                @if (Model.Season.HasRaceClasses)
                {
                    <MudTd>
                        <SupplierDisplay Colour="@context.Class?.Colour">
                            @context.Class?.Tag
                        </SupplierDisplay>
                    </MudTd>
                }
                <MudTd>
                    <MudText Typo="Typo.caption">@context.Power</MudText>
                </MudTd>
                <MudTd>
                    <div class="battle-stat-cell-wrapper">
                        <MudIcon Icon="@IconCollection.Sword" Size="Size.Small" />
                        <MudText Typo="Typo.caption">@context.Attack</MudText>
                        <sup>@context.OvertakeCount</sup>
                        <span class="battle-divider"></span>
                        <MudText Typo="Typo.caption">@context.Defense</MudText>
                        <sup>@context.DefensiveCount</sup>
                        <MudIcon Icon="@IconCollection.ShieldChevron" Size="Size.Small" />
                    </div>
                </MudTd>
                <MudTd Class="pa-1">
                    <div class="tyre-cell-wrapper">
                        <TyreElement Colour="@context.CurrentTyre.Colour">@context.TyreLife</TyreElement>
                    </div>
                </MudTd>
                <MudTd>
                    @if (context.Status == RaceStatus.Racing && context.SingleOccurrence == null)
                    {
                        <GradientColour Min="@lastLowestScore" Max="@lastHighestScore" Value="@context.LastScore">
                            <MudText Typo="Typo.caption" Color="Color.Inherit">@context.LastScore</MudText>
                        </GradientColour>
                    }
                    else
                    {
                        <MudText Typo="Typo.button" Color="Color.Warning">@context.SingleOccurrence</MudText>
                    }
                </MudTd>
                <MudTd>
                    @if (context.Incident == null)
                    {
                        <MudText Typo="Typo.caption">@context.GapAbove</MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.button" Color="Color.Error">@context.Incident.Name</MudText>
                    }
                </MudTd>
                <MudTd>
                    <SimRacerProgressionLinear RaceDriver="@context" CalculationCount="@calculationCount" />
                </MudTd>
            </RowTemplate>
        </MudTable>
        <div class="race-footer-container">
            <MudPaper>
                <SimProgressLinear Bars="@(AdvanceOccurrences.Select(e => ((NumberHelper.Percentage(1, calculationCount)), e.Value.SituationColour())).ToList())"
                                   AddIndicator="true"
                                   LineSize="ElementSize.Normal"
                                   CalculationDistance="@calculationDistance"
                                   TrackLength="@Model.Race.Track.Length" />

                <MudStack Row="true" AlignItems="AlignItems.Center" Class="px-4 pt-5 pb-2">
                    <MudText Typo="Typo.button">Legend</MudText>
                    @foreach (var signal in signalEvents)
                    {
                        <MudChip Text="@signal.GetShortText()"
                                 Icon="@signal.GetEventIcon()"
                                 IconColor="@signal.GetSignalColour()"
                                 Size="Size.Small"
                                 Variant="Variant.Text"
                                 DisableRipple="true"
                                 Label="true" />
                    }

                    <MudSpacer />

                    <MudText Typo="Typo.button">
                        Available
                        <br />
                        Tyres
                    </MudText>

                    @if (ValidTyres?.Any() == true)
                    {
                        <div class="d-flex flex-row gap-1 align-center justify-center">
                            @foreach (var tyre in ValidTyres)
                            {
                                <TyreElement Colour="@tyre.Colour">@tyre.Name.ElementAt(0)</TyreElement>
                            }
                        </div>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Block" Size="Size.Medium" Color="Color.Error" />
                    }

                    <MudSpacer />

                    <MudChip Size="Size.Small" Variant="Variant.Text" DisableRipple="true" Label="true">
                        Next REL: @ActiveReliabilityCheck.ToString()
                    </MudChip>
                </MudStack>
            </MudPaper>
        </div>
    </div>
}
