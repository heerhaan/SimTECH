@if (!loading)
{
    <MudGrid Spacing="1" id="postrace-container">
        <MudItem xs=12>
            <MudPaper Elevation="15" Height="75px" Class="pa-4">
                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <div style="width: 30%"></div>

                    <MudText Typo="Typo.h3">Post race</MudText>

                    <div class="d-flex flex-row-reverse" style="width:30%">
                        <MudButtonGroup Color="Color.Tertiary" Variant="Variant.Outlined">
                            <MudTooltip Text="Standings" Placement="Placement.Top" Color="Color.Tertiary">
                                <MudIconButton Icon="@Icons.Material.Filled.AutoGraph"
                                               OnClick="GoToOverview" Class="btn-sm" />
                            </MudTooltip>
                            <ScreenshotIconButton TargetId="postrace-container" Class="btn-sm" />
                        </MudButtonGroup>
                    </div>
                </MudStack>
                <div class="d-flex flex-row justify-space-between align-content-center">
                    <div>.</div>
                    <div>.</div>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="8">
            <MudPaper Class="mud-height-full pa-4">
                <MudText Typo="Typo.h5">Final standings</MudText>
                <MudDivider />
                <MudTable T="RaweCeekDriver"
                          Items="@Model.RaweCeekDrivers.OrderBy(e => e.AbsolutePosition)"
                          Dense="true"
                          Class="extra-dense"
                          GroupBy="@raceClassDefinition">
                    <HeaderContent>
                        <MudTh Class="number-col-lg"></MudTh>
                        <MudTh Class="number-col">Grid</MudTh>
                        <MudTh Class="number-col">TGT</MudTh>
                        <MudTh Class="accent-cell"></MudTh>
                        <MudTh Style="width: 220px">Name</MudTh>
                        <MudTh Class="number-col">NO</MudTh>
                        <MudTh Style="width: 220px">Team</MudTh>
                        @if (Model.Season.HasRaceClasses)
                        {
                            <MudTh Class="number-col">CLA</MudTh>
                        }
                        <MudTh Class="number-col">PTS</MudTh>
                    </HeaderContent>
                    <GroupHeaderTemplate>
                        <MudTh Class="postrace-table-group-header" colspan="9">
                            @if (context.Key is long raceClassId)
                            {
                                <div>@($"{context.GroupName}: {GetRaceClassName(raceClassId)}")</div>
                            }
                            else
                            {
                                <div>-</div>
                            }
                        </MudTh>
                    </GroupHeaderTemplate>
                    <RowTemplate>
                        <MudTd Class="number-col-lg">
                            @if (context.Status == RaceStatus.Racing)
                            {
                                <DriverPosition Number="@context.Position" />
                            }
                            else
                            {
                                <div class="result-cell" style="@context.Status.StatusStyles()">
                                    <ResultLabel Text="@context.Status.ReadableStatus()" />
                                </div>
                            }
                        </MudTd>
                        <MudTd Class="number-col">
                            <MudText Typo="Typo.caption">@context.Grid</MudText>
                        </MudTd>
                        <MudTd Class="number-col">
                            <MudText Typo="Typo.caption">@context.ExpectedPosition</MudText>
                        </MudTd>
                        <MudTd Class="accent-cell">
                            <SmolAccent Colour="@context.Colour" />
                        </MudTd>
                        <MudTd Class="overflow-hider">
                            <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                                <MudText>@context.FullName</MudText>
                                @if (context.Grid == 1)
                                {
                                    <sup style="font-size: 0.7rem">P</sup>
                                }
                                @if (context.FastestLap)
                                {
                                    <sup style="font-size: 0.7rem">F</sup>
                                }
                            </MudStack>
                        </MudTd>
                        <MudTd Class="number-col">
                            <NumberDisplay Colour="@context.Colour" Accent="@context.Accent">@context.Number</NumberDisplay>
                        </MudTd>
                        <MudTd Class="overflow-hider">
                            <MudText Typo="Typo.button">@context.TeamName</MudText>
                        </MudTd>
                        @if (Model.Season.HasRaceClasses)
                        {
                            <MudTd Class="number-col">
                                <SupplierDisplay Colour="@context.Class?.Colour">
                                    <MudText>@context.Class?.Tag</MudText>
                                </SupplierDisplay>
                            </MudTd>
                        }
                        <MudTd Class="number-col">
                            <MudText Typo="Typo.caption">@ReadScoredResult(context)</MudText>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
        <MudItem xs="4">
            <MudStack Class="mud-height-full">
                <MudPaper Class="pa-4 mud-height-full">
                    <MudText Typo="Typo.h5">Race incidents</MudText>
                    <MudDivider />
                    <MudSimpleTable Dense="true" Class="extra-dense">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th class="number-col">NO</th>
                                <th>Incident</th>
                                <th class="number-col-lg">Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var result in Model.RaweCeekDrivers.Where(e => e.Incident != null))
                            {
                                <tr>
                                    <td>@result.FullName</td>
                                    <td class="number-col">
                                        <NumberDisplay Colour="@result.Colour" Accent="@result.Accent">
                                            @result.Number
                                        </NumberDisplay>
                                    </td>
                                    <td>@result.Incident?.Name</td>
                                    <td class="number-col-lg">
                                        <div class="result-cell" style="@result.Status.StatusStyles()">
                                            <MudText Typo="Typo.caption" Color="Color.Inherit">@result.Status.ReadableStatus()</MudText>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>
                </MudPaper>
                <MudPaper Class="pa-4 mud-height-full">
                    <MudText Typo="Typo.h5">Upcoming penalties</MudText>
                    <MudDivider />
                    <MudTable T="DriverPenalty" Items="@driverPenalties" Dense="true" Class="extra-dense">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>Reason</MudTh>
                            <MudTh>Grid loss</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>
                                <MudText>@context.Name</MudText>
                            </MudTd>
                            <MudTd>
                                <MudText>@context.Reason</MudText>
                            </MudTd>
                            <MudTd>
                                <MudText Typo="Typo.caption">@context.Punishment</MudText>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudStack>
        </MudItem>
    </MudGrid>
}

@code {
    [CascadingParameter] public RaweCeekModel Model { get; set; }
    [Parameter] public IEnumerable<GivenPenalty> UpcomingPenalties { get; set; } = Enumerable.Empty<GivenPenalty>();
    [Parameter] public EventCallback<string> OnNavigate { get; set; }

    private List<DriverPenalty> driverPenalties = new();
    private Dictionary<int, int> allotments;
    private List<RaceClass>? RaceClasses { get; set; }
    private bool loading;
    private int lowestScoring;

    private TableGroupDefinition<RaweCeekDriver>? raceClassDefinition;

    protected override void OnInitialized()
    {
        allotments = Model.Season.PointAllotments?.ToDictionary(e => e.Position, e => e.Points) ?? new();
        if (allotments.Any())
            lowestScoring = allotments.Keys.Max();

        if (Model.Season.HasRaceClasses)
        {
            RaceClasses = new();

            raceClassDefinition = new()
            {
                GroupName = "Class",
                Selector = (e) => e.ClassId
            };

            foreach (var raceClass in Model.RaweCeekDrivers.Select(e => e.Class).Distinct())
            {
                if (raceClass != null)
                    RaceClasses.Add(raceClass);
            }
        }
    }

    protected override void OnParametersSet()
    {
        loading = true;

        BuildDriverPenalties();

        loading = false;
    }

    private int ReadScoredResult(RaweCeekDriver result)
    {
        var points = 0;

        if (result.Grid == 1)
            points += Model.Season.PointsPole;

        if (result.FastestLap)
            points += Model.Season.PointsFastestLap;

        if (result.Status != RaceStatus.Racing)
            return points;

        if (allotments.TryGetValue(result.Position, out int allotedPoints))
            points += allotedPoints;

        return points;
    }

    private string GetRaceClassName(long classId)
    {
        if (!Model.Season.HasRaceClasses || RaceClasses == null || RaceClasses.Count == 0)
            return string.Empty;

        return RaceClasses.FirstOrDefault(e => e.Id == classId)?.Name ?? string.Empty;
    }

    // NOTE: Not a definitive solution probably as it could be done much better
    private void BuildDriverPenalties()
    {
        foreach (var penalty in UpcomingPenalties)
        {
            var driver = Model.RaweCeekDrivers.Find(e => e.SeasonDriverId == penalty.SeasonDriverId);
            if (driver != null)
            {
                driverPenalties.Add(new DriverPenalty
                    {
                        Name = driver.FullName,
                        Reason = penalty.Incident.Name,
                        Punishment = penalty.Incident.Punishment,
                        //Styles = driverResult.Status.StatusStyles(),
                    });
            }
        }
    }

    private async Task GoToOverview() => await OnNavigate.InvokeAsync($"overview/{Model.Season.Id}/2");
}
