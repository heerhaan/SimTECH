@page "/test"

@using MudExtensions
@using SimTECH.Pages.Test.Components

@inject BreadcrumbProvider _bread
@inject ProtectedLocalStorage _storage

<PageTitle>Test</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16 px-8 cubic-repeat-bg">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Elevation="15" Height="75px" Class="d-flex flex-column justify-center align-center pa-4">
                <div class="test-header-shogun">Testing Zone</div>
                <div class="font-roadrage">For hella blokes</div>
            </MudPaper>
        </MudItem>
        <MudItem xs="9">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudPaper Elevation="2" MinHeight="300px" Class="pa-4">
                        <MudText>
                            ΩΩΩ-OMEGA-ΩΩΩ
                            λλλ-LAMBDA-λλλ
                        </MudText>

                        <MudRangeSlider T="int" @bind-Value="@rangeLow" @bind-UpperValue="@rangeHigh" Size="Size.Medium"
                                        Variant="Variant.Filled" Display="true" ValueLabel="true" Range="true" Min="1"
                                        Max="100" Step="1" Color="Color.Secondary" Class="mt-2">Range label</MudRangeSlider>

                        <MudText Class="my-2">State test</MudText>

                        <TestStateInit Text="@initText" />

                        <TestStateSet Text="@setText" />

                        <MudButton Color="Color.Tertiary" OnClick="UpdateStateText" Class="mt-2">Update state texts</MudButton>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudPaper Elevation="2" MinHeight="300px" Class="pa-4">
                        <MudText Typo="Typo.h1">Head1</MudText>
                        <MudText Typo="Typo.h2">Head2</MudText>
                        <MudText Typo="Typo.h3">Head3</MudText>
                        <MudText Typo="Typo.h4">Head4</MudText>
                        <MudText Typo="Typo.h5">Head5</MudText>
                        <MudText Typo="Typo.h6">Head6</MudText>
                        <MudText Typo="Typo.subtitle1">Subtitle 1</MudText>
                        <MudText Typo="Typo.subtitle2">Subtitle 2</MudText>
                        <MudText Typo="Typo.body1">Body 1</MudText>
                        <MudText Typo="Typo.body2">Body 2</MudText>
                        <MudText Typo="Typo.button">Button</MudText>
                        <MudText Typo="Typo.caption">Caption</MudText>
                        <MudText Typo="Typo.overline">Overline</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudPaper Elevation="2" MinHeight="200px" Class="pa-4">
                        <MudStack>
                            <MudText Typo="Typo.h5">Examples</MudText>
                            <div>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="SetExample">
                                    Set local stored info
                                </MudButton>
                                <MudText>@exampleStore</MudText>
                            </div>

                            <MudDivider />

                            <MudText Typo="Typo.overline">Custom emblems</MudText>
                            <Emblem Icon="@IconCollection.Polygon" Colour="#49f2e7" Accent="#bf34fa" />
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudPaper Elevation="2" MinHeight="200px" Class="pa-4">
                        <MudText Typo="Typo.overline">Muted backgrounds</MudText>
                        <MudDivider />

                        <MudStack Row="true">
                            <MudPaper Class="pa-3 muted-background-primary"></MudPaper>
                            <MudPaper Class="pa-3 muted-background-secondary"></MudPaper>
                            <MudPaper Class="pa-3 muted-background-tertiary"></MudPaper>
                        </MudStack>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="3">
            <MudPaper>
                <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="2">
                    <MudPaper Class="px-2 py-4">
                        <MudButton Color="Color.Primary" OnClick="TriggerMainLoader">Show page loader</MudButton>

                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
                        <MudText>Main loader is found 'ere</MudText>

                        <MudOverlay Visible="@IsLoaderMainActive" DarkBackground="true">
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        </MudOverlay>
                    </MudPaper>
                    <MudPaper Class="px-2 py-4">
                        <MudButton Color="Color.Secondary" OnClick="TriggerSecondaryLoader">Show block loader</MudButton>

                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
                        <MudText>Secondary loader is found here</MudText>

                        <MudLoading Loading="@IsLoaderSecondaryActive"
                                    LoaderType="LoaderType.Circular"
                                    Text="Section be loadin, ya"
                                    Class="loader"
                                    LoaderClass="loader">
                            <MudText>This is NOT shown when the loader is active!</MudText>
                        </MudLoading>
                    </MudPaper>
                    <MudPaper Class="px-2 py-4">
                        <MudButton Color="Color.Tertiary" OnClick="TriggerTeritaryLoader">Show body loader</MudButton>
                    </MudPaper>
                </MudStack>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [CascadingParameter] protected EventCallback<bool> ToggleLoader { get; set; }

    private string ActiveCustomIcon { get; set; } = IconCollection.BrandToyota;
    private string[] customIcons = IconCollection.ArrayOfIcons;
    private int iconCycler = 0;
    private string? exampleStore;
    private string newExampleString = "Stored and retrieved from the local storage";

    private int rangeLow, rangeHigh;

    private string initText = "unchanged init";
    private string setText = "unchanged set";

    private bool IsLoaderMainActive { get; set; }
    private bool IsLoaderSecondaryActive { get; set; }

    protected override void OnInitialized()
    {
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: "/"),
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var storedExample = await _storage.GetAsync<string>("example");
            if (storedExample.Success)
                exampleStore = storedExample.Value;
        }
    }

    private async Task TriggerMainLoader()
    {
        IsLoaderMainActive = true;
        await Task.Delay(3000);
        IsLoaderMainActive = false;
    }

    private async Task TriggerSecondaryLoader()
    {
        IsLoaderSecondaryActive = true;
        await Task.Delay(3000);
        IsLoaderSecondaryActive = false;
    }

    private async Task TriggerTeritaryLoader()
    {
        await ToggleLoader.InvokeAsync(true);
        await Task.Delay(3000);
        await ToggleLoader.InvokeAsync(false);
    }

    private void UpdateStateText()
    {
        initText = "changed init";
        setText = "changed set";
    }

    private void CycleCustomIcon()
    {
        iconCycler++;
        iconCycler %= customIcons.Length;

        ActiveCustomIcon = customIcons[iconCycler];
    }

    private async Task SetExample()
    {
        await _storage.SetAsync("example", newExampleString);
    }
}
