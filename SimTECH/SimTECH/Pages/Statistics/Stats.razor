@page "/stats"
@inject DriverService _driverService
@inject LeagueService _leagueService
@inject ResultService _resultService
@inject SeasonEntrantService _entrantservice
@inject BreadcrumbProvider _bread
@inject IDialogService _dialog

<PageTitle>Statistics</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    @if (!loading)
    {
        <MudGrid>
            <MudItem xs=12>
                <MudPaper Elevation="15" MinHeight="60px" Class="pa-2">
                    <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center" Class="pa-0">
                        <MudText Typo="Typo.h3">Statistics</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>
            <MudItem xs="4">
                <MudCard Class="mud-height-full">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h5">League filter</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.body2">
                            Filter the given data for the statistics shown here to a specific league,
                            otherwise use data from all leagues.
                        </MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudSelect T="long" @bind-Value="@leagueFilter" Variant="Variant.Outlined" Label="League" Placeholder="All leagues">
                            @foreach (var league in leagues)
                            {
                                <MudSelectItem Value="@league.Id">
                                    <MudText>@league.Name</MudText>
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudCardActions>
                </MudCard>
            </MudItem>
            @foreach (var topic in topics)
            {
                <MudItem xs="4">
                    <MudCard Class="mud-height-full">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h5">@topic.Title</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body2">@topic.Description</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton FullWidth="true"
                                       Variant="Variant.Outlined"
                                       Color="Color.Secondary"
                                       OnClick="@(async () => await ShowStatistic(topic))">
                                Show
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

@code {
    List<StatTopic> topics = new();
    List<League> leagues;

    bool loading = true;
    long leagueFilter;

    protected override async Task OnInitializedAsync()
    {
        leagues = await _leagueService.GetLeagues();

        _bread.Reset();
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Stats", href: "stats", disabled: true),
        });

        LoadTopics();

        loading = false;
    }

    private void LoadTopics()
    {
        topics.Add(
            new StatTopic(
                "Compare drivers",
                "Compare statistics between multiple drivers",
                typeof(DriverCompareStat),
                GetDriverParameters));
        topics.Add(
            new StatTopic(
                "Records drivers",
                "Leaderboards of drivers with the most of something",
                typeof(DriverRecord),
                GetDriverParameters));
    }

    private async Task<DialogParameters> GetDriverParameters()
    {
        // Im not necessarily a big fan of how this is done but it's honestly not an issue (for now) either
        var drivers = await _driverService.GetDrivers(StateFilter.All);
        var seasonDrivers = await _entrantservice.GetAllSeasonDrivers();

        List<Result> results;
        if (leagueFilter != 0)
            results = await _resultService.GetResultsOfLeague(leagueFilter);
        else
            results = await _resultService.GetAllResults();

        return new DialogParameters
        {
            ["Drivers"] = drivers,
            ["SeasonDrivers"] = seasonDrivers,
            ["Results"] = results
        };
    }

    private async Task ShowStatistic(StatTopic topic)
    {
        var parameters = await topic.ParameterQuery.Invoke();
        _ = await _dialog.ShowAsync(topic.StatisticType, topic.Title, parameters, DefaultOptions.StatisticDialogDefaultOptions);
    }

    internal class StatTopic
    {
        public StatTopic(string title, string description, Type statType, Func<Task<DialogParameters>> query)
        {
            Title = title;
            Description = description;
            StatisticType = statType;
            ParameterQuery = query;
        }

        public string Title { get; set; }
        public string Description { get; set; }
        public Type StatisticType { get; set; }
        public Func<Task<DialogParameters>> ParameterQuery { get; set; }
    }
}
