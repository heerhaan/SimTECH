@page "/stats"
@inject BreadcrumbProvider _bread
@inject IDialogService DialogService

<PageTitle>Statistics</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs=12>
            <MudPaper Elevation="15" MinHeight="60px" Class="pa-2">
                <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center" Class="pa-0">
                    <MudText Typo="Typo.h3">Statistics</MudText>
                </MudStack>
            </MudPaper>
        </MudItem>
        @foreach (var topic in Topics)
        {
            <MudItem xs="4">
                <MudCard Class="mud-height-full">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h5">@topic.Title</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.body2">@topic.Description</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton FullWidth="true" Variant="Variant.Outlined" Color="Color.Secondary" OnClick="@topic.GraphCall">Show</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    private List<StatTopic> Topics = new();

    protected override void OnInitialized()
    {
        _bread.Reset();
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Stats", href: "stats", disabled: true),
        });

        LoadTopics();
    }

    private void LoadTopics()
    {
        AddTopic("Driver details", "Get detailed statistics about the results of a driver", ShowDriverDetail);
        AddTopic("Compare drivers", "Compare statistics between multiple drivers", ShowDriverCompare);
        AddTopic("Records drivers", "Leaderboards of drivers with the most of something", ShowDriverRecords);
    }

    private void AddTopic(string title, string descript, Func<Task> call)
    {
        Topics.Add(new StatTopic
        {
            Title = title,
            Description = descript,
            GraphCall = call
        });
    }

    async Task ShowDriverDetail() => _ = await DialogService.ShowAsync<DriverDetailStat>("Driver detail data");
    async Task ShowDriverCompare() => _ = await DialogService.ShowAsync<DriverCompareStat>("Compare drivers");
    async Task ShowDriverRecords() => _ = await DialogService.ShowAsync<DriverRecord>("Records drivers");

    internal class StatTopic
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public Func<Task> GraphCall { get; set; }
    }
}
