<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5" Class="px-4 py-2">Records among drivers</MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer>
            <MudPaper>
                <MudStack>
                    <MudStack Row="true">
                        <MudSelect T="RecordStat"
                                   Label="Record"
                                   Placeholder="Select a record then, ya daft cunt"
                                   ValueChanged="DetermineRecords">
                            @foreach (var record in recordStats)
                            {
                                <MudSelectItem Value="@record">
                                    @record.ToString()
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudStack>

                    <MudPaper MinHeight="500px" MinWidth="600px">
                        @if (!loading)
                        {
                            <MudText Typo="Typo.h5">@selectedRecord</MudText>
                            <MudDivider />
                            <MudSimpleTable Dense="true" Class="extra-dense">
                                <thead>
                                    <tr>
                                        <th></th>
                                        <th>Name</th>
                                        <th>VAL</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var (driverData, index) in driverRecords.WithIndex())
                                    {
                                        <tr>
                                            <td>
                                                @(1 + index)
                                            </td>
                                            <td style="width: 300px">
                                                <MudStack Row="true" AlignItems="AlignItems.Center">
                                                    <MudText Class="overflow-hider">@driverData.Key.FullName</MudText>
                                                    <MudSpacer />
                                                    <CountryFlag Code="@driverData.Key.Country" Size="ElementSize.Small" />
                                                </MudStack>
                                            </td>
                                            <td>
                                                @driverData.Value
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </MudSimpleTable>
                        }
                    </MudPaper>
                </MudStack>
            </MudPaper>
        </MudContainer>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? StatDialog { get; set; }
    [Parameter] public IEnumerable<Driver> Drivers { get; set; } = Enumerable.Empty<Driver>();
    [Parameter] public IEnumerable<SeasonDriver> SeasonDrivers { get; set; } = Enumerable.Empty<SeasonDriver>();
    [Parameter] public IEnumerable<Result> Results { get; set; } = Enumerable.Empty<Result>();

    private Dictionary<Driver, List<Result>> groupedResults = new();

    private Dictionary<Driver, string> driverRecords = new(amount);

    private RecordStat[] recordStats = EnumHelper.DriverRecordStats;

    private bool loading = true;
    private RecordStat selectedRecord = RecordStat.None;
    private const int amount = 10;

    protected override void OnInitialized()
    {
        foreach (var groupDriver in SeasonDrivers.GroupBy(e => e.DriverId))
        {
            // Skips the drivers which haven't been entered to a season yet
            if (!groupDriver.Any())
                continue;

            var driver = Drivers.First(e => e.Id == groupDriver.Key);
            var allSeasonDriverIds = groupDriver.Select(e => e.Id).ToList();
            var driverResults = Results.Where(e => allSeasonDriverIds.Contains(e.SeasonDriverId)).ToList();

            groupedResults.Add(driver, driverResults);
        }
    }

    private void DetermineRecords(RecordStat selected)
    {
        loading = true;

        if (selected == RecordStat.Overtakes)
        {
            driverRecords = groupedResults
                .Select(e => new
                { 
                    driver = e.Key,
                    value = NumberHelper.Average(e.Value.Sum(s => s.Overtaken), e.Value.Count(CountFilter(RecordStat.Start)))
                })
                .OrderByDescending(e => e.value)
                .Take(amount)
                .ToDictionary(e => e.driver, e => e.value.ToString());
        }
        else if (selected == RecordStat.Defended)
        {
            driverRecords = groupedResults
                .Select(e => new
                {
                    driver = e.Key,
                    value = NumberHelper.Average(e.Value.Sum(s => s.Defended), e.Value.Count(CountFilter(RecordStat.Start)))
                })
                .OrderByDescending(e => e.value)
                .Take(amount)
                .ToDictionary(e => e.driver, e => e.value.ToString());
        }
        else
        {
            driverRecords = groupedResults
                .Select(e => new { driver = e.Key, value = e.Value.Count(CountFilter(selected)) })
                .OrderByDescending(e => e.value)
                .Take(amount)
                .ToDictionary(e => e.driver, e => e.value.ToString());
        }

        selectedRecord = selected;

        loading = false;
    }

    private Func<Result, bool> CountFilter(RecordStat selected) => selected switch
    {
        RecordStat.Entry => (result => true),
        RecordStat.Start => (result => result.Status != RaceStatus.Dnq),
        RecordStat.Win => (result => result.Position == 1),
        RecordStat.Pole => (result => result.Grid == 1),
        RecordStat.Retired => (result => result.Status == RaceStatus.Dnf || result.Status == RaceStatus.Dsq || result.Status == RaceStatus.Fatal),
        RecordStat.FastestLap => (result => result.FastestLap),
        _ => throw new InvalidOperationException($"Ayo, no counting filter for statistic {selected}")
    };
}
