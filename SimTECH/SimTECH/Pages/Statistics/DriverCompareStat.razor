<MudDialog>
    <TitleContent>
        <MudText>Driver comparison</MudText>
        <MudText Typo="Typo.body2" Color="Color.Warning">Does net yet filter based on which league</MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Class="pa-2">
            <MudPaper Width="1100px">
                @if (!loading)
                {
                    <MudStack>
                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                            <MudText>Add drivers to comparison</MudText>
                            @if (rendered)
                            {
                                <MudButton Color="Color.Primary" OnClick="UpdateChart">Update</MudButton>
                            }
                        </MudStack>
                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                            <MudSelectExtended ItemCollection="@driverSelection"
                                               T="Driver"
                                               SelectedValuesChanged="SelectionChanged"
                                               MultiSelection="true"
                                               MultiSelectionTextFunc="GetSelectedText"
                                               Label="Driver One"
                                               SearchBox="true"
                                               SearchFunc="SearchDrivers"
                                               Variant="Variant.Outlined"
                                               Class="field-lg">
                                <ItemTemplate>
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-1">
                                        <MudText>@context.Value.FullName</MudText>
                                        <MudSpacer />
                                        <CountryFlag Code="@context.Value.Country" Size="ElementSize.Tiny" />
                                    </MudStack>
                                </ItemTemplate>
                            </MudSelectExtended>
                            
                            <div>
                                @foreach (var compared in ComparableDrivers)
                                {
                                    <MudText Typo="Typo.body1">
                                        <CountryFlag Code="@compared.Key.Country" Size="ElementSize.Small" />
                                        @compared.Key.FullName
                                    </MudText>
                                }
                            </div>
                        </MudStack>

                        <MudDivider />

                        <div class="pa-2" style="min-height: 600px">
                            @if (rendered)
                            {
                                <ApexCharts.ApexChart @ref="chart"
                                                      TItem="DataPoint"
                                                      Title="Compare drivers"
                                                      Options="@options"
                                                      Height="500"
                                                      Width="@("100%")">
                                    @foreach (var driverCompare in ComparableDrivers)
                                    {
                                        <ApexCharts.ApexPointSeries TItem="DataPoint"
                                                                    Items="@driverCompare.Value.DataPoints"
                                                                    Name="@driverCompare.Value.Label"
                                                                    XValue="@(e => e.XData)"
                                                                    SeriesType="ApexCharts.SeriesType.Bar"
                                                                    YValue="@(e => e.YData)" />
                                    }
                                </ApexCharts.ApexChart>
                            }
                        </div>
                    </MudStack>
                }
            </MudPaper>
        </MudContainer>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? StatDialog { get; set; }
    [Parameter] public IEnumerable<Driver> Drivers { get; set; } = Enumerable.Empty<Driver>();
    [Parameter] public IEnumerable<SeasonDriver> SeasonDrivers { get; set; } = Enumerable.Empty<SeasonDriver>();
    [Parameter] public IEnumerable<Result> Results { get; set; } = Enumerable.Empty<Result>();

    private List<Driver> driverSelection = new();
    private IEnumerable<Driver> SelectedDrivers { get; set; } = new HashSet<Driver>();
    private Dictionary<Driver, DataSet> ComparableDrivers { get; set; } = new();

    ApexCharts.ApexChart<DataPoint>? chart;
    ApexCharts.ApexChartOptions<DataPoint> options = Constants.ChartOptionsDefault;

    bool loading = true;
    bool rendered = false;
    string message = "none";

    protected override void OnInitialized()
    {
        if (Drivers.Any())
            driverSelection.AddRange(Drivers);

        options.PlotOptions = new ApexCharts.PlotOptions
            {
                Bar = new ApexCharts.PlotOptionsBar
                {
                    Horizontal = true
                }
            };

        loading = false;
    }

    private bool SearchDrivers(Driver driver, string text)
    {
        if (string.IsNullOrWhiteSpace(text))
            return true;

        if (driver.FullName.ToLowerInvariant().Contains(text.ToLowerInvariant()))
            return true;

        return false;
    }

    private string? GetSelectedText(List<Driver> selectedDrivers)
    {
        if (!selectedDrivers.Any())
            return null;

        return string.Join(", ", selectedDrivers.Select(e => e.FullName));
    }

    private void SelectionChanged(IEnumerable<Driver>? selectedDrivers)
    {
        if (selectedDrivers == null || selectedDrivers.Count() == 0)
            return;

        foreach (var removeable in ComparableDrivers.Keys.Where(e => !selectedDrivers.Contains(e)))
            ComparableDrivers.Remove(removeable);

        foreach (var addable in selectedDrivers.Where(e => !ComparableDrivers.ContainsKey(e)))
            AddDataSet(addable);

        StateHasChanged();
        rendered = true;
    }

    void AddDataSet(Driver driver)
    {
        var dataSet = new DataSet() { Label = driver.FullName };

        var seasonDriverIds = SeasonDrivers.Where(e => e.DriverId == driver.Id).Select(e => e.Id).ToList();
        var driverResults = Results.Where(e => seasonDriverIds.Contains(e.SeasonDriverId)).ToList();

        dataSet.DataPoints.Add(new DataPoint("Races", driverResults.Count()));
        dataSet.DataPoints.Add(new DataPoint("Starts", driverResults.Count(e => e.Status != RaceStatus.Dnq)));
        dataSet.DataPoints.Add(new DataPoint("Wins", driverResults.Count(e => e.Position == 1)));
        dataSet.DataPoints.Add(new DataPoint("Poles", driverResults.Count(e => e.Grid == 1)));
        dataSet.DataPoints.Add(new DataPoint("DNFs", driverResults.Count(e => e.Status == RaceStatus.Dnf || e.Status == RaceStatus.Dsq)));

        ComparableDrivers.Add(driver, dataSet);
    }

    async Task UpdateChart()
    {
        if (!ComparableDrivers.Any() || chart == null)
            return;

        await chart.ResetSeriesAsync(true, true);
        await chart.RenderAsync();
    }
}
