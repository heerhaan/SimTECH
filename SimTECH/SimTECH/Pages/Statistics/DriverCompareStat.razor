@inject DriverService DriverService

<MudDialog>
    <TitleContent>
        <MudText>Driver comparison</MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Class="pa-2">
            <MudPaper Width="1100px">
                @if (Drivers != null)
                {
                    <MudStack>
                        <MudText>Add drivers to comparison</MudText>
                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                            <MudSelectExtended
                                ItemCollection="@Drivers"
                                T="Driver"
                                MultiSelection="true"
                                MultiSelectionTextFunc="GetSelectedText"
                                SelectedValuesChanged="SelectionChanged"
                                Label="Driver One"
                                SearchBox="true"
                                SearchFunc="SearchDrivers"
                                Variant="Variant.Outlined"
                                Class="field-lg">
                                <ItemTemplate>
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-1">
                                        <MudText>@context.Value.FullName</MudText>
                                        <MudSpacer />
                                        <CountryFlag Code="@context.Value.Country" Size="ElementSize.Tiny" />
                                    </MudStack>
                                </ItemTemplate>
                            </MudSelectExtended>
                            
                            <div>
                                @foreach (var compared in comparableDrivers)
                                {
                                    <MudText Typo="Typo.body1">
                                        <CountryFlag Code="@compared.Key.Country" Size="ElementSize.Small" />
                                        @compared.Key.FullName
                                    </MudText>
                                }
                            </div>
                        </MudStack>

                        <MudDivider />

                        <div class="pa-2" style="min-height: 600px">
                            @if (comparableDrivers.Any())
                            {
                                <ApexCharts.ApexChart @ref="chart"
                                                      TItem="DataPoint"
                                                      Title="Driver compare"
                                                      Options="@options"
                                                      Height="500"
                                                      Width="@("100%")">
                                    @foreach (var driverCompare in comparableDrivers)
                                    {
                                        <ApexCharts.ApexPointSeries TItem="DataPoint"
                                                                    Items="@driverCompare.Value.DataPoints"
                                                                    Name="@driverCompare.Value.Label"
                                                                    XValue="@(e => e.XData)"
                                                                    SeriesType="ApexCharts.SeriesType.Bar"
                                                                    YValue="@(e => e.YData)" />
                                    }
                                </ApexCharts.ApexChart>
                            }
                        </div>
                    </MudStack>
                }
            </MudPaper>
        </MudContainer>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? StatDialog { get; set; }

    ApexCharts.ApexChart<DataPoint>? chart;
    ApexCharts.ApexChartOptions<DataPoint> options = Constants.ChartOptionsDefault;
    List<Driver>? Drivers;

    Dictionary<Driver, DataSet> comparableDrivers = new();

    bool preparedData = false;

    protected override void OnInitialized()
    {
        options.PlotOptions = new ApexCharts.PlotOptions
            {
                Bar = new ApexCharts.PlotOptionsBar
                {
                    Horizontal = true
                }
            };
    }

    protected override async Task OnInitializedAsync()
    {
        Drivers = await DriverService.GetDrivers();
    }

    private bool SearchDrivers(Driver driver, string text)
    {
        if (string.IsNullOrWhiteSpace(text))
            return true;

        if (driver.FullName.ToLowerInvariant().Contains(text.ToLowerInvariant()))
            return true;

        return false;
    }

    private string? GetSelectedText(List<Driver> selectedDrivers)
    {
        if (!selectedDrivers.Any())
            return null;

        return string.Join(", ", selectedDrivers.Select(e => e.FullName));
    }

    private async Task SelectionChanged(IEnumerable<Driver>? selectedDrivers)
    {
        if (selectedDrivers == null || selectedDrivers.Count() == 0)
            return;

        foreach (var removeable in comparableDrivers.Keys.Where(e => !selectedDrivers.Contains(e)))
            comparableDrivers.Remove(removeable);

        foreach (var addable in selectedDrivers.Where(e => !comparableDrivers.ContainsKey(e)))
        {
            await AddDataSet(addable);
        }

        if (chart != null)
            await chart.RenderAsync();

        preparedData = true;
    }

    async Task AddDataSet(Driver driver)
    {
        var dataSet = new DataSet() { Label = driver.FullName };

        var driverResults = await DriverService.GetAllResults(driver.Id);

        dataSet.DataPoints.Add(new DataPoint("Races", driverResults.Count()));
        dataSet.DataPoints.Add(new DataPoint("Starts", driverResults.Count(e => e.Status != RaceStatus.Dnq)));
        dataSet.DataPoints.Add(new DataPoint("Wins", driverResults.Count(e => e.Position == 1)));
        dataSet.DataPoints.Add(new DataPoint("Poles", driverResults.Count(e => e.Grid == 1)));
        dataSet.DataPoints.Add(new DataPoint("DNFs", driverResults.Count(e => e.Status == RaceStatus.Dnf || e.Status == RaceStatus.Dsq)));

        comparableDrivers.Add(driver, dataSet);
    }
}
