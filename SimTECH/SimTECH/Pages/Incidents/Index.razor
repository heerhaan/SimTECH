@page "/incidents"

@using SimTECH.Pages.Incidents.Dialogs

@inject BreadcrumbProvider _bread
@inject IIncidentService _incidentService
@inject IDialogService _dialogService

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper MinHeight="60px">
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4">
            <MudText Typo="Typo.h3">Incidents</MudText>
            <MudSpacer />
            <MudButtonGroup Variant="Variant.Outlined" Color="Color.Tertiary" Size="Size.Small">
                <MudButton StartIcon="@Icons.Material.Filled.Download"
                           IconSize="Size.Small"
                           OnClick="OpenImporter"
                           Class="btn-md">
                    Import
                </MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Add"
                           IconSize="Size.Small"
                           OnClick="AddItem"
                           Class="btn-md">
                    New
                </MudButton>
            </MudButtonGroup>
        </MudStack>
    </MudPaper>
    <MudDataGrid T="Incident" Items="@Incidents" RowsPerPage="15" Dense="true">
        <Columns>
            <PropertyColumn Property="e => e.Name" />
            <PropertyColumn Property="e => e.Category" Filterable="true" />
            <PropertyColumn Property="e => e.Limit" />
            <PropertyColumn Property="e => e.Punishment" />
            <PropertyColumn Property="e => e.Odds" />
            <TemplateColumn T="Incident" Sortable="false">
                <CellTemplate>
                    <MudButtonGroup>
                        <MudIconButton Size="@Size.Small"
                                       Icon="@Icons.Material.Outlined.Edit"
                                       OnClick="@(() => UpdateItem(context.Item))" />
                        <StateTogglerButton CallbackToggled="@((bool toggled) => OnToggleChange(context.Item, toggled))"
                                            Default="@(context.Item.State == State.Active)" />
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Incident" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    private List<Incident> Incidents { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: "/"),
            new BreadcrumbItem("Incidents", href: "incidents", disabled: true),
        });

        Incidents = await _incidentService.GetIncidents(StateFilter.All);
    }

    private async Task AddItem() => await UpdateItem(null);
    private async Task UpdateItem(Incident? incident)
    {
        var parameters = new DialogParameters
            {
                ["Incident"] = incident,
            };

        var dialog = await _dialogService.ShowAsync<IncidentEditor>("Modify incident", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is Incident updatedItem)
        {
            await _incidentService.UpdateIncident(updatedItem);
            Incidents = await _incidentService.GetIncidents(StateFilter.All);
        }
    }

    private async Task OnToggleChange(Incident incident, bool toggled)
        => await ToggleState(incident, (toggled ? State.Active : State.Closed));

    private async Task ToggleState(Incident incident, State targetState)
    {
        await _incidentService.ChangeState(incident, targetState);
        incident.State = targetState;
    }

    private async Task OpenImporter()
    {
        var dialog = await _dialogService.ShowAsync<Import>("Import incidents");
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is List<Incident> bulkIncidents)
        {
            await _incidentService.BulkAddItems(bulkIncidents);
            Incidents = await _incidentService.GetIncidents();
        }
    }
}
