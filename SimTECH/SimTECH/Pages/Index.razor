@page "/"

@inject CommonService _commonService
@inject RaceService _raceService
@inject SeasonService _seasonService
@inject LeagueService _leagueService
@inject BreadcrumbProvider _bread
@inject ProtectedLocalStorage _localStorage
@inject NavigationManager _nav
@inject IDialogService _dialogService
@inject IOptions<SimConfig> _config

<PageTitle>Home</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16 px-8">
    <MudGrid Spacing="1">
        <MudItem xs="12">
            <MudPaper Elevation="15" Height="75px" Class="d-flex flex-column justify-center align-center pa-4">
                <MudText Typo="Typo.h3">SimTECH</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" md="3">
            <MudPaper Elevation="5" Class="pa-4 mud-height-full">
                <MudText Typo="Typo.h5">Welcome</MudText>
                <MudDivider />

                <MudText Typo="Typo.body2" Class="my-2">
                    Great to see you again, you love to see it.
                </MudText>

                @if (!hideDataMessage)
                {
                    <MudAlert Severity="Severity.Info" Dense="true" ShowCloseIcon="true" CloseIconClicked="HideDataMessage" Class="my-2">
                        First time here? Wow, how cool. Go to <MudLink Href="extra">extra</MudLink> to load some default data!
                    </MudAlert>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12" md="9">
            <MudPaper Elevation="5" Class="pa-4 mud-height-full">
                <MudTable id="recent-race-table" Items="@RecentRaces" Dense="true" Class="overflow-hider">
                    <ToolBarContent>
                        <MudText Typo="Typo.h5">Last races</MudText>
                        <MudSpacer />
                        <ScreenshotIconButton TargetId="recent-race-table" Colour="Color.Primary" />
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<FinishedRaceModel, object>(e => e.LeagueName)">
                                League
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>Race</MudTh>
                        <MudTh Class="pa-0"></MudTh>
                        <MudTh>Team</MudTh>
                        <MudTh Class="number-col">NO</MudTh>
                        <MudTh>Driver</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudText Typo="Typo.body2">@context.LeagueName</MudText>
                        </MudTd>
                        <MudTd>
                            <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.body2">[R@(context.Round)] @(context.Name)</MudText>
                                <MudSpacer />
                                <CountryFlag Code="@context.Country" Size="ElementSize.Small" />
                            </MudStack>
                        </MudTd>
                        <MudTd Class="accent-cell">
                            <SmolAccent Colour="@context.WinningDriver.Colour" />
                        </MudTd>
                        <MudTd>
                            <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.body2">@context.WinningTeam.Name</MudText>
                            </MudStack>
                        </MudTd>
                        <MudTd Class="number-col">
                            <NumberDisplay Colour="@context.WinningDriver.Colour" Accent="@context.WinningDriver.Accent">@context.WinningDriver.Number</NumberDisplay>
                        </MudTd>
                        <MudTd>
                            <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.body2">@context.WinningDriver.Name</MudText>
                            </MudStack>
                        </MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Text"
                                       Color="Color.Secondary"
                                       OnClick="@(() => GoToPostRace(context.RaceId))">Go</MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudPaper Elevation="5" MinHeight="100px" Class="pa-4 mud-height-full">
                <MudTable Items="@ActiveSeasons" Dense="true">
                    <ToolBarContent>
                        <MudText Typo="Typo.h5">Active seasons</MudText>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>League</MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<Data.Models.Season, object>(e => e.Year)">
                                Season
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudText Typo="Typo.body2">@(DisplayLeagueName(context.LeagueId))</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText Typo="Typo.body2">@context.Year</MudText>
                        </MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Text"
                                       Color="Color.Secondary"
                                       OnClick="@(() => GoToSeason(context.Id))">Overview</MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudPaper Elevation="5" MinHeight="100px" Class="pa-4 mud-height-full">
                    <MudTable T="FinishedRaceModel" Items="@UpcomingRaces" Dense="true" Class="overflow-hider">
                    <ToolBarContent>
                        <MudText Typo="Typo.h5">Upcoming races</MudText>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<FinishedRaceModel, object>(e => e.LeagueName)">
                                League
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>Season</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudText Typo="Typo.body2">@context.LeagueName</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText Typo="Typo.body2">@context.SeasonDisplay</MudText>
                        </MudTd>
                        <MudTd>
                            <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.body2">[R@(context.Round)] @(context.Name)</MudText>
                                <MudSpacer />
                                <CountryFlag Code="@context.Country" Size="ElementSize.Small" />
                            </MudStack>
                        </MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="@(() => GoToRaceWeek(context.RaceId))">Go</MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<Season> ActiveSeasons { get; set; } = new();

    private List<FinishedRaceModel> RecentRaces { get; set; } = new();
    private List<FinishedRaceModel> UpcomingRaces { get; set; } = new();

    private SimConfig config;
    private List<League> activeLeagues { get; set; }

    private int raceAmount = 5;
    private bool hideDataMessage = true;

    protected override async Task OnInitializedAsync()
    {
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: "/", disabled: true),
        });

        config = _config.Value;
        activeLeagues = await _leagueService.GetLeagues(StateFilter.Active);

        ActiveSeasons = await _seasonService.GetSeasons(StateFilter.Active);

        // following is possibly a very unoptimized call
        RecentRaces = await _raceService.GetRecentlyFinishedCalendarRaces(raceAmount);

        await RetrieveUpcomingRaces();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var storedDataMessage = await _localStorage.GetAsync<bool>("hidedatamsg");
            hideDataMessage = storedDataMessage.Success ? storedDataMessage.Value : false;
        }
    }

    private async Task RetrieveUpcomingRaces()
    {
        foreach (var season in ActiveSeasons)
        {
            var nextRace = await _raceService.GetNextRaceOfSeason(season.Id);
            if (nextRace != null)
            {
                var upcoming = new FinishedRaceModel
                {
                    RaceId = nextRace.Id,
                    Name = nextRace.Name,
                    Round = nextRace.Round,
                    Country = nextRace.Track?.Country ?? Globals.DefaultCountry,
                    SeasonDisplay = season.Year.ToString(),
                    LeagueName = activeLeagues.Find(e => e.Id == season.LeagueId)?.Name ?? "[Unknown]",
                };

                UpcomingRaces.Add(upcoming);
            }
        }
    }

    private async Task HideDataMessage()
    {
        await _localStorage.SetAsync("hidedatamsg", true);
        hideDataMessage = true;
    }

    private async Task InsertDefault()
    {
        bool? confirm = await _dialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to add the default data, best to do this when you haven't added anything yourself.",
            yesText: "Ya", cancelText: "Nah");

        if (confirm == true)
            await _commonService.InsertDefaultData();
    }

    private string DisplayLeagueName(long leagueId) => activeLeagues.Find(e => e.Id == leagueId)?.Name ?? "[Unknown]";

    private void GoToSeason(long seasonId) => _nav.NavigateTo($"/overview/{seasonId}");
    private void GoToPostRace(long raceId) => _nav.NavigateTo($"/raceweek/{raceId}");
    private void GoToRaceWeek(long raceId) => _nav.NavigateTo($"/raceweek/{raceId}");
}
