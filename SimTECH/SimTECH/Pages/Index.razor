@page "/"
@inject BreadcrumbProvider _bread
@inject RaceService RaceService
@inject ProtectedLocalStorage LocalStorage
@inject NavigationManager Nav
@inject IOptions<SimConfig> _config

<PageTitle>Home</PageTitle>

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 300px;">
                <MudText Typo="Typo.overline">Config</MudText>
                <MudText Typo="Typo.body2">Fatal odds: @_config.Value.FatalityChance</MudText>
                <MudText Typo="Typo.body2">Dsq odds: @_config.Value.DisqualifyChance</MudText>
                <MudText Typo="Typo.body2">Gap marge p/pt: @_config.Value.GapMarge</MudText>
                <MudText Typo="Typo.body2">Team status car mod: @_config.Value.CarDriverStatusModifier</MudText>
                <MudText Typo="Typo.body2">Mistake rolls: @_config.Value.MistakeAmountRolls</MudText>
                <MudText Typo="Typo.body2">Mistake min rng: @_config.Value.MistakeLowerValue</MudText>
                <MudText Typo="Typo.body2">Mistake max rng: @_config.Value.MistakeUpperValue</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 300px;">
                <MudText Typo="Typo.h2">SimTECH</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 300px;">
                <MudText Typo="Typo.overline">Config</MudText>
                <MudText Typo="Typo.body2">Sunny engine multiplier: @_config.Value.SunnyEngineMultiplier</MudText>
                <MudText Typo="Typo.body2">Overcast engine multiplier: @_config.Value.OvercastEngineMultiplier</MudText>
                <MudText Typo="Typo.body2">Wet engine multiplier: @_config.Value.WetEngineMultiplier</MudText>
                <MudText Typo="Typo.body2">Rain RNG: @_config.Value.RainAdditionalRNG</MudText>
                <MudText Typo="Typo.body2">Storm RNG: @_config.Value.StormAdditionalRNG</MudText>
                <MudText Typo="Typo.body2">Rain reliability: @_config.Value.RainDriverReliabilityModifier</MudText>
                <MudText Typo="Typo.body2">Storm reliability: @_config.Value.StormDriverReliabilityModifier</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4" Style="height: 300px;">
                        <MudText Typo="Typo.h5">Examples</MudText>
                        <div>
                            <!-- Local storage value -->
                            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="SetExample">Set store</MudButton>
                            <MudText>@exampleStore</MudText>
                        </div>
                        <MudStack Row="true">
                            <MudText Typo="Typo.h6">Custom Icon Cycler</MudText>
                            <MudSpacer />
                            <MudButton OnClick="CycleCustomIcon">Cycle</MudButton>
                        </MudStack>
                        <MudIcon Icon="@activeCustomIcon" Color="Color.Primary" Size="Size.Large" />
                        <MudIcon Icon="@activeCustomIcon" Color="Color.Secondary" Size="Size.Small" />
                        <MudIcon Icon="@activeCustomIcon" Style="color:green" />
                        <MudIcon Icon="@activeCustomIcon" />
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4" Style="height: 300px;"></MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudPaper Elevation="2" Class="pa-4 mud-height-full">
                @if (recentRaces != null)
                {
                    <MudTable id="recent-race-table" Items="@recentRaces" Dense="true">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Last races</MudText>
                            <MudSpacer />
                            <ScreenshotButton TargetId="recent-race-table" />
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>League</MudTh>
                            <MudTh>Round</MudTh>
                            <MudTh>Race</MudTh>
                            <MudTh Class="pa-0"></MudTh>
                            <MudTh>Winning driver</MudTh>
                            <MudTh Class="number-col">No.</MudTh>
                            <MudTh>Winning team</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>
                                <MudText Typo="Typo.body2">@context.LeagueName</MudText>
                            </MudTd>
                            <MudTd>
                                <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.body2">Round: @context.Round</MudText>
                                    <MudSpacer />
                                    <CountryFlag Code="@context.Country" Size="FlagSize.Tiny" />
                                </MudStack>
                            </MudTd>
                            <MudTd>
                                <MudText Typo="Typo.body2">@context.Name</MudText>
                            </MudTd>
                            <MudTd Class="pa-0">
                                <span class="smol-accent" style="@(ViewHelper.SetBackgroundColour(context.WinningDriver.Colour))"></span>
                            </MudTd>
                            <MudTd>
                                <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.body2">@context.WinningDriver.Name</MudText>
                                    <MudSpacer />
                                    <CountryFlag Code="@context.WinningDriver.Country" Size="FlagSize.Tiny" />
                                </MudStack>
                            </MudTd>
                            <MudTd Class="number-col" Style="@(ViewHelper.SetFullColourstyle(context.WinningDriver.Colour, context.WinningDriver.Accent))">
                                <MudText Typo="Typo.caption">@context.WinningDriver.Number</MudText>
                            </MudTd>
                            <MudTd>
                                <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.body2">@context.WinningTeam.Name</MudText>
                                    <MudSpacer />
                                    <CountryFlag Code="@context.WinningTeam.Country" Size="FlagSize.Tiny" />
                                </MudStack>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    List<FinishedRaceModel> recentRaces;
    int raceAmount = 5;
    string activeCustomIcon = IconCollection.BrandToyota;
    string[] customIcons = IconCollection.ArrayOfIcons;
    int iconCycler = 0;
    string? exampleStore;
    string newExampleString = "Stored and retrieved from the local storage";

    protected override async Task OnInitializedAsync()
    {
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: "/"),
        });

        recentRaces = await RaceService.GetRecentlyFinishedCalendarRaces(raceAmount);
        recentRaces.Reverse();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var storedExample = await LocalStorage.GetAsync<string>("example");
        if (storedExample.Success)
            exampleStore = storedExample.Value;
    }

    void CycleCustomIcon()
    {
        iconCycler++;
        iconCycler %= customIcons.Length;

        activeCustomIcon = customIcons[iconCycler];
    }

    private async Task SetExample()
    {
        await LocalStorage.SetAsync("example", newExampleString);
    }
}
