@page "/humanbeinggenerator"

@using System.Text.Json
@using System.Text.Json.Serialization

@inject DriverService _driverService
@inject BreadcrumbProvider _bread
@inject HumanBeingProvider _humanProvider
@inject NavigationManager _nav
@inject ISnackbar _snack

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid Spacing="1">
        <MudItem xs="12">
            <MudPaper Elevation="15" Height="75px" Class="d-flex flex-row justify-center pa-4">
                <MudText Typo="Typo.h3">Human Being Generator</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudStack>
                <MudPaper Elevation="15" Class="d-flex flex-column justify-space-between pa-4">
                    <MudStack>
                        <div>
                            <MudText Typo="Typo.h6">Generation settings</MudText>
                            <MudDivider />
                        </div>

                        <div>
                            <MudText Typo="Typo.subtitle1">Gender</MudText>
                            <MudChipSet T="Gender" SelectedValueChanged="GenderChange" SelectionMode="SelectionMode.SingleSelection">
                                <MudChip Value="Gender.All" Icon="@Gender.All.GenderIcon()" Default="true">All</MudChip>
                                <MudChip Value="Gender.Male" Icon="@Gender.Male.GenderIcon()">Male</MudChip>
                                <MudChip Value="Gender.Female" Icon="@Gender.Female.GenderIcon()">Female</MudChip>
                                <MudChip Value="Gender.Other" Icon="@Gender.Other.GenderIcon()">French</MudChip>
                            </MudChipSet>
                        </div>

                        <MudNumericField @bind-Value="@generateAmount" Label="Amount generated" Class="field-md" />
                        <MudDateRangePicker Label="Date of Birth range" @bind-DateRange="dateRange" Editable="true" />

                        <!-- One option to add is to generate either on nationality or language type -->
                        @if (availableLanguages != null && genderFilter != Gender.Other)
                        {
                            <MudSelectExtended ItemCollection="@(availableLanguages.OrderBy(e => e.Country.GetDescription()).ToList())"
                                               @bind-SelectedValues="@SelectedLanguages"
                                               T="LanguageInfo"
                                               MultiSelection="true"
                                               MultiSelectionTextFunc="GetSelectedText"
                                               Label="Select nationalities"
                                               Variant="Variant.Outlined"
                                               SearchBox="true"
                                               SearchFunc="SearchLanguages"
                                               >
                                <ItemTemplate>
                                    <MudCheckBox Value="@context.IsSelected" Color="Color.Secondary" />
                                    <CountryNamedFlag Code="@context.Value.Country" Justify="Justify.FlexStart" Size="ElementSize.Normal" />
                                </ItemTemplate>
                                <ItemSelectedTemplate>
                                    <MudCheckBox Value="@context.IsSelected" Color="Color.Secondary" />
                                    <CountryNamedFlag Code="@context.Value.Country" Justify="Justify.FlexStart" Size="ElementSize.Normal" />
                                </ItemSelectedTemplate>
                            </MudSelectExtended>
                        }
                    </MudStack>
                    <MudDivider Class="my-1" />
                    <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Recycling" Color="Color.Info" OnClick="GenerateHumans">Generate</MudButton>
                </MudPaper>
                <MudPaper Elevation="15" Class="pa-4">
                    @if (availableLanguages != null)
                    {
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText Typo="Typo.h6">Language data (by language type)</MudText>
                            </MudItem>
                            @for (int index = 0; index < 4; index++)
                            {
                                var j = index;
                                <MudItem xs="3">
                                    <MudList T="string" ReadOnly="false" Dense="true">
                                        @foreach (var languageType in availableLanguages
                                            .GroupBy(e => e.LanguageType)
                                            .Skip((langTypeAmount / 4) * j)
                                            .Take(langTypeAmount / 4))
                                        {
                                            <MudListItem Text="@languageType.Key">
                                                <NestedList>
                                                    @foreach (var lang in languageType)
                                                    {
                                                        <MudListItem>
                                                            <CountryNamedFlag Code="@lang.Country"
                                                                              Justify="Justify.FlexStart"
                                                                              Size="ElementSize.Small"
                                                                              Typo="Typo.body2"
                                                                              Reverse="true" />
                                                        </MudListItem>
                                                    }
                                                </NestedList>
                                            </MudListItem>
                                        }
                                    </MudList>
                                </MudItem>
                            }
                        </MudGrid>
                    }
                </MudPaper>
            </MudStack>
        </MudItem>
        <MudItem xs="6">
            <MudPaper Elevation="15" Class="mud-height-full">
                @if (humanBeans != null)
                {
                    <MudTable Items="@humanBeans" Dense="true">
                        <ToolBarContent>
                            <MudText>Human beings</MudText>
                            <MudSpacer />
                            <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="SaveHumanBeings" Class="btn-md">Persist</MudButton>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>Gender</MudTh>
                            <MudTh>DOB</MudTh>
                            <MudTh>Nation</MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.FullName</MudTd>
                            <MudTd>@context.Gender</MudTd>
                            <MudTd>@context.Dob.ToShortDateString()</MudTd>
                            <MudTd>
                                <CountryNamedFlag Code="@context.Nationality"
                                                  Size="ElementSize.Small"
                                                  Reverse="true" />
                            </MudTd>
                            <MudTd>
                                <MudButtonGroup OverrideStyles="false" Class="pa-0">
                                    <MudButton FullWidth="true" OnClick="@(async () => await SaveSingleHuman(context))">Persist</MudButton>
                                    <MudButton FullWidth="true" Color="Color.Error" OnClick="@(() => RemoveHumanBeing(context))">Remove</MudButton>
                                </MudButtonGroup>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private enum GenerateBy { Language, Nationality }

    private IEnumerable<Country> SelectedCountries { get; set; } = new HashSet<Country>();
    private IEnumerable<LanguageInfo> SelectedLanguages { get; set; } = new HashSet<LanguageInfo>();

    LanguageInfo[]? availableLanguages;
    List<HumanBeing>? humanBeans;
    DateRange dateRange = new DateRange(DateTime.Now.AddYears(-10).Date, DateTime.Now.Date);
    Gender genderFilter = Gender.All;
    int generateAmount = 5;

    int langTypeAmount => availableLanguages == null ? 0 : availableLanguages.GroupBy(e => e.LanguageType).Count();

    protected override void OnInitialized()
    {
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: ""),
            new BreadcrumbItem("Drivers", href: "drivers"),
            new BreadcrumbItem("Human Being Generator", href: "humanbeinggenerator", disabled: true),
        });

        availableLanguages = _humanProvider.GetLanguageHumanInfo();
    }

    private void GenderChange(Gender gender) => genderFilter = gender;

    private void GenerateHumans()
    {
        if (availableLanguages == null)
        {
            _snack.Add("There aren't any available languages to generate from! HOW?!", Severity.Error);
            return;
        }

        LanguageInfo[]? langsToGenerate;

        if (genderFilter.HasFlag(Gender.Other))
            langsToGenerate = availableLanguages.Where(e => e.LanguageType == "fr").ToArray();
        else
            langsToGenerate = SelectedLanguages.ToArray();

        if (langsToGenerate == null || langsToGenerate.Length == 0)
        {
            _snack.Add("No languages have been selected, you moron", Severity.Error);
            return;
        }

        humanBeans = _humanProvider.GetHumanBeings(generateAmount, langsToGenerate, genderFilter, dateRange);
    }

    private async Task SaveHumanBeings()
    {
        if (humanBeans == null)
        {
            _snack.Add("No human beings have been generated, you fucked that up nicely", Severity.Error);
            return;
        }

        var drivers = humanBeans.Select(e => e.ToDriver).ToList();

        await _driverService.BulkAddItems(drivers);

        _nav.NavigateTo("/drivers");
    }

    private async Task SaveSingleHuman(HumanBeing realHero)
    {
        await _driverService.BulkAddItems(new(){ realHero.ToDriver });
        _nav.NavigateTo("/drivers");
    }

    private void RemoveHumanBeing(HumanBeing realLoser)
    {
        if (humanBeans?.Contains(realLoser) ?? false)
            humanBeans.Remove(realLoser);
    }

    private bool SearchLanguages(LanguageInfo lang, string searchText)
    {
        if (string.IsNullOrWhiteSpace(searchText))
            return true;

        var countryText = lang.Country.GetDescription().ToLowerInvariant();

        if (countryText.Contains(searchText.ToLowerInvariant()))
            return true;

        return false;
    }

    private string? GetSelectedText(List<LanguageInfo> selectedLangs)
    {
        if (!selectedLangs.Any())
            return null;

        return string.Join(" | ", selectedLangs.Select(e => $"{e.Country.CountryCodeToEmoji()} {e.Country.GetDescription()}"));
    }
}
