@page "/drivers"

@using SimTECH.PageModels.Entrants.Drivers
@using SimTECH.Pages.Drivers.Dialogs

@inject DriverService _driverService
@inject ResultService _resultService
@inject TraitService _traitService
@inject BreadcrumbProvider _bread
@inject NavigationManager _nav
@inject IDialogService _dialogService

<PageTitle>Drivers</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper MinHeight="60px">
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-4">
            <MudText Typo="Typo.h3">Drivers</MudText>
        </MudStack>
    </MudPaper>
    <MudDataGrid T="DriverListItem" Items="@Drivers" RowsPerPage="15" Dense="true" QuickFilter="@_driverFilter">
        <ToolBarContent>
            <MudTextField @bind-Value="_searchString"
                          Placeholder="Search"
                          Immediate="true"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium"
                          Class="mt-0 field-md" />
            <MudSpacer />
            <MudButtonGroup Variant="Variant.Outlined" Color="Color.Tertiary" Size="Size.Small">
                <MudButton StartIcon="@Icons.Material.Filled.Archive"
                           IconSize="Size.Small"
                           OnClick="ToggleDisplayArchived"
                           Class="btn-md">
                    @(showingArchived ? "Active" : "Archive")
                </MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Sync"
                           IconSize="Size.Small"
                           OnClick="GoToHumanGenerator"
                           Class="btn-md">
                    Generate
                </MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Download"
                           IconSize="Size.Small"
                           OnClick="OpenImporter"
                           Class="btn-md">
                    Import
                </MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Add"
                           IconSize="Size.Small"
                           OnClick="AddDriver"
                           Class="btn-md">
                    New
                </MudButton>
            </MudButtonGroup>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="e => e.FullName" Title="Name" />
            <PropertyColumn Property="e => e.Abbreviation" Title="Tag" />
            <PropertyColumn Property="e => e.DateOfBirth" Title="Born in" Format="yyyy" />
            <TemplateColumn T="DriverListItem" Title="Nation" SortBy="e => e.Country">
                <CellTemplate>
                    <CountryNamedFlag Code="@context.Item.Country" Size="ElementSize.Small" Reverse="true" />
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="e => e.ActiveInLeague" Title="League" />
            <TemplateColumn T="DriverListItem" Sortable="false">
                <CellTemplate>
                    <MudButtonGroup Size="Size.Small" Class="ml-auto">
                        <MudIconButton Icon="@Icons.Material.Outlined.QueryStats"
                                       OnClick="@(() => ShowDetailData(context.Item))" />
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit"
                                       OnClick="@(() => UpdateDriver(context.Item))" />
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete"
                                       Color="Color.Error"
                                       OnClick="@(() => ArchiveDriver(context.Item))" />
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="DriverListItem" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    private List<DriverListItem> Drivers { get; set; } = [];

    private bool showingArchived = false;
    private string _searchString;

    protected override async Task OnInitializedAsync()
    {
        _bread.SetBreadcrumbs(new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Home", href: "/"),
            new BreadcrumbItem("Drivers", href: "drivers", disabled: true),
        });

        Drivers = await _driverService.GetIndexListDrivers();
    }

    private Func<DriverListItem, bool> _driverFilter => driver =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (driver.FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (driver.LastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private async Task ShowDetailData(DriverListItem item)
    {
        var parameters = new DialogParameters
            {
                ["Driver"] = await _driverService.GetDriver(item.Id)
            };

        await _dialogService.ShowAsync<DriverDetailStat>("Driver details", parameters);
    }

    private async Task AddDriver() => await UpdateDriver(null);
    private async Task UpdateDriver(DriverListItem? item)
    {
        var driverTraits = await _traitService.GetTraitsOfType(Entrant.Driver);

        Driver? driver = null;

        if (item != null)
            driver = await _driverService.GetDriver(item.Id);

        var parameters = new DialogParameters
        {
            ["Driver"] = driver,
            ["Traits"] = driverTraits
        };
        var dialog = await _dialogService.ShowAsync<DriverEditor>("Modify driver", parameters);
        var result = await dialog.Result;

        if (result?.Data != null && !result.Canceled && result.Data is Driver updatedItem)
        {
            await _driverService.UpdateDriver(updatedItem);
            Drivers = await _driverService.GetIndexListDrivers();
        }
    }

    private async Task ArchiveDriver(DriverListItem driver)
    {
        await _driverService.ArchiveDriver(driver.Id);
        Drivers.Remove(driver);
    }

    private async Task ToggleDisplayArchived()
    {
        if (showingArchived)
            Drivers = await _driverService.GetIndexListDrivers(false);
        else
            Drivers = await _driverService.GetIndexListDrivers(true);

        _searchString = string.Empty;
        showingArchived = !showingArchived;
    }

    private async Task OpenImporter()
    {
        var dialog = await _dialogService.ShowAsync<Import>("Import drivers");
        var result = await dialog.Result;

        if (result?.Data != null && !result.Canceled && result.Data is List<Driver> bulkDrivers)
        {
            await _driverService.BulkAddItems(bulkDrivers);
            Drivers = await _driverService.GetIndexListDrivers();
        }
    }

    private void GoToHumanGenerator() => _nav.NavigateTo("humanbeinggenerator");
}
