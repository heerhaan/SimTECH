@using System.Text.Json
@using static SimTECH.Providers.HelpBlockProvider;

@inject ProtectedLocalStorage _storage

@inherits LayoutComponentBase

<MudThemeProvider @bind-IsDarkMode="IsDarkTheme" Theme="@Theme" />
<MudDialogProvider MaxWidth="MaxWidth.Large"
                   CloseButton="true"
                   DisableBackdropClick="true"
                   Position="DialogPosition.Center" />
<MudSnackbarProvider />

<MudLayout @onclick="HandleLayoutClick">
    <MudAppBar Elevation="5" Dense="true" Class="layout-appbar">
        <MudIconButton Icon="@Icons.Material.Filled.Menu"
                       Color="Color.Secondary"
                       Edge="Edge.Start"
                       OnClick="ToggleDrawer" />

        <CustomBreadcrumbs />

        <MudSpacer />

        <MudToggleIconButton @bind-Toggled="IsDarkTheme"
            Icon="@Icons.Material.Filled.LightMode" Color="Color.Warning" Title="Light"
            ToggledIcon="@Icons.Material.Filled.DarkMode" ToggledColor="Color.Warning" ToggledTitle="Dark" />
        
        <MudMenu Icon="@Icons.Material.Filled.Palette" Color="Color.Secondary">
            @foreach (var themeItem in SimThemes.Keys)
            {
                <MudMenuItem OnClick="@(() => SetTheme(themeItem))">@themeItem</MudMenuItem>
            }
        </MudMenu>

        <MudIconButton Href="/guide" Icon="@Icons.Material.Filled.MenuBook" Color="Color.Secondary" />

        <MudPopover Open="@IsHelpOpen"
                    AnchorOrigin="Origin.BottomRight"
                    TransformOrigin="Origin.TopRight"
                    Class="guide-popup-element">
            @if (HelpContent != null)
            {
                <MudPaper Class="pa-2 dialog-shadow dynamic-guide-container"
                          @onclick:stopPropagation="true">
                    <DynamicComponent Type="@HelpContent" />
                </MudPaper>
            }
        </MudPopover>

        <MudIconButton Icon="@Icons.Material.Filled.QuestionMark"
                       Color="Color.Secondary"
                       Disabled="@(HelpContent == null)"
                       OnClick="ToggleHelpBlock" />
        
    </MudAppBar>

    <MudDrawer @bind-Open="DrawerOpen"
               ClipMode="DrawerClipMode.Always"
               Variant="DrawerVariant.Responsive"
               Class="layout-drawer">
        <MudDrawerHeader>
            <MudText Color="Color.Tertiary" Typo="Typo.h5">SimTECH</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent id="sim-page-content" Class="main-content">
        @Body
    </MudMainContent>
</MudLayout>

@code {
    [CascadingParameter(Name = "PageType")]
    public Type PageType { get; set; }

    private MudTheme Theme { get; set; } = CustomThemes.GalacticTheme;

    private Dictionary<string, MudTheme> SimThemes { get; set; } = CustomThemes.SimThemes;

    private Type? HelpContent { get; set; }

    private bool DrawerOpen { get; set; } = true;
    private bool IsDarkTheme { get; set; } = true;
    private bool IsHelpOpen { get; set; } = false;

    protected override void OnParametersSet()
    {
        if (PageType != HelpContent)
        {
            // Alternatively this could also be implemented by checking for the content on click
            IsHelpOpen = false;
            HelpContent = HelpBlockProvider.GetHelpContentForPage(PageType);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var storedTheme = await _storage.GetAsync<string>("activeTheme");

            if (storedTheme.Success
                && storedTheme.Value != null
                && SimThemes.ContainsKey(storedTheme.Value))
            {
                Theme = SimThemes[storedTheme.Value];

                StateHasChanged();
            }
        }
    }

    private async Task SetTheme(string themeName)
    {
        Theme = SimThemes[themeName];

        await _storage.SetAsync("activeTheme", themeName);
    }

    private void HandleLayoutClick()
    {
        if (IsHelpOpen)
            IsHelpOpen = false;
    }

    private void SetHelpContent(Type componentType)
    {
        if (HelpContent == componentType)
            return;

        IsHelpOpen = false;
        HelpContent = HelpBlockProvider.GetHelpContentForPage(componentType);
    }

    private void ToggleDrawer() => DrawerOpen = !DrawerOpen;

    private void ToggleHelpBlock() => IsHelpOpen = !IsHelpOpen;
}