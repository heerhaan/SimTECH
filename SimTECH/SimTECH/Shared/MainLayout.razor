@using static SimTECH.Providers.GuideBookProvider;

@inject ProtectedLocalStorage _storage
@inherits LayoutComponentBase

<MudThemeProvider @bind-IsDarkMode="@isDarkTheme" Theme="@Theme" />
<MudDialogProvider MaxWidth="MaxWidth.Large"
                   CloseButton="true"
                   DisableBackdropClick="true"
                   Position="DialogPosition.Center" />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="5" Dense="true" Style="border-bottom: 1px solid var(--mud-palette-primary)">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Secondary" Edge="Edge.Start" OnClick="ToggleSidebar" />
        <CustomBreadcrumbs />

        @* <MudSpacer />

        <MudExpansionPanels Dense="true" >
            <MudExpansionPanel @bind-IsExpanded="isHelpOpen" Disabled="@(HelpContent == null)" Dense="true" Style="width: 500px !important">
                <TitleContent>
                <div class="d-flex">
                <MudIconButton Icon="@Icons.Material.Filled.QuestionMark"
                Variant="Variant.Outlined"
                Color="Color.Secondary"
                Size="Size.Small"
                Disabled="@(HelpContent == null)"
                OnClick="@(() => isHelpOpen = !isHelpOpen)"
                Class="ml-auto"/>
                </div>
                </TitleContent>
                <ChildContent>
                    @if (HelpContent != null)
                    {
                        <DynamicComponent Type="@HelpContent" />
                    }
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels> *@

        <MudSpacer />

        <MudToggleIconButton @bind-Toggled="@isDarkTheme"
            Icon="@Icons.Material.Filled.LightMode" Color="Color.Warning" Title="Light"
            ToggledIcon="@Icons.Material.Filled.DarkMode" ToggledColor="Color.Warning" ToggledTitle="Dark" />
        
        <MudMenu Icon="@Icons.Material.Filled.Palette" Color="Color.Secondary">
            @foreach (var themeItem in simThemes.Keys)
            {
                <MudMenuItem OnClick="@(() => SetTheme(themeItem))">@themeItem</MudMenuItem>
            }
        </MudMenu>

        <MudIconButton Href="/guide" Icon="@Icons.Material.Filled.MenuBook" Color="Color.Dark" />

        <MudPopover Open="@isHelpOpen" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopRight">
            @if (HelpContent != null)
            {
                <DynamicComponent Type="@HelpContent" />
            }
        </MudPopover>
        <MudIconButton Icon="@Icons.Material.Filled.MenuBook" Color="Color.Secondary" Disabled="@(HelpContent == null)" OnClick="@(() => isHelpOpen = !isHelpOpen)" />
        
    </MudAppBar>
    <MudDrawer @bind-Open="@drawerOpen"
               ClipMode="DrawerClipMode.Always"
               Variant="DrawerVariant.Responsive"
               Style="border-right: 1px solid var(--mud-palette-primary)">
        <MudDrawerHeader>
            <MudText Color="Color.Tertiary" Typo="Typo.h5">SimTECH</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    [CascadingParameter(Name = "PageType")]
    public Type PageType { get; set; }

    MudTheme Theme { get; set; } = CustomThemes.GalacticTheme;

    bool drawerOpen = true;
    bool isDarkTheme = true;
    bool isHelpOpen = false;

    Dictionary<string, MudTheme> simThemes = CustomThemes.SimThemes;

    Type? HelpContent { get; set; }

    protected override void OnParametersSet()
    {
        if (PageType != HelpContent)
        {
            HelpContent = GuideBookProvider.GetHelpContentForPage(PageType);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var storedTheme = await _storage.GetAsync<string>("activeTheme");
            if (storedTheme.Success && storedTheme.Value != null && simThemes.ContainsKey(storedTheme.Value))
            {
                Theme = simThemes[storedTheme.Value];
                StateHasChanged();
            }
        }
    }

    private void ToggleSidebar() => drawerOpen = !drawerOpen;

    private async Task SetTheme(string themeName)
    {
        Theme = simThemes[themeName];
        await _storage.SetAsync("activeTheme", themeName);
    }
}