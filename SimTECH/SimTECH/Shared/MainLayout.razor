@inject ProtectedLocalStorage _storage
@inherits LayoutComponentBase

<MudThemeProvider @bind-IsDarkMode="@isDarkTheme" Theme="@Theme" />
<MudDialogProvider MaxWidth="MaxWidth.Large"
                   CloseButton="true"
                   DisableBackdropClick="true"
                   Position="DialogPosition.Center" />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="5" Dense="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Secondary" Edge="Edge.Start" OnClick="ToggleSidebar" />
        <CustomBreadcrumbs />

        <MudSpacer />

        <MudToggleIconButton @bind-Toggled="@isDarkTheme"
            Icon="@Icons.Material.Filled.LightMode" Color="Color.Warning" Title="Light"
            ToggledIcon="@Icons.Material.Filled.DarkMode" ToggledColor="Color.Warning" ToggledTitle="Dark" />
        
        <MudMenu Icon="@Icons.Material.Filled.Palette" Color="Color.Secondary">
            @foreach (var themeItem in simThemes.Keys)
            {
                <MudMenuItem OnClick="@(() => SetTheme(themeItem))">@themeItem</MudMenuItem>
            }
        </MudMenu>

        <MudIconButton Href="/guide" Icon="@Icons.Material.Filled.MenuBook" Color="Color.Secondary" />
    </MudAppBar>
    <MudDrawer @bind-Open="@drawerOpen" ClipMode="DrawerClipMode.Always" Variant="DrawerVariant.Responsive">
        <MudDrawerHeader>
            <MudText Color="Color.Tertiary" Typo="Typo.h5">SimTECH</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    MudTheme Theme { get; set; } = CustomThemes.GalacticTheme;

    bool drawerOpen = true;
    bool isDarkTheme = true;

    Dictionary<string, MudTheme> simThemes = CustomThemes.SimThemes;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {   
        if (firstRender)
        {
            var storedTheme = await _storage.GetAsync<string>("activeTheme");
            if (storedTheme.Success && storedTheme.Value != null && simThemes.ContainsKey(storedTheme.Value))
            {
                Theme = simThemes[storedTheme.Value];
                StateHasChanged();
            }
        }
    }

    private void ToggleSidebar() => drawerOpen = !drawerOpen;

    private async Task SetTheme(string themeName)
    {
        Theme = simThemes[themeName];
        await _storage.SetAsync("activeTheme", themeName);
    }
}