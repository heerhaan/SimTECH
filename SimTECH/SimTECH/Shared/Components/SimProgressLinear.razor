<div class="flat-linear-race-bar muted-background-primary" style="@_lineStyles">
    @foreach (var (bar, index) in Bars.WithIndex())
    {
        <span style="@(BarStyle(bar.Item1, bar.Item2))">
            @if (AddIndicator && (index % indicatorAdvanceSize == 0))
            {
                <MudText Typo="Typo.h5" Style="font-size: 0.75rem">
                    @(IndicatorText(1 + index))
                </MudText>
            }
        </span>
    }
</div>

@code {
    private const int indicatorAdvanceSize = 2; // change dependant on current AdvDis (re:10)

    [Parameter, EditorRequired] public List<(double, string)> Bars { get; set; }
    [Parameter] public bool AddIndicator { get; set; }
    [Parameter] public int CalculationDistance { get; set; }
    [Parameter] public double TrackLength { get; set; }
    [Parameter] public ElementSize LineSize { get; set; } = ElementSize.Small;

    private string _lineStyles
    {
        get
        {
            string lineSpacing = "height: ";

            switch (LineSize)
            {
                case ElementSize.Tiny:
                    lineSpacing += "4px"; break;
                case ElementSize.Small:
                    lineSpacing += "8px"; break;
                case ElementSize.Normal:
                    lineSpacing += "12px"; break;
                case ElementSize.Large:
                    lineSpacing += "16px"; break;
                default:
                    lineSpacing += "8px"; break;
            }

            return lineSpacing;
        }
    }

    private string BarStyle(double size, string colour)
    {
        return $"width: {size}%; background-color: {colour}";
    }

    private string IndicatorText(int advanceNum)
    {
        var lapNumber = NumberHelper.LapCount(advanceNum * CalculationDistance, TrackLength);
        return lapNumber.ToString();
    }
}
