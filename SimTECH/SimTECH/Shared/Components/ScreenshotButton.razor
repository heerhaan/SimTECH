@inject IJSRuntime JS

@if (IsIconButton)
{
    <MudTooltip Text="Take a screenshot" Placement="Placement.Top" Color="@Colour">
        <MudIconButton Variant="@Variant"
                       Icon="@Icons.Material.Filled.Image"
                       Color="@Colour"
                       Disabled="@IsDisabled"
                       OnClick="TakeScreenshot"
                       Class="@_classes"
                       Style="@_styles" />
    </MudTooltip>
}
else
{
    <MudButton Variant="@Variant"
               Color="@Colour"
               StartIcon="@(PostFixIcon ? null : Icons.Material.Filled.Image)"
               EndIcon="@(PostFixIcon ? Icons.Material.Filled.Image : null)"
               IconSize="@IconSize"
               FullWidth="@FullWidth"
               Disabled="@IsDisabled"
               OnClick="TakeScreenshot"
               Class="@_classes"
               Style="@_styles">
        <span>@ButtonText</span>
    </MudButton>
}

@code {
    [Parameter, EditorRequired]
    public string TargetId { get; set; }

    [Parameter]
    public Color Colour { get; set; } = Color.Inherit;

    [Parameter]
    public Variant Variant { get; set; } = Variant.Text;

    [Parameter]
    public Size IconSize { get; set; } = Size.Medium;

    [Parameter]
    public bool IsIconButton { get; set; }

    [Parameter]
    public bool PostFixIcon { get; set; }

    [Parameter]
    public bool FullWidth { get; set; } = false;

    [Parameter]
    public string Class { get; set; } = string.Empty;

    [Parameter]
    public string Styles { get; set; } = string.Empty;

    private bool IsDisabled { get; set; } = false;

    private string ButtonText { get; set; } = "Copy";

    private string _classes
    {
        get
        {
            return Class;
        }
    }

    private string _styles
    {
        get
        {
            return Styles;
        }
    }

    private async Task TakeScreenshot()
    {
        IsDisabled = true;

        await JS.InvokeVoidAsync("takeScreenshot", TargetId);

        // Notice how we don't await this bad boi? This runs the task while not halting the page
        // Doesnt change back so its cringe
        //ShowClicked();

        ButtonText = "Copied!";

        await Task.Delay(1500);

        ButtonText = "Copy";
        IsDisabled = false;

        StateHasChanged();
    }

    //async void ShowClicked()
    //{
    //    disabled = true;

    //    int secondsDelay = 3;

    //    while (secondsDelay > 0)
    //    {
    //        secondsDelay--;
    //        StateHasChanged();
    //        await Task.Delay(100);
    //    }

    //    disabled = false;
    //}
}
