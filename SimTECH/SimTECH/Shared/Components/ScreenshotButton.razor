@inject IJSRuntime JS

<MudButton Variant="Variant.Outlined"
           Color="@Colour"
           StartIcon="@Icons.Material.Filled.Image"
           FullWidth="@FullWidth"
           Disabled="@disabled"
           OnClick="TakeScreenshot"
           Class="@_classes"
           Style="@_styles">
    <span>@setText</span>
</MudButton>

@code {
    [Parameter, EditorRequired] public string TargetId { get; set; }
    [Parameter] public Color Colour { get; set; } = Color.Primary;
    [Parameter] public bool FullWidth { get; set; } = false;
    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter] public string Styles { get; set; } = string.Empty;

    private bool disabled = false;
    private string setText = "Copy";

    private async Task TakeScreenshot()
    {
        disabled = true;

        await JS.InvokeVoidAsync("takeScreenshot", TargetId);

        // Notice how we don't await this bad boi? This runs the task while not halting the page
        // Doesnt change back so its cringe
        //ShowClicked();

        setText = "Copied!";

        await Task.Delay(1500);

        setText = "Copy";
        disabled = false;

        StateHasChanged();
    }

    private string _classes
    {
        get
        {
            return Class;
        }
    }

    private string _styles
    {
        get
        {
            return Styles;
        }
    }

    //async void ShowClicked()
    //{
    //    disabled = true;

    //    int secondsDelay = 3;

    //    while (secondsDelay > 0)
    //    {
    //        secondsDelay--;
    //        StateHasChanged();
    //        await Task.Delay(100);
    //    }

    //    disabled = false;
    //}
}
