<MudContainer>
    @ChildContent
    <MudTable T="EditRangeModel" Items="@Items.OrderBy(e => e.Comparer)" Dense="true" Class="extra-dense">
        <ToolBarContent>
            <MudText Typo="Typo.h6">@_displayTitle</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Tertiary" Size="Size.Small" OnClick="AppendRow" />
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Less than</MudTh>
            <MudTh>Minimum</MudTh>
            <MudTh>Maximum</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Comparer">
                <MudNumericField @bind-Value="@context.Comparer" Class="field-xs" />
            </MudTd>
            <MudTd DataLabel="Minimum">
                <MudNumericField @bind-Value="@context.Minimum" Class="field-xs" />
            </MudTd>
            <MudTd DataLabel="Maximum">
                <MudNumericField @bind-Value="@context.Maximum" Class="field-xs" />
            </MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Outlined.Delete"
                               Color="Color.Error"
                               Size="Size.Small"
                               OnClick="@(() => RemoveRow(context))"/>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public IList<EditRangeModel> Items { get; set; } = new List<EditRangeModel>();
    [Parameter] public Aspect RangeType { get; set; }
    [Parameter] public string? Title { get; set; }

    private string _displayTitle
    {
        get
        {
            if (!string.IsNullOrEmpty(Title))
                return Title;

            return RangeType.ToString();
        }
    }

    private void AppendRow()
    {
        Items.Add(new EditRangeModel()
            {
                Type = RangeType,
                Comparer = 10,
                Minimum = -2,
                Maximum = 2
            });
    }

    private void RemoveRow(EditRangeModel item)
    {
        Items.Remove(item);
    }
}
