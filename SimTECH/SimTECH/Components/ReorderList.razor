@* NOTE: goal is to use this in a generic way, not sure yet though how to pass any list and handle it generically *@

<div>
    <ul ondragover="event.preventDefault();" ondragstart="event.dataTransfer.setData('', event.target.id);">
	    @foreach (var item in DragModels.OrderBy(x => x.Order))
	    {
		    <li @ondrop="()=>HandleDrop(item)" @key="item">
			    <div @ondragleave="@(()=> {item.IsDragOver = false;})"
				    @ondragenter="@(()=>{item.IsDragOver = true;})"
				    style="@(item.IsDragOver?"border-style: solid none none none; border-color:red;":"")"
				    @ondragstart="() => draggingModel = item"
				    @ondragend="()=> draggingModel = null" draggable="true">@item.Name [@item.Order]</div>
		    </li>
	    }
    </ul>
</div>

@code {
    public List<TempDragModel> DragModels { get; set; } = new();

    protected override void OnInitialized()
    {
        for (var i = 0; i < 10; i++)
        {
            TempDragModel m = new() { Order = i, Name = $"Item {i}" };
            DragModels.Add(m);
        }
        base.OnInitialized();
    }

    public class TempDragModel
    {
        public int Order { get; set; }
        public string Name { get; set; } = "";
        public bool IsDragOver { get; set; }
    }

    private void HandleDrop(TempDragModel landingModel)
    {//landing model -> where the drop happened
        if (draggingModel is null)
            return;

        int originalOrderLanding = landingModel.Order;//keep the original order for later

        //increase model under by 1
        DragModels
            .Where(x => x.Order >= landingModel.Order)
            .ToList()
            .ForEach(x => x.Order++);
        
        draggingModel.Order = originalOrderLanding;//replace landing model
        
        int ii = 0;
        foreach (var model in DragModels.OrderBy(x => x.Order).ToList())
        {
            model.Order = ii++;//keep the numbers from 0 to size-1
            model.IsDragOver = false;//remove drag over.
        }
    }

    private TempDragModel? draggingModel;//the model that is being dragged
}
