// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimTECH.Data;

#nullable disable

namespace SimTECH.Migrations
{
    [DbContext(typeof(SimTechDbContext))]
    partial class SimTechDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("SimTECH.Data.Models.Climate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Colour")
                        .HasMaxLength(9)
                        .HasColumnType("TEXT");

                    b.Property<double>("EngineMultiplier")
                        .HasColumnType("REAL");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsWet")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Odds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReliablityModifier")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RngModifier")
                        .HasColumnType("INTEGER");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Terminology")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Climate");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EngineMultiplier = 1.1000000000000001,
                            Icon = "<path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M6.76 4.84l-1.8-1.79-1.41 1.41 1.79 1.79 1.42-1.41zM4 10.5H1v2h3v-2zm9-9.95h-2V3.5h2V.55zm7.45 3.91l-1.41-1.41-1.79 1.79 1.41 1.41 1.79-1.79zm-3.21 13.7l1.79 1.8 1.41-1.41-1.8-1.79-1.4 1.4zM20 10.5v2h3v-2h-3zm-8-5c-3.31 0-6 2.69-6 6s2.69 6 6 6 6-2.69 6-6-2.69-6-6-6zm-1 16.95h2V19.5h-2v2.95zm-7.45-3.91l1.41 1.41 1.79-1.8-1.41-1.41-1.79 1.8z\"/>",
                            IsWet = false,
                            Odds = 3,
                            ReliablityModifier = 0,
                            RngModifier = 0,
                            State = 1,
                            Terminology = "Sunny"
                        },
                        new
                        {
                            Id = 2L,
                            EngineMultiplier = 0.90000000000000002,
                            Icon = "<path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96z\"/>",
                            IsWet = false,
                            Odds = 3,
                            ReliablityModifier = 0,
                            RngModifier = 0,
                            State = 1,
                            Terminology = "Overcast"
                        },
                        new
                        {
                            Id = 3L,
                            EngineMultiplier = 0.75,
                            Icon = "<path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96z\"/>",
                            IsWet = false,
                            Odds = 1,
                            ReliablityModifier = 0,
                            RngModifier = 0,
                            State = 1,
                            Terminology = "Rain"
                        });
                });

            modelBuilder.Entity("SimTECH.Data.Models.Contract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("DriverId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LeagueId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("TeamId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("SimTECH.Data.Models.DevelopmentLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AfterRound")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Change")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DevelopedAspect")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntrantGroup")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntrantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Initial")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SeasonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("DevelopmentLog");
                });

            modelBuilder.Entity("SimTECH.Data.Models.DevelopmentRange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Comparer")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LeagueId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Maximum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Minimum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("DevelopmentRange");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Driver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Country")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("Mark")
                        .HasColumnType("INTEGER");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StrategyPreference")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("SimTECH.Data.Models.DriverTrait", b =>
                {
                    b.Property<long>("DriverId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TraitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DriverId", "TraitId");

                    b.HasIndex("TraitId");

                    b.ToTable("DriverTrait");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Engine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Accent")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(9)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("#000000ff")
                        .IsFixedLength();

                    b.Property<string>("Colour")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(9)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("#ffffffff")
                        .IsFixedLength();

                    b.Property<bool>("Mark")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Engine");
                });

            modelBuilder.Entity("SimTECH.Data.Models.GivenPenalty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Consumed")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ConsumedAtRaceId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("IncidentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SeasonDriverId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId");

                    b.HasIndex("SeasonDriverId");

                    b.ToTable("GivenPenalty");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Incident", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Colour")
                        .HasMaxLength(9)
                        .HasColumnType("TEXT");

                    b.Property<int>("Limit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Odds")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Penalized")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Punishment")
                        .HasColumnType("INTEGER");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Incident");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Category = 0,
                            Limit = 0,
                            Name = "Damage",
                            Odds = 2,
                            Penalized = false,
                            Punishment = 0,
                            State = 1
                        },
                        new
                        {
                            Id = 2L,
                            Category = 0,
                            Limit = 2,
                            Name = "Collision",
                            Odds = 1,
                            Penalized = true,
                            Punishment = 3,
                            State = 1
                        },
                        new
                        {
                            Id = 3L,
                            Category = 0,
                            Limit = 5,
                            Name = "Accident",
                            Odds = 2,
                            Penalized = true,
                            Punishment = 3,
                            State = 1
                        },
                        new
                        {
                            Id = 4L,
                            Category = 0,
                            Limit = 0,
                            Name = "Puncture",
                            Odds = 1,
                            Penalized = false,
                            Punishment = 0,
                            State = 1
                        },
                        new
                        {
                            Id = 5L,
                            Category = 2,
                            Limit = 5,
                            Name = "Engine",
                            Odds = 3,
                            Penalized = true,
                            Punishment = 10,
                            State = 1
                        },
                        new
                        {
                            Id = 6L,
                            Category = 1,
                            Limit = 3,
                            Name = "Electrics",
                            Odds = 1,
                            Penalized = true,
                            Punishment = 5,
                            State = 1
                        },
                        new
                        {
                            Id = 7L,
                            Category = 1,
                            Limit = 0,
                            Name = "Exhaust",
                            Odds = 1,
                            Penalized = false,
                            Punishment = 0,
                            State = 1
                        },
                        new
                        {
                            Id = 8L,
                            Category = 1,
                            Limit = 4,
                            Name = "Gearbox",
                            Odds = 2,
                            Penalized = true,
                            Punishment = 5,
                            State = 1
                        },
                        new
                        {
                            Id = 9L,
                            Category = 1,
                            Limit = 0,
                            Name = "Hydraulics",
                            Odds = 1,
                            Penalized = false,
                            Punishment = 0,
                            State = 1
                        },
                        new
                        {
                            Id = 10L,
                            Category = 1,
                            Limit = 0,
                            Name = "Wheel",
                            Odds = 1,
                            Penalized = false,
                            Punishment = 0,
                            State = 1
                        },
                        new
                        {
                            Id = 11L,
                            Category = 1,
                            Limit = 0,
                            Name = "Brakes",
                            Odds = 1,
                            Penalized = false,
                            Punishment = 0,
                            State = 1
                        },
                        new
                        {
                            Id = 12L,
                            Category = 3,
                            Limit = 0,
                            Name = "Illegal",
                            Odds = 1,
                            Penalized = true,
                            Punishment = 10,
                            State = 1
                        },
                        new
                        {
                            Id = 13L,
                            Category = 3,
                            Limit = 0,
                            Name = "Fuel",
                            Odds = 1,
                            Penalized = true,
                            Punishment = 10,
                            State = 1
                        },
                        new
                        {
                            Id = 14L,
                            Category = 3,
                            Limit = 0,
                            Name = "Dangerous",
                            Odds = 1,
                            Penalized = true,
                            Punishment = 10,
                            State = 1
                        },
                        new
                        {
                            Id = 15L,
                            Category = 4,
                            Limit = 0,
                            Name = "Hospital",
                            Odds = 5,
                            Penalized = false,
                            Punishment = 0,
                            State = 1
                        },
                        new
                        {
                            Id = 16L,
                            Category = 4,
                            Limit = 0,
                            Name = "Death",
                            Odds = 1,
                            Penalized = false,
                            Punishment = 0,
                            State = 1
                        });
                });

            modelBuilder.Entity("SimTECH.Data.Models.LapScore", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RacerEvents")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ResultId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TyreColour")
                        .HasMaxLength(9)
                        .HasColumnType("TEXT")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.ToTable("LapScore");
                });

            modelBuilder.Entity("SimTECH.Data.Models.League", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BattleRng")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DisqualificationOdds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DriverStatusPaceModifier")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FatalityOdds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Options")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RaceLength")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SafetyCarGap")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SafetyCarGapCloser")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SafetyCarOdds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SafetyCarReturnOdds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SetupRng")
                        .HasColumnType("INTEGER");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("League");
                });

            modelBuilder.Entity("SimTECH.Data.Models.LeagueTyre", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TyreId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LeagueId", "TyreId");

                    b.HasIndex("TyreId");

                    b.ToTable("LeagueTyre");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Manufacturer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Accent")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("TEXT")
                        .IsFixedLength();

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("TEXT")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Pace")
                        .HasColumnType("INTEGER");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WearMax")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WearMin")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Manufacturer");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Accent = "#e56103",
                            Colour = "#0b0b0d",
                            Name = "Hankook",
                            Pace = 0,
                            State = 1,
                            WearMax = 0,
                            WearMin = 0
                        });
                });

            modelBuilder.Entity("SimTECH.Data.Models.PointAllotment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SeasonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("PointAllotment");
                });

            modelBuilder.Entity("SimTECH.Data.Models.PracticeScore", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AbsolutePosition")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RaceId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ResultId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Scores")
                        .HasColumnType("TEXT");

                    b.Property<int>("SetupGained")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.ToTable("PracticeScore");
                });

            modelBuilder.Entity("SimTECH.Data.Models.QualifyingScore", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AbsolutePosition")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RaceId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ResultId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Scores")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.ToTable("QualifyingScore");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Race", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ClimateId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateFinished")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RaceLength")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Round")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TrackId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClimateId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TrackId");

                    b.ToTable("Race");
                });

            modelBuilder.Entity("SimTECH.Data.Models.RaceClass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("TEXT")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("SeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("RaceClass");
                });

            modelBuilder.Entity("SimTECH.Data.Models.RaceOccurrence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Occurrences")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RaceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("RaceOccurrence");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Result", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AbsoluteGrid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AbsolutePosition")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Defended")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FastestLap")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Grid")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("IncidentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Overtaken")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SeasonDriverId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SeasonTeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Setup")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TyreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TyreLife")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId");

                    b.HasIndex("RaceId");

                    b.HasIndex("SeasonDriverId");

                    b.HasIndex("SeasonTeamId");

                    b.HasIndex("TyreId");

                    b.ToTable("Result");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Season", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GridBonus")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LeagueId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaximumDriversInRace")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MistakeMaximum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MistakeMinimum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MistakeRolls")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PitCostSubtractCaution")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PitMaximum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PitMinimum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PointsFastestLap")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PointsPole")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QualifyingAmountQ2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QualifyingAmountQ3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QualifyingFormat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("QualifyingRNG")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RngMaximum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RngMinimum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RunAmountSession")
                        .HasColumnType("INTEGER");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("Season");
                });

            modelBuilder.Entity("SimTECH.Data.Models.SeasonDriver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Defense")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DriverId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("HiddenPoints")
                        .HasColumnType("REAL");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Reliability")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SeasonTeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Skill")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamRole")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SeasonTeamId");

                    b.ToTable("SeasonDriver");
                });

            modelBuilder.Entity("SimTECH.Data.Models.SeasonEngine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("EngineId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Power")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Rebadged")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Reliability")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SeasonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EngineId");

                    b.HasIndex("SeasonId");

                    b.ToTable("SeasonEngine");
                });

            modelBuilder.Entity("SimTECH.Data.Models.SeasonTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Accent")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("TEXT")
                        .IsFixedLength();

                    b.Property<int>("Aero")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Chassis")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("TEXT")
                        .IsFixedLength();

                    b.Property<double>("HiddenPoints")
                        .HasColumnType("REAL");

                    b.Property<long>("ManufacturerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Powertrain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Principal")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Reliability")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SeasonEngineId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("SeasonEngineId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("SeasonTeam");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Sponsor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Name")
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Sponsor");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Country")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<bool>("Mark")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("SimTECH.Data.Models.TeamTrait", b =>
                {
                    b.Property<long>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TraitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeamId", "TraitId");

                    b.HasIndex("TraitId");

                    b.ToTable("TeamTrait");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Track", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AeroMod")
                        .HasColumnType("REAL");

                    b.Property<double>("ChassisMod")
                        .HasColumnType("REAL");

                    b.Property<int>("Country")
                        .HasColumnType("INTEGER");

                    b.Property<double>("DefenseMod")
                        .HasColumnType("REAL");

                    b.Property<double>("Length")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("PowerMod")
                        .HasColumnType("REAL");

                    b.Property<double>("QualifyingMod")
                        .HasColumnType("REAL");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Track");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AeroMod = 0.55000000000000004,
                            ChassisMod = 1.1000000000000001,
                            Country = 22,
                            DefenseMod = 0.90000000000000002,
                            Length = 7.0099999999999998,
                            Name = "Spa-Francorchamps",
                            PowerMod = 1.3500000000000001,
                            QualifyingMod = 0.69999999999999996,
                            State = 1
                        },
                        new
                        {
                            Id = 2L,
                            AeroMod = 1.5,
                            ChassisMod = 1.25,
                            Country = 131,
                            DefenseMod = 2.0,
                            Length = 3.0499999999999998,
                            Name = "Circuit de Monaco",
                            PowerMod = 0.5,
                            QualifyingMod = 2.0,
                            State = 1
                        },
                        new
                        {
                            Id = 3L,
                            AeroMod = 0.84999999999999998,
                            ChassisMod = 1.05,
                            Country = 32,
                            DefenseMod = 0.80000000000000004,
                            Length = 4.3099999999999996,
                            Name = "Autodromo de Interlagos",
                            PowerMod = 1.1000000000000001,
                            QualifyingMod = 0.90000000000000002,
                            State = 1
                        },
                        new
                        {
                            Id = 4L,
                            AeroMod = 0.94999999999999996,
                            ChassisMod = 1.1000000000000001,
                            Country = 157,
                            DefenseMod = 1.3,
                            Length = 4.5499999999999998,
                            Name = "TT Assen",
                            PowerMod = 0.94999999999999996,
                            QualifyingMod = 1.1000000000000001,
                            State = 1
                        },
                        new
                        {
                            Id = 5L,
                            AeroMod = 1.05,
                            ChassisMod = 0.90000000000000002,
                            Country = 112,
                            DefenseMod = 0.66000000000000003,
                            Length = 5.9900000000000002,
                            Name = "Fuji Speedway",
                            PowerMod = 1.05,
                            QualifyingMod = 0.90000000000000002,
                            State = 1
                        },
                        new
                        {
                            Id = 6L,
                            AeroMod = 1.05,
                            ChassisMod = 0.94999999999999996,
                            Country = 15,
                            DefenseMod = 1.0,
                            Length = 4.3300000000000001,
                            Name = "Österreichring",
                            PowerMod = 1.1000000000000001,
                            QualifyingMod = 0.80000000000000004,
                            State = 1
                        },
                        new
                        {
                            Id = 7L,
                            AeroMod = 0.80000000000000004,
                            ChassisMod = 0.75,
                            Country = 110,
                            DefenseMod = 1.2,
                            Length = 5.79,
                            Name = "Autodromo Nazionale di Monza",
                            PowerMod = 1.25,
                            QualifyingMod = 1.2,
                            State = 1
                        },
                        new
                        {
                            Id = 8L,
                            AeroMod = 1.1000000000000001,
                            ChassisMod = 0.90000000000000002,
                            Country = 145,
                            DefenseMod = 0.90000000000000002,
                            Length = 5.54,
                            Name = "Sepang",
                            PowerMod = 1.1000000000000001,
                            QualifyingMod = 1.0,
                            State = 1
                        });
                });

            modelBuilder.Entity("SimTECH.Data.Models.TrackTrait", b =>
                {
                    b.Property<long>("TrackId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TraitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TrackId", "TraitId");

                    b.HasIndex("TraitId");

                    b.ToTable("TrackTrait");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Trait", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarReliability")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Defense")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DriverReliability")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EngineReliability")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ForWetConditions")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("QualifyingPace")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RacePace")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RngMax")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RngMin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WearMax")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WearMin")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Trait");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Attack = 0,
                            CarReliability = 0,
                            Defense = 0,
                            Description = "Faster when it's wet",
                            DriverReliability = 3,
                            EngineReliability = 0,
                            ForWetConditions = true,
                            Name = "Rainmeister",
                            QualifyingPace = 3,
                            RacePace = 5,
                            RngMax = 0,
                            RngMin = 0,
                            State = 0,
                            Type = 1,
                            WearMax = 0,
                            WearMin = 0
                        },
                        new
                        {
                            Id = 2L,
                            Attack = 0,
                            CarReliability = 0,
                            Defense = 0,
                            Description = "Owns the engine",
                            DriverReliability = 0,
                            EngineReliability = 2,
                            ForWetConditions = false,
                            Name = "Manufacturer",
                            QualifyingPace = 1,
                            RacePace = 1,
                            RngMax = 0,
                            RngMin = 0,
                            State = 0,
                            Type = 2,
                            WearMax = 0,
                            WearMin = 0
                        },
                        new
                        {
                            Id = 3L,
                            Attack = 0,
                            CarReliability = -1,
                            Defense = 10,
                            Description = "Street is a circuit",
                            DriverReliability = -2,
                            EngineReliability = 0,
                            ForWetConditions = false,
                            Name = "Street Circuit",
                            QualifyingPace = 0,
                            RacePace = 0,
                            RngMax = 0,
                            RngMin = -5,
                            State = 0,
                            Type = 3,
                            WearMax = 2,
                            WearMin = 0
                        });
                });

            modelBuilder.Entity("SimTECH.Data.Models.Tyre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("TEXT")
                        .IsFixedLength();

                    b.Property<int>("DistanceMax")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DistanceMin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ForWet")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinimumLife")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Pace")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PitWhenBelow")
                        .HasColumnType("INTEGER");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WearMax")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WearMin")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Tyre");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Colour = "#fa0536ff",
                            DistanceMax = 125,
                            DistanceMin = 50,
                            ForWet = false,
                            MinimumLife = -25,
                            Name = "Soft",
                            Pace = 200,
                            PitWhenBelow = 20,
                            State = 1,
                            WearMax = 25,
                            WearMin = 15
                        },
                        new
                        {
                            Id = 2L,
                            Colour = "#f4ea26ff",
                            DistanceMax = 999,
                            DistanceMin = 125,
                            ForWet = false,
                            MinimumLife = -25,
                            Name = "Medium",
                            Pace = 180,
                            PitWhenBelow = 15,
                            State = 1,
                            WearMax = 15,
                            WearMin = 9
                        },
                        new
                        {
                            Id = 3L,
                            Colour = "#dfdde9ff",
                            DistanceMax = 999,
                            DistanceMin = 175,
                            ForWet = false,
                            MinimumLife = -25,
                            Name = "Hard",
                            Pace = 160,
                            PitWhenBelow = 10,
                            State = 1,
                            WearMax = 10,
                            WearMin = 6
                        },
                        new
                        {
                            Id = 4L,
                            Colour = "#bded80ff",
                            DistanceMax = 999,
                            DistanceMin = 100,
                            ForWet = false,
                            MinimumLife = -25,
                            Name = "Grooved",
                            Pace = 100,
                            PitWhenBelow = 0,
                            State = 2,
                            WearMax = 3,
                            WearMin = 1
                        },
                        new
                        {
                            Id = 5L,
                            Colour = "#3399ffff",
                            DistanceMax = 999,
                            DistanceMin = 50,
                            ForWet = true,
                            MinimumLife = -25,
                            Name = "Wet",
                            Pace = 50,
                            PitWhenBelow = 0,
                            State = 1,
                            WearMax = 1,
                            WearMin = 0
                        });
                });

            modelBuilder.Entity("SimTECH.Data.Models.Contract", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Driver", "Driver")
                        .WithMany("Contracts")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.League", "League")
                        .WithMany("Contracts")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Team", "Team")
                        .WithMany("Contracts")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("League");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SimTECH.Data.Models.DevelopmentLog", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("SimTECH.Data.Models.DevelopmentRange", b =>
                {
                    b.HasOne("SimTECH.Data.Models.League", "League")
                        .WithMany("DevelopmentRanges")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("SimTECH.Data.Models.DriverTrait", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Driver", "Driver")
                        .WithMany("DriverTraits")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Trait", "Trait")
                        .WithMany("DriverTraits")
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("SimTECH.Data.Models.GivenPenalty", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Incident", "Incident")
                        .WithMany()
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.SeasonDriver", "SeasonDriver")
                        .WithMany("GivenPenalties")
                        .HasForeignKey("SeasonDriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");

                    b.Navigation("SeasonDriver");
                });

            modelBuilder.Entity("SimTECH.Data.Models.LapScore", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Result", "Result")
                        .WithMany("LapScores")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Result");
                });

            modelBuilder.Entity("SimTECH.Data.Models.LeagueTyre", b =>
                {
                    b.HasOne("SimTECH.Data.Models.League", "League")
                        .WithMany("LeagueTyres")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Tyre", "Tyre")
                        .WithMany("LeagueTyres")
                        .HasForeignKey("TyreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("Tyre");
                });

            modelBuilder.Entity("SimTECH.Data.Models.PointAllotment", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Season", null)
                        .WithMany("PointAllotments")
                        .HasForeignKey("SeasonId");
                });

            modelBuilder.Entity("SimTECH.Data.Models.PracticeScore", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Result", "Result")
                        .WithMany("PracticeScores")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Result");
                });

            modelBuilder.Entity("SimTECH.Data.Models.QualifyingScore", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Result", "Result")
                        .WithMany("QualifyingScores")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Result");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Race", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Climate", "Climate")
                        .WithMany()
                        .HasForeignKey("ClimateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Season", "Season")
                        .WithMany("Races")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Track", "Track")
                        .WithMany("Races")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Climate");

                    b.Navigation("Season");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("SimTECH.Data.Models.RaceClass", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Season", "Season")
                        .WithMany("RaceClasses")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("SimTECH.Data.Models.RaceOccurrence", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Race", "Race")
                        .WithMany("Occurrences")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Result", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Incident", "Incident")
                        .WithMany()
                        .HasForeignKey("IncidentId");

                    b.HasOne("SimTECH.Data.Models.Race", "Race")
                        .WithMany("Results")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.SeasonDriver", "SeasonDriver")
                        .WithMany("Results")
                        .HasForeignKey("SeasonDriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.SeasonTeam", "SeasonTeam")
                        .WithMany("Results")
                        .HasForeignKey("SeasonTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Tyre", "Tyre")
                        .WithMany()
                        .HasForeignKey("TyreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");

                    b.Navigation("Race");

                    b.Navigation("SeasonDriver");

                    b.Navigation("SeasonTeam");

                    b.Navigation("Tyre");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Season", b =>
                {
                    b.HasOne("SimTECH.Data.Models.League", "League")
                        .WithMany("Seasons")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("SimTECH.Data.Models.SeasonDriver", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Driver", "Driver")
                        .WithMany("SeasonDrivers")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Season", "Season")
                        .WithMany("SeasonDrivers")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.SeasonTeam", "SeasonTeam")
                        .WithMany("SeasonDrivers")
                        .HasForeignKey("SeasonTeamId");

                    b.Navigation("Driver");

                    b.Navigation("Season");

                    b.Navigation("SeasonTeam");
                });

            modelBuilder.Entity("SimTECH.Data.Models.SeasonEngine", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Engine", "Engine")
                        .WithMany("SeasonEngines")
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Season", "Season")
                        .WithMany("SeasonEngines")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Engine");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("SimTECH.Data.Models.SeasonTeam", b =>
                {
                    b.HasOne("SimTECH.Data.Models.RaceClass", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("SimTECH.Data.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.SeasonEngine", "SeasonEngine")
                        .WithMany("SeasonTeams")
                        .HasForeignKey("SeasonEngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Season", "Season")
                        .WithMany("SeasonTeams")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Team", "Team")
                        .WithMany("SeasonTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Manufacturer");

                    b.Navigation("Season");

                    b.Navigation("SeasonEngine");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SimTECH.Data.Models.TeamTrait", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Team", "Team")
                        .WithMany("TeamTraits")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Trait", "Trait")
                        .WithMany("TeamTraits")
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("SimTECH.Data.Models.TrackTrait", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Track", "Track")
                        .WithMany("TrackTraits")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Trait", "Trait")
                        .WithMany("TrackTraits")
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Driver", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("DriverTraits");

                    b.Navigation("SeasonDrivers");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Engine", b =>
                {
                    b.Navigation("SeasonEngines");
                });

            modelBuilder.Entity("SimTECH.Data.Models.League", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("DevelopmentRanges");

                    b.Navigation("LeagueTyres");

                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Race", b =>
                {
                    b.Navigation("Occurrences");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Result", b =>
                {
                    b.Navigation("LapScores");

                    b.Navigation("PracticeScores");

                    b.Navigation("QualifyingScores");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Season", b =>
                {
                    b.Navigation("PointAllotments");

                    b.Navigation("RaceClasses");

                    b.Navigation("Races");

                    b.Navigation("SeasonDrivers");

                    b.Navigation("SeasonEngines");

                    b.Navigation("SeasonTeams");
                });

            modelBuilder.Entity("SimTECH.Data.Models.SeasonDriver", b =>
                {
                    b.Navigation("GivenPenalties");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("SimTECH.Data.Models.SeasonEngine", b =>
                {
                    b.Navigation("SeasonTeams");
                });

            modelBuilder.Entity("SimTECH.Data.Models.SeasonTeam", b =>
                {
                    b.Navigation("Results");

                    b.Navigation("SeasonDrivers");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Team", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("SeasonTeams");

                    b.Navigation("TeamTraits");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Track", b =>
                {
                    b.Navigation("Races");

                    b.Navigation("TrackTraits");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Trait", b =>
                {
                    b.Navigation("DriverTraits");

                    b.Navigation("TeamTraits");

                    b.Navigation("TrackTraits");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Tyre", b =>
                {
                    b.Navigation("LeagueTyres");
                });
#pragma warning restore 612, 618
        }
    }
}
