// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimTECH.Data;

#nullable disable

namespace SimTECH.Migrations
{
    [DbContext(typeof(SimTechDbContext))]
    partial class SimTechDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SimTECH.Data.Models.Contract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("DriverId")
                        .HasColumnType("bigint");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("TeamId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("SimTECH.Data.Models.DevelopmentRange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Comparer")
                        .HasColumnType("int");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<int>("Maximum")
                        .HasColumnType("int");

                    b.Property<int>("Minimum")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("DevelopmentRange");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Driver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("SimTECH.Data.Models.DriverTrait", b =>
                {
                    b.Property<long>("DriverId")
                        .HasColumnType("bigint");

                    b.Property<long>("TraitId")
                        .HasColumnType("bigint");

                    b.HasKey("DriverId", "TraitId");

                    b.HasIndex("TraitId");

                    b.ToTable("DriverTrait");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Engine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Engine");
                });

            modelBuilder.Entity("SimTECH.Data.Models.League", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("League");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Manufacturer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Accent")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nchar(9)")
                        .IsFixedLength();

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nchar(9)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Pace")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("WearMax")
                        .HasColumnType("int");

                    b.Property<int>("WearMin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Penalty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Punishment")
                        .HasColumnType("int");

                    b.Property<long>("RaceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<long>("SeasonDriverId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.HasIndex("SeasonDriverId");

                    b.ToTable("Penalty");
                });

            modelBuilder.Entity("SimTECH.Data.Models.PointAllotment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<long?>("SeasonId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("PointAllotment");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Race", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<long>("TrackId")
                        .HasColumnType("bigint");

                    b.Property<int>("Weather")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TrackId");

                    b.ToTable("Race");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Result", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Grid")
                        .HasColumnType("int");

                    b.Property<int>("Incident")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<long>("RaceId")
                        .HasColumnType("bigint");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<long>("SeasonDriverId")
                        .HasColumnType("bigint");

                    b.Property<int>("Setup")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("StrategyId")
                        .HasColumnType("bigint");

                    b.Property<int>("TyreLife")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.HasIndex("SeasonDriverId");

                    b.HasIndex("StrategyId");

                    b.ToTable("Result");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Season", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("GridBonus")
                        .HasColumnType("int");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<int>("MaximumDriversInRace")
                        .HasColumnType("int");

                    b.Property<int>("PitMaximum")
                        .HasColumnType("int");

                    b.Property<int>("PitMinimum")
                        .HasColumnType("int");

                    b.Property<int>("PointsFastestLap")
                        .HasColumnType("int");

                    b.Property<int>("PointsPole")
                        .HasColumnType("int");

                    b.Property<int>("QualifyingAmountQ2")
                        .HasColumnType("int");

                    b.Property<int>("QualifyingAmountQ3")
                        .HasColumnType("int");

                    b.Property<int>("QualifyingRNG")
                        .HasColumnType("int");

                    b.Property<int>("RunAmountSession")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("Season");
                });

            modelBuilder.Entity("SimTECH.Data.Models.SeasonDriver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("DriverId")
                        .HasColumnType("bigint");

                    b.Property<int>("HiddenPoints")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Reliability")
                        .HasColumnType("int");

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<long>("SeasonTeamId")
                        .HasColumnType("bigint");

                    b.Property<int>("Skill")
                        .HasColumnType("int");

                    b.Property<int>("TeamRole")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SeasonTeamId");

                    b.ToTable("SeasonDriver");
                });

            modelBuilder.Entity("SimTECH.Data.Models.SeasonEngine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("EngineId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.Property<bool>("Rebadged")
                        .HasColumnType("bit");

                    b.Property<int>("Reliability")
                        .HasColumnType("int");

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EngineId");

                    b.HasIndex("SeasonId");

                    b.ToTable("SeasonEngine");
                });

            modelBuilder.Entity("SimTECH.Data.Models.SeasonTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Accent")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nchar(9)")
                        .IsFixedLength();

                    b.Property<int>("Aero")
                        .HasColumnType("int");

                    b.Property<int>("BaseValue")
                        .HasColumnType("int");

                    b.Property<int>("Chassis")
                        .HasColumnType("int");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nchar(9)")
                        .IsFixedLength();

                    b.Property<int>("HiddenPoints")
                        .HasColumnType("int");

                    b.Property<long>("ManufacturerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Powertrain")
                        .HasColumnType("int");

                    b.Property<string>("Principal")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Reliability")
                        .HasColumnType("int");

                    b.Property<long>("SeasonEngineId")
                        .HasColumnType("bigint");

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("SeasonEngineId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("SeasonTeam");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Sponsor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sponsor");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Stint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<long>("RaceId")
                        .HasColumnType("bigint");

                    b.Property<int>("RngMax")
                        .HasColumnType("int");

                    b.Property<int>("RngMin")
                        .HasColumnType("int");

                    b.Property<int>("StintEvents")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("Stint");
                });

            modelBuilder.Entity("SimTECH.Data.Models.StintResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("RacerEvents")
                        .HasColumnType("int");

                    b.Property<long>("ResultId")
                        .HasColumnType("bigint");

                    b.Property<long>("StintId")
                        .HasColumnType("bigint");

                    b.Property<int>("StintScore")
                        .HasColumnType("int");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.HasIndex("StintId");

                    b.ToTable("StintResult");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Strategy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("StintLength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Strategy");
                });

            modelBuilder.Entity("SimTECH.Data.Models.StrategyTyre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("NumberStint")
                        .HasColumnType("int");

                    b.Property<long>("StrategyId")
                        .HasColumnType("bigint");

                    b.Property<long>("TyreId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StrategyId");

                    b.HasIndex("TyreId");

                    b.ToTable("StrategyTyre");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("SimTECH.Data.Models.TeamTrait", b =>
                {
                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("TraitId")
                        .HasColumnType("bigint");

                    b.HasKey("TeamId", "TraitId");

                    b.HasIndex("TraitId");

                    b.ToTable("TeamTrait");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Track", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("AeroMod")
                        .HasColumnType("float");

                    b.Property<double>("ChassisMod")
                        .HasColumnType("float");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PowerMod")
                        .HasColumnType("float");

                    b.Property<double>("QualifyingMod")
                        .HasColumnType("float");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Track");
                });

            modelBuilder.Entity("SimTECH.Data.Models.TrackTrait", b =>
                {
                    b.Property<long>("TrackId")
                        .HasColumnType("bigint");

                    b.Property<long>("TraitId")
                        .HasColumnType("bigint");

                    b.HasKey("TrackId", "TraitId");

                    b.HasIndex("TraitId");

                    b.ToTable("TrackTrait");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Trait", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CarPace")
                        .HasColumnType("int");

                    b.Property<int>("CarReliability")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DriverPace")
                        .HasColumnType("int");

                    b.Property<int>("DriverReliability")
                        .HasColumnType("int");

                    b.Property<int>("EnginePace")
                        .HasColumnType("int");

                    b.Property<int>("EngineReliability")
                        .HasColumnType("int");

                    b.Property<bool>("ForWetConditions")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("QualifyingPace")
                        .HasColumnType("int");

                    b.Property<int>("RngMax")
                        .HasColumnType("int");

                    b.Property<int>("RngMin")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("WearMax")
                        .HasColumnType("int");

                    b.Property<int>("WearMin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Trait");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Tyre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nchar(9)")
                        .IsFixedLength();

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Pace")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("WearMax")
                        .HasColumnType("int");

                    b.Property<int>("WearMin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tyre");
                });

            modelBuilder.Entity("SimTECH.Data.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Contract", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Driver", "Driver")
                        .WithMany("Contracts")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.League", "League")
                        .WithMany("Contracts")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Team", "Team")
                        .WithMany("Contracts")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("League");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SimTECH.Data.Models.DevelopmentRange", b =>
                {
                    b.HasOne("SimTECH.Data.Models.League", "League")
                        .WithMany("DevelopmentRanges")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("SimTECH.Data.Models.DriverTrait", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Driver", "Driver")
                        .WithMany("DriverTraits")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Trait", "Trait")
                        .WithMany("DriverTraits")
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Penalty", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Race", "Race")
                        .WithMany("Penalties")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.SeasonDriver", "SeasonDriver")
                        .WithMany()
                        .HasForeignKey("SeasonDriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");

                    b.Navigation("SeasonDriver");
                });

            modelBuilder.Entity("SimTECH.Data.Models.PointAllotment", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Season", null)
                        .WithMany("PointAllotments")
                        .HasForeignKey("SeasonId");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Race", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Season", "Season")
                        .WithMany("Races")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Track", "Track")
                        .WithMany("Races")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Result", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Race", "Race")
                        .WithMany("Results")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.SeasonDriver", "SeasonDriver")
                        .WithMany("RaceResults")
                        .HasForeignKey("SeasonDriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Strategy", "Strategy")
                        .WithMany()
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");

                    b.Navigation("SeasonDriver");

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Season", b =>
                {
                    b.HasOne("SimTECH.Data.Models.League", "League")
                        .WithMany("Seasons")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("SimTECH.Data.Models.SeasonDriver", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Driver", "Driver")
                        .WithMany("SeasonDrivers")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Season", "Season")
                        .WithMany("SeasonDrivers")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.SeasonTeam", "SeasonTeam")
                        .WithMany("SeasonDrivers")
                        .HasForeignKey("SeasonTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Season");

                    b.Navigation("SeasonTeam");
                });

            modelBuilder.Entity("SimTECH.Data.Models.SeasonEngine", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Engine", "Engine")
                        .WithMany("SeasonEngines")
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Season", "Season")
                        .WithMany("SeasonEngines")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Engine");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("SimTECH.Data.Models.SeasonTeam", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.SeasonEngine", "SeasonEngine")
                        .WithMany("SeasonTeams")
                        .HasForeignKey("SeasonEngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Season", "Season")
                        .WithMany("SeasonTeams")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Team", "Team")
                        .WithMany("SeasonTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("Season");

                    b.Navigation("SeasonEngine");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Stint", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Race", "Race")
                        .WithMany("Stints")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");
                });

            modelBuilder.Entity("SimTECH.Data.Models.StintResult", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Result", "Result")
                        .WithMany("StintResults")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Stint", "Stint")
                        .WithMany("StintResults")
                        .HasForeignKey("StintId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Result");

                    b.Navigation("Stint");
                });

            modelBuilder.Entity("SimTECH.Data.Models.StrategyTyre", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Strategy", "Strategy")
                        .WithMany("StrategyTyres")
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Tyre", "Tyre")
                        .WithMany("StrategyTyres")
                        .HasForeignKey("TyreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Strategy");

                    b.Navigation("Tyre");
                });

            modelBuilder.Entity("SimTECH.Data.Models.TeamTrait", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Team", "Team")
                        .WithMany("TeamTraits")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Trait", "Trait")
                        .WithMany("TeamTraits")
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("SimTECH.Data.Models.TrackTrait", b =>
                {
                    b.HasOne("SimTECH.Data.Models.Track", "Track")
                        .WithMany("TrackTraits")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimTECH.Data.Models.Trait", "Trait")
                        .WithMany("TrackTraits")
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Driver", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("DriverTraits");

                    b.Navigation("SeasonDrivers");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Engine", b =>
                {
                    b.Navigation("SeasonEngines");
                });

            modelBuilder.Entity("SimTECH.Data.Models.League", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("DevelopmentRanges");

                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Race", b =>
                {
                    b.Navigation("Penalties");

                    b.Navigation("Results");

                    b.Navigation("Stints");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Result", b =>
                {
                    b.Navigation("StintResults");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Season", b =>
                {
                    b.Navigation("PointAllotments");

                    b.Navigation("Races");

                    b.Navigation("SeasonDrivers");

                    b.Navigation("SeasonEngines");

                    b.Navigation("SeasonTeams");
                });

            modelBuilder.Entity("SimTECH.Data.Models.SeasonDriver", b =>
                {
                    b.Navigation("RaceResults");
                });

            modelBuilder.Entity("SimTECH.Data.Models.SeasonEngine", b =>
                {
                    b.Navigation("SeasonTeams");
                });

            modelBuilder.Entity("SimTECH.Data.Models.SeasonTeam", b =>
                {
                    b.Navigation("SeasonDrivers");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Stint", b =>
                {
                    b.Navigation("StintResults");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Strategy", b =>
                {
                    b.Navigation("StrategyTyres");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Team", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("SeasonTeams");

                    b.Navigation("TeamTraits");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Track", b =>
                {
                    b.Navigation("Races");

                    b.Navigation("TrackTraits");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Trait", b =>
                {
                    b.Navigation("DriverTraits");

                    b.Navigation("TeamTraits");

                    b.Navigation("TrackTraits");
                });

            modelBuilder.Entity("SimTECH.Data.Models.Tyre", b =>
                {
                    b.Navigation("StrategyTyres");
                });
#pragma warning restore 612, 618
        }
    }
}
